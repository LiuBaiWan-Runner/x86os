
E:/OS/x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/OS/x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00100000

Program Header:
    LOAD off    0x00001000 vaddr 0x00100000 paddr 0x00100000 align 2**12
         filesz 0x0000000d memsz 0x0000000d flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000000d  00100000  00100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000011  00000000  00000000  0000100d  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  00001020  2**3
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000bc  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000040  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000c1  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e2  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00100000 l    d  .text	00000000 .text
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 init.c
00100007 g     F .text	00000006 kernel_init
00100000 g       .text	00000000 _start
0010100d g       .text	00000000 __bss_start
0010100d g       .text	00000000 _edata
00101010 g       .text	00000000 _end



Disassembly of section .text:

00100000 <_start>:

    .text
    .extern kernel_init
    .global _start
_start:
    call kernel_init
  100000:	e8 02 00 00 00       	call   100007 <kernel_init>
  100005:	eb fe                	jmp    100005 <_start+0x5>

00100007 <kernel_init>:
#include "init.h"

void kernel_init(void){
  100007:	55                   	push   %ebp
  100008:	89 e5                	mov    %esp,%ebp

  10000a:	90                   	nop
  10000b:	5d                   	pop    %ebp
  10000c:	c3                   	ret    
