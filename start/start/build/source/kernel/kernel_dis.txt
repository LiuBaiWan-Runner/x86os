
E:/OS/x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/OS/x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000000c8 memsz 0x000008e0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000800  000100e0  000100e0  000010c8  2**5
                  ALLOC
  2 .debug_line   000001f0  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002d4  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001ac  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00001738  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_str    00000211  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      00000011  00000000  00000000  000019a9  2**0
                  CONTENTS, READONLY
  8 .debug_frame  000000a0  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000100e0 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cpu.c
000100e0 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 init.c
000100b0 g     F .text	0000000b cpu_init
0001007c g     F .text	00000034 gdt_init
000100bb g     F .text	0000000d kernel_init
00010000 g       .text	00000000 _start
0001000e g     F .text	0000006e segment_desc_set



Disassembly of section .text:

00010000 <_start>:
    .extern kernel_init
    .global _start

    # void start(boot_info_t *boot_info)
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax     # 模拟从栈中取出boot_info参数
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax     # 等同于上边四句

    # kernel_init(boot info)
    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 af 00 00 00       	call   100bb <kernel_init>
   1000c:	eb fe                	jmp    1000c <_start+0xc>

0001000e <segment_desc_set>:
#include "cpu/cpu.h"

static segment_desc_t gdt_table[GDT_TABLE_SIZE];

// 设置GDT表项
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr){
   1000e:	55                   	push   %ebp
   1000f:	89 e5                	mov    %esp,%ebp
   10011:	83 ec 14             	sub    $0x14,%esp
   10014:	8b 45 14             	mov    0x14(%ebp),%eax
   10017:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + (selector >> 3);     // GDT表从第二项开始，第一项不使用
   1001b:	8b 45 08             	mov    0x8(%ebp),%eax
   1001e:	c1 f8 03             	sar    $0x3,%eax
   10021:	c1 e0 03             	shl    $0x3,%eax
   10024:	05 e0 00 01 00       	add    $0x100e0,%eax
   10029:	89 45 fc             	mov    %eax,-0x4(%ebp)

    desc->limit15_0 = limit & 0xFFFF;
   1002c:	8b 45 10             	mov    0x10(%ebp),%eax
   1002f:	89 c2                	mov    %eax,%edx
   10031:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10034:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   10037:	8b 45 0c             	mov    0xc(%ebp),%eax
   1003a:	89 c2                	mov    %eax,%edx
   1003c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1003f:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   10043:	8b 45 0c             	mov    0xc(%ebp),%eax
   10046:	c1 e8 10             	shr    $0x10,%eax
   10049:	89 c2                	mov    %eax,%edx
   1004b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1004e:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   10051:	8b 45 10             	mov    0x10(%ebp),%eax
   10054:	c1 e8 10             	shr    $0x10,%eax
   10057:	c1 e0 08             	shl    $0x8,%eax
   1005a:	66 25 00 0f          	and    $0xf00,%ax
   1005e:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10062:	89 c2                	mov    %eax,%edx
   10064:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10067:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   1006b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1006e:	c1 e8 18             	shr    $0x18,%eax
   10071:	89 c2                	mov    %eax,%edx
   10073:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10076:	88 50 07             	mov    %dl,0x7(%eax)
}
   10079:	90                   	nop
   1007a:	c9                   	leave  
   1007b:	c3                   	ret    

0001007c <gdt_init>:

void gdt_init(void){
   1007c:	55                   	push   %ebp
   1007d:	89 e5                	mov    %esp,%ebp
   1007f:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0; i < GDT_TABLE_SIZE; i++){
   10082:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10089:	eb 19                	jmp    100a4 <gdt_init+0x28>
        segment_desc_set(i << 3, 0, 0, 0);
   1008b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1008e:	c1 e0 03             	shl    $0x3,%eax
   10091:	6a 00                	push   $0x0
   10093:	6a 00                	push   $0x0
   10095:	6a 00                	push   $0x0
   10097:	50                   	push   %eax
   10098:	e8 71 ff ff ff       	call   1000e <segment_desc_set>
   1009d:	83 c4 10             	add    $0x10,%esp
    for(int i = 0; i < GDT_TABLE_SIZE; i++){
   100a0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   100a4:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   100ab:	7e de                	jle    1008b <gdt_init+0xf>
    }
}
   100ad:	90                   	nop
   100ae:	c9                   	leave  
   100af:	c3                   	ret    

000100b0 <cpu_init>:

void cpu_init(void){
   100b0:	55                   	push   %ebp
   100b1:	89 e5                	mov    %esp,%ebp
    gdt_init();
   100b3:	e8 c4 ff ff ff       	call   1007c <gdt_init>
   100b8:	90                   	nop
   100b9:	5d                   	pop    %ebp
   100ba:	c3                   	ret    

000100bb <kernel_init>:
#include "init.h"

void kernel_init(boot_info_t *boot_info){
   100bb:	55                   	push   %ebp
   100bc:	89 e5                	mov    %esp,%ebp
   100be:	83 ec 08             	sub    $0x8,%esp

    cpu_init();
   100c1:	e8 ea ff ff ff       	call   100b0 <cpu_init>

    for(;;){}
   100c6:	eb fe                	jmp    100c6 <kernel_init+0xb>
