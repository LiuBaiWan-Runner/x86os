
E:/OS/x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/OS/x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00200000

Program Header:
    LOAD off    0x00001000 vaddr 0x00200000 paddr 0x00200000 align 2**12
         filesz 0x00000014 memsz 0x00000014 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000014  00200000  00200000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_line   00000103  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_info   0000015d  00000000  00000000  00001117  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_abbrev 000000ba  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001330  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_str    0000014e  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY
  7 .debug_frame  00000034  00000000  00000000  000014d0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00200000 l    d  .text	00000000 .text
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 init.c
0020000e g     F .text	00000006 kernel_init
00200000 g       .text	00000000 _start



Disassembly of section .text:

00200000 <_start>:
    .extern kernel_init
    .global _start

    # void start(boot_info_t *boot_info)
_start:
    push %ebp
  200000:	55                   	push   %ebp
    mov %esp, %ebp
  200001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax     # 模拟从栈中取出boot_info参数
  200003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax     # 等同于上边四句

    # kernel_init(boot info)
    push %eax
  200006:	50                   	push   %eax
    call kernel_init
  200007:	e8 02 00 00 00       	call   20000e <kernel_init>
  20000c:	eb fe                	jmp    20000c <_start+0xc>

0020000e <kernel_init>:
#include "init.h"

void kernel_init(boot_info_t *boot_info){
  20000e:	55                   	push   %ebp
  20000f:	89 e5                	mov    %esp,%ebp

  200011:	90                   	nop
  200012:	5d                   	pop    %ebp
  200013:	c3                   	ret    
