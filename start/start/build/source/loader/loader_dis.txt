
E:/OS/x86os/start/start/build/source/loader/loader.elf:     file format elf32-i386
E:/OS/x86os/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000381 memsz 0x00000381 flags r-x
    LOAD off    0x00001384 vaddr 0x00009384 paddr 0x00009384 align 2**12
         filesz 0x00000018 memsz 0x00000070 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000339  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000048  00008339  00008339  00001339  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00009384  00009384  00001384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  000093a0  000093a0  0000139c  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000013b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004ae  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001c5  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f5  00000000  00000000  00001a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00001c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000298  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
00008339 l    d  .rodata	00000000 .rodata
00009384 l    d  .data	00000000 .data
000093a0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000002a inb
00008042 l     F .text	0000002d outb
0000806f l     F .text	0000000b cli
0000807a l     F .text	00000036 lgdt
000080b0 l     F .text	0000001a read_cr0
000080ca l     F .text	00000012 write_cr0
000080dc l     F .text	0000002b far_jump
000093a0 l     O .bss	00000054 boot_info
00008107 l     F .text	0000003b show_msg
00008142 l     F .text	00000139 detect_memory
0000827b l     F .text	00000096 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008311 g     F .text	00000023 loader_entry
00009384 g     O .data	00000018 gdt_table
00008334 g     F .text	00000005 load_kernel
00008000 g       .text	00000000 _start
0000939c g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
0000939c g       .data	00000000 _edata
000093f4 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
    .code16
    .text
    .global _start
    .extern loader_entry
_start:
    jmp loader_entry
    8000:	e9 0e 03             	jmp    8311 <loader_entry>

00008003 <protect_mode_entry>:
    .code32
    .text
    .global protect_mode_entry
    .extern load_kernel
protect_mode_entry:
    mov $16, %ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
    mov %ax, %ds
    mov %ax, %ss
    8009:	8e d0                	mov    %ax,%ss
    mov %ax, %es
    800b:	8e c0                	mov    %ax,%es
    mov %ax, %fs
    800d:	8e e0                	mov    %ax,%fs
    mov %ax, %gs
    800f:	8e e8                	mov    %ax,%gs
    8011:	ea 34 83 00 00       	ljmp   $0x0,$0x8334
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <inb>:
#ifndef CPU_INSTR_H
#define CPU_INSTR_H

#include "types.h"

static inline uint8_t inb(uint16_t port){
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    801d:	66 83 ec 14          	sub    $0x14,%esp
    8021:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8026:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t value;
    // inb al, dx
    __asm__ __volatile__(
    802a:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8030:	66 89 c2             	mov    %eax,%edx
    8033:	ec                   	in     (%dx),%al
    8034:	67 88 45 ff          	mov    %al,-0x1(%ebp)
        "inb %[port], %[value]"
        : [value]"=a"(value)
        : [port]"d"(port)
    );
    return value;
    8038:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    803e:	66 c9                	leavel 
    8040:	66 c3                	retl   

00008042 <outb>:

static inline void outb(uint16_t port, uint8_t data){
    8042:	66 55                	push   %ebp
    8044:	66 89 e5             	mov    %esp,%ebp
    8047:	66 83 ec 08          	sub    $0x8,%esp
    804b:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    8050:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8055:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    8059:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    // outb al, dx
    __asm__ __volatile__(
    805d:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8063:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8069:	ee                   	out    %al,(%dx)
        "outb %[data], %[port]"
        :
        : [data]"a"(data), [port]"d"(port)
    );
}
    806a:	90                   	nop
    806b:	66 c9                	leavel 
    806d:	66 c3                	retl   

0000806f <cli>:

static inline void cli(void){
    806f:	66 55                	push   %ebp
    8071:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli");
    8074:	fa                   	cli    
}
    8075:	90                   	nop
    8076:	66 5d                	pop    %ebp
    8078:	66 c3                	retl   

0000807a <lgdt>:

static inline void sti(void){
    __asm__ __volatile__("sti");
}

static inline void lgdt(uint32_t start, uint32_t size){
    807a:	66 55                	push   %ebp
    807c:	66 89 e5             	mov    %esp,%ebp
    807f:	66 83 ec 10          	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    }gdt;

    gdt.start31_16 = start >> 16;
    8083:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8088:	66 c1 e8 10          	shr    $0x10,%eax
    808c:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
    8090:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8095:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
    8099:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    809e:	66 83 e8 01          	sub    $0x1,%eax
    80a2:	67 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__(
    80a6:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
        "lgdt %[g]"
        :
        :[g]"m"(gdt)
    );
}
    80ab:	90                   	nop
    80ac:	66 c9                	leavel 
    80ae:	66 c3                	retl   

000080b0 <read_cr0>:

static inline uint16_t read_cr0(void){
    80b0:	66 55                	push   %ebp
    80b2:	66 89 e5             	mov    %esp,%ebp
    80b5:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;

    __asm__ __volatile__(
    80b9:	0f 20 c0             	mov    %cr0,%eax
    80bc:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
        "mov %%cr0, %[v]"
        :[v]"=r"(cr0)
        :
    );
    return cr0;
    80c1:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80c6:	66 c9                	leavel 
    80c8:	66 c3                	retl   

000080ca <write_cr0>:

static inline void write_cr0(uint32_t v){
    80ca:	66 55                	push   %ebp
    80cc:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__(
    80cf:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d4:	0f 22 c0             	mov    %eax,%cr0
        "mov %[v], %%cr0"
        :
        :[v]"r"(v)
    );
}
    80d7:	90                   	nop
    80d8:	66 5d                	pop    %ebp
    80da:	66 c3                	retl   

000080dc <far_jump>:

static inline void far_jump(uint32_t selector, uint32_t offset){
    80dc:	66 55                	push   %ebp
    80de:	66 89 e5             	mov    %esp,%ebp
    80e1:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
    80e5:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ea:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80ef:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f4:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__(
    80f9:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    80fe:	67 66 ff 28          	ljmpl  *(%eax)
        "ljmpl *(%[a])"
        :
        :[a]"r"(addr)
    );
}
    8102:	90                   	nop
    8103:	66 c9                	leavel 
    8105:	66 c3                	retl   

00008107 <show_msg>:
#include "loader.h"

static boot_info_t boot_info;

// 使用内联汇编打印字符串
static void show_msg (const char *msg){
    8107:	66 55                	push   %ebp
    8109:	66 89 e5             	mov    %esp,%ebp
    810c:	66 83 ec 10          	sub    $0x10,%esp
    char c;

    while((c = *msg++) != '\0'){
    8110:	eb 0c                	jmp    811e <show_msg+0x17>
        __asm__ __volatile(         //避免GCC编译器对内联汇编进行优化，强制要求GCC不进行优化
    8112:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8118:	b4 0e                	mov    $0xe,%ah
    811a:	88 c0                	mov    %al,%al
    811c:	cd 10                	int    $0x10
    while((c = *msg++) != '\0'){
    811e:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8123:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8128:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    812d:	67 66 0f b6 00       	movzbl (%eax),%eax
    8132:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8136:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    813b:	75 d5                	jne    8112 <show_msg+0xb>
            "int $0x10"
            :
            :[ch]"r"(c)
        );
    }
}
    813d:	90                   	nop
    813e:	66 c9                	leavel 
    8140:	66 c3                	retl   

00008142 <detect_memory>:

// 检测内存容量
static void detect_memory(void){
    8142:	66 55                	push   %ebp
    8144:	66 89 e5             	mov    %esp,%ebp
    8147:	66 57                	push   %edi
    8149:	66 56                	push   %esi
    814b:	66 53                	push   %ebx
    814d:	66 83 ec 30          	sub    $0x30,%esp
    SMAP_entry_t smap_entry;
    uint32_t contID = 0, signature, bytes;
    8151:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8158:	00 00 

    show_msg("Trying to detect memory: ");
    815a:	66 68 39 83 00 00    	pushl  $0x8339
    8160:	66 e8 a1 ff ff ff    	calll  8107 <show_msg>
    8166:	66 83 c4 04          	add    $0x4,%esp

    boot_info.ram_region_count = 0;
    816a:	66 c7 06 f0 93 00 00 	movl   $0x0,-0x6c10
    8171:	00 00 
    for(int i = 0; i < BOOT_RAM_REGION_MAX; i++){
    8173:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    817a:	00 00 
    817c:	e9 d0 00             	jmp    824f <detect_memory+0x10d>
        SMAP_entry_t *entry = &smap_entry;
    817f:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8184:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)
        __asm__ __volatile__(
    8189:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    818f:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    8194:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    819a:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81a0:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81a5:	66 89 f7             	mov    %esi,%edi
    81a8:	cd 15                	int    $0x15
    81aa:	66 89 da             	mov    %ebx,%edx
    81ad:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81b2:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81b7:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
            "int $0x15"
            :"=a"(signature), "=c"(bytes), "=b"(contID)
            :"a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));
        if(signature != 0x534D4150){
    81bc:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81c3:	4d 53 
    81c5:	74 13                	je     81da <detect_memory+0x98>
            show_msg("Falied!\n\r");
    81c7:	66 68 53 83 00 00    	pushl  $0x8353
    81cd:	66 e8 34 ff ff ff    	calll  8107 <show_msg>
    81d3:	66 83 c4 04          	add    $0x4,%esp
            return;
    81d7:	e9 92 00             	jmp    826c <detect_memory+0x12a>
        }
        if(bytes > 20 && (entry->ACPI & 0x0001) == 0){
    81da:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e0:	76 13                	jbe    81f5 <detect_memory+0xb3>
    81e2:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81e7:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81ec:	66 83 e0 01          	and    $0x1,%eax
    81f0:	66 85 c0             	test   %eax,%eax
    81f3:	74 53                	je     8248 <detect_memory+0x106>
            // ignore this entry
            continue;
        }
        if(entry->Type == 1){
    81f5:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81fa:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    81ff:	66 83 f8 01          	cmp    $0x1,%eax
    8203:	75 39                	jne    823e <detect_memory+0xfc>
            //记录当前可用内存空间的起始地址和大小，使用低32位
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    8205:	66 a1 f0 93          	mov    0x93f0,%eax
    8209:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    820e:	67 66 8b 12          	mov    (%edx),%edx
    8212:	67 66 89 14 c5 a0 93 	mov    %edx,0x93a0(,%eax,8)
    8219:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    821b:	66 a1 f0 93          	mov    0x93f0,%eax
    821f:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8224:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    8229:	67 66 89 14 c5 a4 93 	mov    %edx,0x93a4(,%eax,8)
    8230:	00 00 
            boot_info.ram_region_count++;
    8232:	66 a1 f0 93          	mov    0x93f0,%eax
    8236:	66 83 c0 01          	add    $0x1,%eax
    823a:	66 a3 f0 93          	mov    %eax,0x93f0
        }
        if(contID == 0){
    823e:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8244:	74 15                	je     825b <detect_memory+0x119>
    8246:	eb 01                	jmp    8249 <detect_memory+0x107>
            continue;
    8248:	90                   	nop
    for(int i = 0; i < BOOT_RAM_REGION_MAX; i++){
    8249:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    824f:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8255:	0f 8e 26 ff          	jle    817f <detect_memory+0x3d>
    8259:	eb 01                	jmp    825c <detect_memory+0x11a>
            //读取结束
            break;
    825b:	90                   	nop
        }
    }
    show_msg("Successful!\n\r");
    825c:	66 68 5d 83 00 00    	pushl  $0x835d
    8262:	66 e8 9f fe ff ff    	calll  8107 <show_msg>
    8268:	66 83 c4 04          	add    $0x4,%esp
}
    826c:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8271:	66 5b                	pop    %ebx
    8273:	66 5e                	pop    %esi
    8275:	66 5f                	pop    %edi
    8277:	66 5d                	pop    %ebp
    8279:	66 c3                	retl   

0000827b <enter_protect_mode>:
    {0, 0, 0, 0},
    {0xffff, 0x0000, 0x9a00,0x00cf},
    {0xffff, 0x0000, 0x9200,0x00cf},
};

static void enter_protect_mode(void){
    827b:	66 55                	push   %ebp
    827d:	66 89 e5             	mov    %esp,%ebp
    8280:	66 83 ec 10          	sub    $0x10,%esp
    cli();      // 关中断
    8284:	66 e8 e5 fd ff ff    	calll  806f <cli>
    // 打开A20地址线
    uint8_t value = inb(0x92);
    828a:	66 68 92 00 00 00    	pushl  $0x92
    8290:	66 e8 82 fd ff ff    	calll  8018 <inb>
    8296:	66 83 c4 04          	add    $0x4,%esp
    829a:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92, value | 0x2);
    829e:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82a4:	66 83 c8 02          	or     $0x2,%eax
    82a8:	66 0f b6 c0          	movzbl %al,%eax
    82ac:	66 50                	push   %eax
    82ae:	66 68 92 00 00 00    	pushl  $0x92
    82b4:	66 e8 88 fd ff ff    	calll  8042 <outb>
    82ba:	66 83 c4 08          	add    $0x8,%esp
    // 加载GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
    82be:	66 b8 84 93 00 00    	mov    $0x9384,%eax
    82c4:	66 6a 18             	pushl  $0x18
    82c7:	66 50                	push   %eax
    82c9:	66 e8 ab fd ff ff    	calll  807a <lgdt>
    82cf:	66 83 c4 08          	add    $0x8,%esp
    // CR0的PE位置一
    uint32_t cr0 = read_cr0();
    82d3:	66 e8 d7 fd ff ff    	calll  80b0 <read_cr0>
    82d9:	66 0f b7 c0          	movzwl %ax,%eax
    82dd:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    write_cr0(cr0 | (1 << 0));
    82e2:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82e7:	66 83 c8 01          	or     $0x1,%eax
    82eb:	66 50                	push   %eax
    82ed:	66 e8 d7 fd ff ff    	calll  80ca <write_cr0>
    82f3:	66 83 c4 04          	add    $0x4,%esp
    // 远跳转，清空流水线， 8：与GDT选择子有关
    far_jump(8, (uint32_t)protect_mode_entry);
    82f7:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    82fd:	66 50                	push   %eax
    82ff:	66 6a 08             	pushl  $0x8
    8302:	66 e8 d4 fd ff ff    	calll  80dc <far_jump>
    8308:	66 83 c4 08          	add    $0x8,%esp
}
    830c:	90                   	nop
    830d:	66 c9                	leavel 
    830f:	66 c3                	retl   

00008311 <loader_entry>:

void loader_entry(){
    8311:	66 55                	push   %ebp
    8313:	66 89 e5             	mov    %esp,%ebp
    show_msg("......loading......\n\r");
    8316:	66 68 6b 83 00 00    	pushl  $0x836b
    831c:	66 e8 e5 fd ff ff    	calll  8107 <show_msg>
    8322:	66 83 c4 04          	add    $0x4,%esp
    detect_memory();
    8326:	66 e8 16 fe ff ff    	calll  8142 <detect_memory>
    enter_protect_mode();
    832c:	66 e8 49 ff ff ff    	calll  827b <enter_protect_mode>
    for(;;){}
    8332:	eb fe                	jmp    8332 <loader_entry+0x21>

00008334 <load_kernel>:
#include "loader.h"

void load_kernel(void){
    8334:	55                   	push   %bp
    8335:	89 e5                	mov    %sp,%bp
    for(;;){}
    8337:	eb fe                	jmp    8337 <load_kernel+0x3>
