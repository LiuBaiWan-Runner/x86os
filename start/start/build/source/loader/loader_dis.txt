
E:/OS/x86os/start/start/build/source/loader/loader.elf:     file format elf32-i386
E:/OS/x86os/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000539 memsz 0x00000539 flags r-x
    LOAD off    0x0000153c vaddr 0x0000953c paddr 0x0000953c align 2**12
         filesz 0x00000018 memsz 0x00000078 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f1  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000048  000084f1  000084f1  000014f1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  0000953c  0000953c  0000153c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  00009560  00009560  00001554  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001568  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000064c  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002df  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000296  00000000  00000000  00001ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  0000218c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c6  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000267a  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
000084f1 l    d  .rodata	00000000 .rodata
0000953c l    d  .data	00000000 .data
00009560 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000002a inb
00008042 l     F .text	0000002d outb
0000806f l     F .text	0000000b cli
0000807a l     F .text	00000036 lgdt
000080b0 l     F .text	0000001a read_cr0
000080ca l     F .text	00000012 write_cr0
000080dc l     F .text	0000002b far_jump
00008107 l     F .text	0000003b show_msg
00008142 l     F .text	00000139 detect_memory
0000827b l     F .text	00000096 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008334 l     F .text	0000001d inb
00008351 l     F .text	0000001f inw
00008370 l     F .text	0000001f outb
0000838f l     F .text	00000134 read_disk
00008311 g     F .text	00000023 loader_entry
0000953c g     O .data	00000018 gdt_table
000084c3 g     F .text	0000002e load_kernel
00009560 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
00009554 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
00009554 g       .data	00000000 _edata
000095b4 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
    .code16
    .text
    .global _start
    .extern loader_entry
_start:
    jmp loader_entry
    8000:	e9 0e 03             	jmp    8311 <loader_entry>

00008003 <protect_mode_entry>:
    .code32
    .text
    .global protect_mode_entry
    .extern load_kernel
protect_mode_entry:
    mov $16, %ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
    mov %ax, %ds
    mov %ax, %ss
    8009:	8e d0                	mov    %ax,%ss
    mov %ax, %es
    800b:	8e c0                	mov    %ax,%es
    mov %ax, %fs
    800d:	8e e0                	mov    %ax,%fs
    mov %ax, %gs
    800f:	8e e8                	mov    %ax,%gs
    8011:	ea c3 84 00 00       	ljmp   $0x0,$0x84c3
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <inb>:
#ifndef CPU_INSTR_H
#define CPU_INSTR_H

#include "types.h"

static inline uint8_t inb(uint16_t port){
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    801d:	66 83 ec 14          	sub    $0x14,%esp
    8021:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8026:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t value;
    // inb al, dx
    __asm__ __volatile__(
    802a:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8030:	66 89 c2             	mov    %eax,%edx
    8033:	ec                   	in     (%dx),%al
    8034:	67 88 45 ff          	mov    %al,-0x1(%ebp)
        "inb %[port], %[value]"
        : [value]"=a"(value)
        : [port]"d"(port)
    );
    return value;
    8038:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    803e:	66 c9                	leavel 
    8040:	66 c3                	retl   

00008042 <outb>:
        : [port]"d"(port)
    );
    return value;
}

static inline void outb(uint16_t port, uint8_t data){
    8042:	66 55                	push   %ebp
    8044:	66 89 e5             	mov    %esp,%ebp
    8047:	66 83 ec 08          	sub    $0x8,%esp
    804b:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    8050:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8055:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    8059:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    // outb al, dx
    __asm__ __volatile__(
    805d:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8063:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8069:	ee                   	out    %al,(%dx)
        "outb %[data], %[port]"
        :
        : [data]"a"(data), [port]"d"(port)
    );
}
    806a:	90                   	nop
    806b:	66 c9                	leavel 
    806d:	66 c3                	retl   

0000806f <cli>:

static inline void cli(void){
    806f:	66 55                	push   %ebp
    8071:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli");
    8074:	fa                   	cli    
}
    8075:	90                   	nop
    8076:	66 5d                	pop    %ebp
    8078:	66 c3                	retl   

0000807a <lgdt>:

static inline void sti(void){
    __asm__ __volatile__("sti");
}

static inline void lgdt(uint32_t start, uint32_t size){
    807a:	66 55                	push   %ebp
    807c:	66 89 e5             	mov    %esp,%ebp
    807f:	66 83 ec 10          	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    }gdt;

    gdt.start31_16 = start >> 16;
    8083:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8088:	66 c1 e8 10          	shr    $0x10,%eax
    808c:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
    8090:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8095:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
    8099:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    809e:	66 83 e8 01          	sub    $0x1,%eax
    80a2:	67 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__(
    80a6:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
        "lgdt %[g]"
        :
        :[g]"m"(gdt)
    );
}
    80ab:	90                   	nop
    80ac:	66 c9                	leavel 
    80ae:	66 c3                	retl   

000080b0 <read_cr0>:

static inline uint16_t read_cr0(void){
    80b0:	66 55                	push   %ebp
    80b2:	66 89 e5             	mov    %esp,%ebp
    80b5:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;

    __asm__ __volatile__(
    80b9:	0f 20 c0             	mov    %cr0,%eax
    80bc:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
        "mov %%cr0, %[v]"
        :[v]"=r"(cr0)
        :
    );
    return cr0;
    80c1:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80c6:	66 c9                	leavel 
    80c8:	66 c3                	retl   

000080ca <write_cr0>:

static inline void write_cr0(uint32_t v){
    80ca:	66 55                	push   %ebp
    80cc:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__(
    80cf:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d4:	0f 22 c0             	mov    %eax,%cr0
        "mov %[v], %%cr0"
        :
        :[v]"r"(v)
    );
}
    80d7:	90                   	nop
    80d8:	66 5d                	pop    %ebp
    80da:	66 c3                	retl   

000080dc <far_jump>:

static inline void far_jump(uint32_t selector, uint32_t offset){
    80dc:	66 55                	push   %ebp
    80de:	66 89 e5             	mov    %esp,%ebp
    80e1:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
    80e5:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ea:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80ef:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f4:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__(
    80f9:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    80fe:	67 66 ff 28          	ljmpl  *(%eax)
        "ljmpl *(%[a])"
        :
        :[a]"r"(addr)
    );
}
    8102:	90                   	nop
    8103:	66 c9                	leavel 
    8105:	66 c3                	retl   

00008107 <show_msg>:
#include "loader.h"

boot_info_t boot_info;

// 使用内联汇编打印字符串
static void show_msg (const char *msg){
    8107:	66 55                	push   %ebp
    8109:	66 89 e5             	mov    %esp,%ebp
    810c:	66 83 ec 10          	sub    $0x10,%esp
    char c;

    while((c = *msg++) != '\0'){
    8110:	eb 0c                	jmp    811e <show_msg+0x17>
        __asm__ __volatile(         //避免GCC编译器对内联汇编进行优化，强制要求GCC不进行优化
    8112:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8118:	b4 0e                	mov    $0xe,%ah
    811a:	88 c0                	mov    %al,%al
    811c:	cd 10                	int    $0x10
    while((c = *msg++) != '\0'){
    811e:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8123:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8128:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    812d:	67 66 0f b6 00       	movzbl (%eax),%eax
    8132:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8136:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    813b:	75 d5                	jne    8112 <show_msg+0xb>
            "int $0x10"
            :
            :[ch]"r"(c)
        );
    }
}
    813d:	90                   	nop
    813e:	66 c9                	leavel 
    8140:	66 c3                	retl   

00008142 <detect_memory>:

// 检测内存容量
static void detect_memory(void){
    8142:	66 55                	push   %ebp
    8144:	66 89 e5             	mov    %esp,%ebp
    8147:	66 57                	push   %edi
    8149:	66 56                	push   %esi
    814b:	66 53                	push   %ebx
    814d:	66 83 ec 30          	sub    $0x30,%esp
    SMAP_entry_t smap_entry;
    uint32_t contID = 0, signature, bytes;
    8151:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8158:	00 00 

    show_msg("Trying to detect memory: ");
    815a:	66 68 f1 84 00 00    	pushl  $0x84f1
    8160:	66 e8 a1 ff ff ff    	calll  8107 <show_msg>
    8166:	66 83 c4 04          	add    $0x4,%esp

    boot_info.ram_region_count = 0;
    816a:	66 c7 06 b0 95 00 00 	movl   $0x0,-0x6a50
    8171:	00 00 
    for(int i = 0; i < BOOT_RAM_REGION_MAX; i++){
    8173:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    817a:	00 00 
    817c:	e9 d0 00             	jmp    824f <detect_memory+0x10d>
        SMAP_entry_t *entry = &smap_entry;
    817f:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8184:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)
        __asm__ __volatile__(
    8189:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    818f:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    8194:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    819a:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81a0:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81a5:	66 89 f7             	mov    %esi,%edi
    81a8:	cd 15                	int    $0x15
    81aa:	66 89 da             	mov    %ebx,%edx
    81ad:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81b2:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81b7:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
            "int $0x15"
            :"=a"(signature), "=c"(bytes), "=b"(contID)
            :"a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));
        if(signature != 0x534D4150){
    81bc:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81c3:	4d 53 
    81c5:	74 13                	je     81da <detect_memory+0x98>
            show_msg("Falied!\n\r");
    81c7:	66 68 0b 85 00 00    	pushl  $0x850b
    81cd:	66 e8 34 ff ff ff    	calll  8107 <show_msg>
    81d3:	66 83 c4 04          	add    $0x4,%esp
            return;
    81d7:	e9 92 00             	jmp    826c <detect_memory+0x12a>
        }
        if(bytes > 20 && (entry->ACPI & 0x0001) == 0){
    81da:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e0:	76 13                	jbe    81f5 <detect_memory+0xb3>
    81e2:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81e7:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81ec:	66 83 e0 01          	and    $0x1,%eax
    81f0:	66 85 c0             	test   %eax,%eax
    81f3:	74 53                	je     8248 <detect_memory+0x106>
            // ignore this entry
            continue;
        }
        if(entry->Type == 1){
    81f5:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81fa:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    81ff:	66 83 f8 01          	cmp    $0x1,%eax
    8203:	75 39                	jne    823e <detect_memory+0xfc>
            //记录当前可用内存空间的起始地址和大小，使用低32位
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    8205:	66 a1 b0 95          	mov    0x95b0,%eax
    8209:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    820e:	67 66 8b 12          	mov    (%edx),%edx
    8212:	67 66 89 14 c5 60 95 	mov    %edx,0x9560(,%eax,8)
    8219:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    821b:	66 a1 b0 95          	mov    0x95b0,%eax
    821f:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8224:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    8229:	67 66 89 14 c5 64 95 	mov    %edx,0x9564(,%eax,8)
    8230:	00 00 
            boot_info.ram_region_count++;
    8232:	66 a1 b0 95          	mov    0x95b0,%eax
    8236:	66 83 c0 01          	add    $0x1,%eax
    823a:	66 a3 b0 95          	mov    %eax,0x95b0
        }
        if(contID == 0){
    823e:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8244:	74 15                	je     825b <detect_memory+0x119>
    8246:	eb 01                	jmp    8249 <detect_memory+0x107>
            continue;
    8248:	90                   	nop
    for(int i = 0; i < BOOT_RAM_REGION_MAX; i++){
    8249:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    824f:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8255:	0f 8e 26 ff          	jle    817f <detect_memory+0x3d>
    8259:	eb 01                	jmp    825c <detect_memory+0x11a>
            //读取结束
            break;
    825b:	90                   	nop
        }
    }
    show_msg("Successful!\n\r");
    825c:	66 68 15 85 00 00    	pushl  $0x8515
    8262:	66 e8 9f fe ff ff    	calll  8107 <show_msg>
    8268:	66 83 c4 04          	add    $0x4,%esp
}
    826c:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8271:	66 5b                	pop    %ebx
    8273:	66 5e                	pop    %esi
    8275:	66 5f                	pop    %edi
    8277:	66 5d                	pop    %ebp
    8279:	66 c3                	retl   

0000827b <enter_protect_mode>:
    {0, 0, 0, 0},
    {0xffff, 0x0000, 0x9a00,0x00cf},
    {0xffff, 0x0000, 0x9200,0x00cf},
};

static void enter_protect_mode(void){
    827b:	66 55                	push   %ebp
    827d:	66 89 e5             	mov    %esp,%ebp
    8280:	66 83 ec 10          	sub    $0x10,%esp
    cli();      // 关中断
    8284:	66 e8 e5 fd ff ff    	calll  806f <cli>
    // 打开A20地址线
    uint8_t value = inb(0x92);
    828a:	66 68 92 00 00 00    	pushl  $0x92
    8290:	66 e8 82 fd ff ff    	calll  8018 <inb>
    8296:	66 83 c4 04          	add    $0x4,%esp
    829a:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92, value | 0x2);
    829e:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82a4:	66 83 c8 02          	or     $0x2,%eax
    82a8:	66 0f b6 c0          	movzbl %al,%eax
    82ac:	66 50                	push   %eax
    82ae:	66 68 92 00 00 00    	pushl  $0x92
    82b4:	66 e8 88 fd ff ff    	calll  8042 <outb>
    82ba:	66 83 c4 08          	add    $0x8,%esp
    // 加载GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
    82be:	66 b8 3c 95 00 00    	mov    $0x953c,%eax
    82c4:	66 6a 18             	pushl  $0x18
    82c7:	66 50                	push   %eax
    82c9:	66 e8 ab fd ff ff    	calll  807a <lgdt>
    82cf:	66 83 c4 08          	add    $0x8,%esp
    // CR0的PE位置一
    uint32_t cr0 = read_cr0();
    82d3:	66 e8 d7 fd ff ff    	calll  80b0 <read_cr0>
    82d9:	66 0f b7 c0          	movzwl %ax,%eax
    82dd:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    write_cr0(cr0 | (1 << 0));
    82e2:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82e7:	66 83 c8 01          	or     $0x1,%eax
    82eb:	66 50                	push   %eax
    82ed:	66 e8 d7 fd ff ff    	calll  80ca <write_cr0>
    82f3:	66 83 c4 04          	add    $0x4,%esp
    // 远跳转，清空流水线，进入汇编运行     8：与GDT选择子有关
    far_jump(8, (uint32_t)protect_mode_entry);
    82f7:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    82fd:	66 50                	push   %eax
    82ff:	66 6a 08             	pushl  $0x8
    8302:	66 e8 d4 fd ff ff    	calll  80dc <far_jump>
    8308:	66 83 c4 08          	add    $0x8,%esp
}
    830c:	90                   	nop
    830d:	66 c9                	leavel 
    830f:	66 c3                	retl   

00008311 <loader_entry>:

void loader_entry(){
    8311:	66 55                	push   %ebp
    8313:	66 89 e5             	mov    %esp,%ebp
    show_msg("......loading......\n\r");
    8316:	66 68 23 85 00 00    	pushl  $0x8523
    831c:	66 e8 e5 fd ff ff    	calll  8107 <show_msg>
    8322:	66 83 c4 04          	add    $0x4,%esp
    detect_memory();
    8326:	66 e8 16 fe ff ff    	calll  8142 <detect_memory>
    enter_protect_mode();
    832c:	66 e8 49 ff ff ff    	calll  827b <enter_protect_mode>

    for(;;){}
    8332:	eb fe                	jmp    8332 <loader_entry+0x21>

00008334 <inb>:
static inline uint8_t inb(uint16_t port){
    8334:	55                   	push   %bp
    8335:	89 e5                	mov    %sp,%bp
    8337:	83 ec 14             	sub    $0x14,%sp
    833a:	8b 45 08             	mov    0x8(%di),%ax
    833d:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__(
    8341:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8345:	89 c2                	mov    %ax,%dx
    8347:	ec                   	in     (%dx),%al
    8348:	88 45 ff             	mov    %al,-0x1(%di)
    return value;
    834b:	0f b6 45 ff          	movzbw -0x1(%di),%ax
}
    834f:	c9                   	leave  
    8350:	c3                   	ret    

00008351 <inw>:
static inline uint16_t inw(uint16_t port){
    8351:	55                   	push   %bp
    8352:	89 e5                	mov    %sp,%bp
    8354:	83 ec 14             	sub    $0x14,%sp
    8357:	8b 45 08             	mov    0x8(%di),%ax
    835a:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__(
    835e:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8362:	89 c2                	mov    %ax,%dx
    8364:	66 ed                	in     (%dx),%eax
    8366:	66 89 45 fe          	mov    %eax,-0x2(%di)
    return value;
    836a:	0f b7 45 fe          	movzww -0x2(%di),%ax
}
    836e:	c9                   	leave  
    836f:	c3                   	ret    

00008370 <outb>:
static inline void outb(uint16_t port, uint8_t data){
    8370:	55                   	push   %bp
    8371:	89 e5                	mov    %sp,%bp
    8373:	83 ec 08             	sub    $0x8,%sp
    8376:	8b 55 08             	mov    0x8(%di),%dx
    8379:	8b 45 0c             	mov    0xc(%di),%ax
    837c:	66 89 55 fc          	mov    %edx,-0x4(%di)
    8380:	88 45 f8             	mov    %al,-0x8(%di)
    __asm__ __volatile__(
    8383:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    8387:	0f b7 55 fc          	movzww -0x4(%di),%dx
    838b:	ee                   	out    %al,(%dx)
}
    838c:	90                   	nop
    838d:	c9                   	leave  
    838e:	c3                   	ret    

0000838f <read_disk>:
#include "loader.h"

// https://wiki.osdev.org/ATA_PIO_Mode
// sector:扇区号        sector_count:扇区数目
static void read_disk(uint32_t sector, uint32_t sector_count, uint8_t *buffer){
    838f:	55                   	push   %bp
    8390:	89 e5                	mov    %sp,%bp
    8392:	53                   	push   %bx
    8393:	83 ec 10             	sub    $0x10,%sp
    // 48 bit PIO
    // 0x40 : LBA, slavebit << 4 : DRV, 第一块硬盘为0，所以slavebit = 0, 0x1010 0000,固定为1的位， 最终0x1110 0000(0xE0)
    outb(0x1F6, (uint8_t)(0xE0));
    8396:	68 e0 00             	push   $0xe0
    8399:	00 00                	add    %al,(%bx,%si)
    839b:	68 f6 01             	push   $0x1f6
    839e:	00 00                	add    %al,(%bx,%si)
    83a0:	e8 cb ff             	call   836e <inw+0x1d>
    83a3:	ff                   	(bad)  
    83a4:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(0x1F2, (uint8_t)(sector_count >> 8));
    83a8:	8b 45 0c             	mov    0xc(%di),%ax
    83ab:	c1 e8 08             	shr    $0x8,%ax
    83ae:	0f b6 c0             	movzbw %al,%ax
    83b1:	50                   	push   %ax
    83b2:	68 f2 01             	push   $0x1f2
    83b5:	00 00                	add    %al,(%bx,%si)
    83b7:	e8 b4 ff             	call   836e <inw+0x1d>
    83ba:	ff                   	(bad)  
    83bb:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3, (uint8_t)(sector >> 24));   // 24-31
    83bf:	8b 45 08             	mov    0x8(%di),%ax
    83c2:	c1 e8 18             	shr    $0x18,%ax
    83c5:	0f b6 c0             	movzbw %al,%ax
    83c8:	50                   	push   %ax
    83c9:	68 f3 01             	push   $0x1f3
    83cc:	00 00                	add    %al,(%bx,%si)
    83ce:	e8 9d ff             	call   836e <inw+0x1d>
    83d1:	ff                   	(bad)  
    83d2:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, 0);
    83d6:	6a 00                	push   $0x0
    83d8:	68 f4 01             	push   $0x1f4
    83db:	00 00                	add    %al,(%bx,%si)
    83dd:	e8 8e ff             	call   836e <inw+0x1d>
    83e0:	ff                   	(bad)  
    83e1:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, 0);
    83e5:	6a 00                	push   $0x0
    83e7:	68 f5 01             	push   $0x1f5
    83ea:	00 00                	add    %al,(%bx,%si)
    83ec:	e8 7f ff             	call   836e <inw+0x1d>
    83ef:	ff                   	(bad)  
    83f0:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(0x1F2, (uint8_t)(sector_count));
    83f4:	8b 45 0c             	mov    0xc(%di),%ax
    83f7:	0f b6 c0             	movzbw %al,%ax
    83fa:	50                   	push   %ax
    83fb:	68 f2 01             	push   $0x1f2
    83fe:	00 00                	add    %al,(%bx,%si)
    8400:	e8 6b ff             	call   836e <inw+0x1d>
    8403:	ff                   	(bad)  
    8404:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3, (uint8_t)(sector));   // 0-7
    8408:	8b 45 08             	mov    0x8(%di),%ax
    840b:	0f b6 c0             	movzbw %al,%ax
    840e:	50                   	push   %ax
    840f:	68 f3 01             	push   $0x1f3
    8412:	00 00                	add    %al,(%bx,%si)
    8414:	e8 57 ff             	call   836e <inw+0x1d>
    8417:	ff                   	(bad)  
    8418:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, (uint8_t)(sector >> 8));    // 8-15
    841c:	8b 45 08             	mov    0x8(%di),%ax
    841f:	c1 e8 08             	shr    $0x8,%ax
    8422:	0f b6 c0             	movzbw %al,%ax
    8425:	50                   	push   %ax
    8426:	68 f4 01             	push   $0x1f4
    8429:	00 00                	add    %al,(%bx,%si)
    842b:	e8 40 ff             	call   836e <inw+0x1d>
    842e:	ff                   	(bad)  
    842f:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, (uint8_t)(sector >> 16));   // 16-23
    8433:	8b 45 08             	mov    0x8(%di),%ax
    8436:	c1 e8 10             	shr    $0x10,%ax
    8439:	0f b6 c0             	movzbw %al,%ax
    843c:	50                   	push   %ax
    843d:	68 f5 01             	push   $0x1f5
    8440:	00 00                	add    %al,(%bx,%si)
    8442:	e8 29 ff             	call   836e <inw+0x1d>
    8445:	ff                   	(bad)  
    8446:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(0x1F7, (uint8_t)0x24);
    844a:	6a 24                	push   $0x24
    844c:	68 f7 01             	push   $0x1f7
    844f:	00 00                	add    %al,(%bx,%si)
    8451:	e8 1a ff             	call   836e <inw+0x1d>
    8454:	ff                   	(bad)  
    8455:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    
    // 应检查是否出现错误，发生错误没有解决方式，这里不进行检查
    // 依次查看各个扇区的状态，是否 忙和就绪
    uint16_t *data_buf = (uint16_t *)buffer;
    8459:	8b 45 10             	mov    0x10(%di),%ax
    845c:	89 45 f8             	mov    %ax,-0x8(%di)
    while(sector_count-- > 0){
    845f:	eb 4f                	jmp    84b0 <read_disk+0x121>
        while((inb(0x1F7) & 0x88) != 0x8){}             // 没有就绪原地等待
    8461:	90                   	nop
    8462:	68 f7 01             	push   $0x1f7
    8465:	00 00                	add    %al,(%bx,%si)
    8467:	e8 c8 fe             	call   8332 <loader_entry+0x21>
    846a:	ff                   	(bad)  
    846b:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    846f:	0f b6 c0             	movzbw %al,%ax
    8472:	25 88 00             	and    $0x88,%ax
    8475:	00 00                	add    %al,(%bx,%si)
    8477:	83 f8 08             	cmp    $0x8,%ax
    847a:	75 e6                	jne    8462 <read_disk+0xd3>
        //就绪后开始读取扇区
        for(uint16_t i = 0; i < SECTOR_SIZE / 2; i++){       // 一个扇区512字节，每次读取16位两个字节，循环256次
    847c:	66 c7 45 f6 00 00 eb 	movl   $0x24eb0000,-0xa(%di)
    8483:	24 
            *data_buf++ = inw(0x1F0);                   // 将内核代码写入内存
    8484:	8b 5d f8             	mov    -0x8(%di),%bx
    8487:	8d 43 02             	lea    0x2(%bp,%di),%ax
    848a:	89 45 f8             	mov    %ax,-0x8(%di)
    848d:	68 f0 01             	push   $0x1f0
    8490:	00 00                	add    %al,(%bx,%si)
    8492:	e8 ba fe             	call   834f <inb+0x1b>
    8495:	ff                   	(bad)  
    8496:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    849a:	66 89 03             	mov    %eax,(%bp,%di)
        for(uint16_t i = 0; i < SECTOR_SIZE / 2; i++){       // 一个扇区512字节，每次读取16位两个字节，循环256次
    849d:	0f b7 45 f6          	movzww -0xa(%di),%ax
    84a1:	83 c0 01             	add    $0x1,%ax
    84a4:	66 89 45 f6          	mov    %eax,-0xa(%di)
    84a8:	66 81 7d f6 ff 00 76 	cmpl   $0xd47600ff,-0xa(%di)
    84af:	d4 
    while(sector_count-- > 0){
    84b0:	8b 45 0c             	mov    0xc(%di),%ax
    84b3:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    84b6:	89 55 0c             	mov    %dx,0xc(%di)
    84b9:	85 c0                	test   %ax,%ax
    84bb:	75 a4                	jne    8461 <read_disk+0xd2>
        }
    }

}
    84bd:	90                   	nop
    84be:	8b 5d fc             	mov    -0x4(%di),%bx
    84c1:	c9                   	leave  
    84c2:	c3                   	ret    

000084c3 <load_kernel>:

void load_kernel(void){     // 此时进入32位保护模式运行环境，可访问4BG内存空间
    84c3:	55                   	push   %bp
    84c4:	89 e5                	mov    %sp,%bp
    84c6:	83 ec 08             	sub    $0x8,%sp
    read_disk(100, 500, (uint8_t *)SYS_KERNEL_LOAD_ADDR);    // 从第100个扇区开始后的500个扇区,250KB      指定从1M内存处开始加载内核
    84c9:	68 00 00             	push   $0x0
    84cc:	10 00                	adc    %al,(%bx,%si)
    84ce:	68 f4 01             	push   $0x1f4
    84d1:	00 00                	add    %al,(%bx,%si)
    84d3:	6a 64                	push   $0x64
    84d5:	e8 b5 fe             	call   838d <outb+0x1d>
    84d8:	ff                   	(bad)  
    84d9:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)
    // 跳转到kernel_init，将boot_info作为一个参数进行函数调用，进行函数调用时会将参数压入栈中，SYS_KERNEL_LOAD_ADDR地址处实际执行的是汇编的start
	((void(*)(boot_info_t *))SYS_KERNEL_LOAD_ADDR)(&boot_info);
    84dd:	83 ec 0c             	sub    $0xc,%sp
    84e0:	68 60 95             	push   $0x9560
    84e3:	00 00                	add    %al,(%bx,%si)
    84e5:	b8 00 00             	mov    $0x0,%ax
    84e8:	10 00                	adc    %al,(%bx,%si)
    84ea:	ff d0                	call   *%ax
    84ec:	83 c4 10             	add    $0x10,%sp
    for(;;){}
    84ef:	eb fe                	jmp    84ef <load_kernel+0x2c>
