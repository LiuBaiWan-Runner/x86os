
E:/OS/x86os/start/test/build/source/kernel/kernel.elf:     file format elf32-i386
E:/OS/x86os/start/test/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00009e90 memsz 0x00009e90 flags r-x
    LOAD off    0x0000b000 vaddr 0x0001a000 paddr 0x0001a000 align 2**12
         filesz 0x00000178 memsz 0x000460c0 flags rw-
    LOAD off    0x0000c000 vaddr 0x80000000 paddr 0x000600c0 align 2**12
         filesz 0x00000387 memsz 0x00000387 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008afd  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00001390  00018b00  00018b00  00009b00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000178  0001a000  0001a000  0000b000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000450c0  0001b000  0001b000  0000b178  2**12
                  ALLOC
  4 .first_task   00000387  80000000  000600c0  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00004882  00000000  00000000  0000c387  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012ccf  00000000  00000000  00010c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032a1  00000000  00000000  000238d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000340  00000000  00000000  00026b80  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  00026ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002be2  00000000  00000000  00026f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  00029b7a  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00002ba8  00000000  00000000  00029b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00018b00 l    d  .rodata	00000000 .rodata
0001a000 l    d  .data	00000000 .data
0001b000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010323 l     F .text	00000017 up2
0001033a l     F .text	0000000d down2
00010347 l     F .text	0000000c write_cr3
00010353 l     F .text	00000014 pde_index
00010367 l     F .text	00000027 pde_paddr
0001038e l     F .text	00000010 pte_index
0001039e l     F .text	00000027 pte_paddr
000103c5 l     F .text	0000000f get_pte_perm
000103d4 l     F .text	00000011 mmu_set_page_dir
0001b000 l     O .bss	00000028 paddr_alloc
0001c000 l     O .bss	00001000 kernel_page_dir
000103e5 l     F .text	00000013 current_page_dir
000103f8 l     F .text	00000058 addr_alloc_init
00010450 l     F .text	00000067 addr_alloc_page
000104b7 l     F .text	00000062 addr_free_page
00010519 l     F .text	00000066 show_mem_info
0001057f l     F .text	0000003c total_mem_size
00018c60 l     O .rodata	00000012 __func__.2383
0001a000 l     O .data	00000050 kernel_map.2395
00018c74 l     O .rodata	00000013 __func__.2423
00018c88 l     O .rodata	00000011 __func__.2501
00018c9c l     O .rodata	0000000c __func__.2508
00018ca8 l     O .rodata	00000009 __func__.2516
00000000 l    df *ABS*	00000000 syscall.c
00018cc0 l     O .rodata	00000194 sys_table
00000000 l    df *ABS*	00000000 task.c
00010fc5 l     F .text	0000000c write_cr3
00010fd1 l     F .text	00000007 hlt
00010fd8 l     F .text	0000000c write_tr
00010fe4 l     F .text	0000001b list_node_init
00010fff l     F .text	0000000b list_node_next
0001100a l     F .text	0000000b list_count
00011015 l     F .text	0000000a list_first
0001101f l     F .text	00000011 mmu_set_page_dir
0001d000 l     O .bss	000005c0 task_manager
0001d5c0 l     O .bss	00001000 idle_task_stack
0001e5c0 l     O .bss	00016400 task_table
000349c0 l     O .bss	00000014 task_table_mutex
00011030 l     F .text	000001cd tss_init
00019004 l     O .rodata	0000000a __func__.3104
00019010 l     O .rodata	00000010 __func__.3130
00011520 l     F .text	0000000a idle_task_entry
0001166a l     F .text	00000045 task_next_run
0001194c l     F .text	00000069 alloc_task
000119b5 l     F .text	00000030 free_task
00011a49 l     F .text	00000062 copy_opened_files
00011c47 l     F .text	00000129 load_phdr
00019020 l     O .rodata	0000000a __func__.3242
00011d70 l     F .text	00000213 load_elf_file
00011f83 l     F .text	00000130 copy_args
0001902c l     O .rodata	0000000a __func__.3277
00000000 l    df *ABS*	00000000 cpu.c
000124ee l     F .text	00000028 lgdt
00012516 l     F .text	0000001a far_jump
000349e0 l     O .bss	00000800 gdt_table
000351e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
00012768 l     F .text	0000001d inb
00012785 l     F .text	0000001f outb
000127a4 l     F .text	00000007 cli
000127ab l     F .text	00000007 sti
000127b2 l     F .text	00000011 read_cr2
000127c3 l     F .text	00000028 lidt
000127eb l     F .text	00000007 hlt
000127f2 l     F .text	00000010 read_eflags
00012802 l     F .text	0000000b write_eflags
00035200 l     O .bss	00000400 idt_table
0001280d l     F .text	000000ff dump_core_regs
0001290c l     F .text	00000071 do_default_handler
00012d44 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 console.c
0001313b l     F .text	0000001d inb
00013158 l     F .text	0000001f outb
00035600 l     O .bss	00000340 console_buf
00013177 l     F .text	00000074 read_cursor_pos
000131eb l     F .text	000000c1 update_cursor_pos
0001342b l     F .text	00000091 erase_rows
000134bc l     F .text	00000088 scroll_up
00013544 l     F .text	00000010 move_to_col0
00013554 l     F .text	00000038 move_next_line
0001358c l     F .text	00000076 move_forward
00013602 l     F .text	00000094 show_char
00013696 l     F .text	00000078 move_backword
0001370e l     F .text	00000085 clear_display
00013793 l     F .text	00000073 move_next_tab
00013929 l     F .text	0000003a erase_backword
00013963 l     F .text	000000b8 write_normal
00013a1b l     F .text	00000029 clear_esc_param
00013a44 l     F .text	00000075 write_esc
00013ab9 l     F .text	00000099 set_font_style
000195e0 l     O .rodata	00000020 color_table.2399
00013b52 l     F .text	00000037 move_left
00013b89 l     F .text	00000049 move_right
00013bd2 l     F .text	00000033 move_cursor
00013c05 l     F .text	00000051 erase_in_display
00013c56 l     F .text	000000f7 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
0001a050 l     O .data	00000008 dev_desc_tbl
00035940 l     O .bss	00000a00 dev_tbl
00013e4a l     F .text	0000003e is_devid_bad
00000000 l    df *ABS*	00000000 disk.c
0001413b l     F .text	0000001d inb
00014158 l     F .text	0000001f inw
00014177 l     F .text	0000001f outb
00014196 l     F .text	00000021 outw
00036340 l     O .bss	00000250 disk_buf
00036590 l     O .bss	00000014 mutex
000365a4 l     O .bss	00000010 op_sem
000365b4 l     O .bss	00000004 task_on_op
000141b7 l     F .text	00000130 ata_send_cmd
000142e7 l     F .text	00000050 ata_read_data
00014337 l     F .text	00000050 ata_write_data
00014387 l     F .text	0000004b ata_wait_data
000143d2 l     F .text	000000fe print_disk_info
000144d0 l     F .text	00000119 detect_part_info
000145e9 l     F .text	00000127 identify_disk
00000000 l    df *ABS*	00000000 kbd.c
00014bc5 l     F .text	0000001d inb
00014be2 l     F .text	0000001f outb
000365b8 l     O .bss	00000004 kbd_state
000197c0 l     O .rodata	00000200 map_table
00014c01 l     F .text	00000015 get_key
00014c16 l     F .text	0000001a is_make_code
00014cda l     F .text	00000045 update_led_status
00014d1f l     F .text	0000003c do_fx_key
00014d5b l     F .text	000001d0 do_normal_key
00014f2b l     F .text	0000008a do_e0_key
000365bc l     O .bss	00000004 recv_state.2129
000365c0 l     O .bss	00000004 inited.2139
00000000 l    df *ABS*	00000000 time.c
000150b7 l     F .text	0000001f outb
000365c4 l     O .bss	00000004 sys_tick
000150fe l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 tty.c
000365e0 l     O .bss	000022a0 tty_devs
00038880 l     O .bss	00000004 curr_tty
000152b6 l     F .text	0000004f get_tty
00000000 l    df *ABS*	00000000 devfs.c
0001a0e0 l     O .data	0000000c devfs_type_list
00000000 l    df *ABS*	00000000 fatfs.c
0001593d l     F .text	00000017 up2
00015954 l     F .text	00000059 bread_sector
000159ad l     F .text	0000003e bwrite_secotr
00015d88 l     F .text	00000087 to_sfn
00015fab l     F .text	00000080 read_dir_entry
0001602b l     F .text	000000aa write_dir_entry
000160d5 l     F .text	00000179 expand_file
0001624e l     F .text	000000c2 move_file_pos
0001658b l     F .text	00000065 read_from_diritem
00000000 l    df *ABS*	00000000 file.c
000388a0 l     O .bss	00024000 file_table
0005c8a0 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
00016fe6 l     F .text	0000000b list_node_next
00016ff1 l     F .text	0000000a list_first
0005c8c0 l     O .bss	0000000c mounted_list
0005c8cc l     O .bss	0000000c free_list
0005c8e0 l     O .bss	000017c0 fs_tbl
0005e0a0 l     O .bss	00000004 root_fs
00016ffb l     F .text	0000001d is_fd_bad
00017018 l     F .text	00000026 get_fs_op
0001703e l     F .text	000001c7 mount
00017205 l     F .text	00000060 mount_list_init
00019d50 l     O .rodata	00000008 __func__.3078
000173f8 l     F .text	0000002b fs_protect
00017423 l     F .text	0000002b fs_unprotect
00019d58 l     O .rodata	0000000a __func__.3169
00000000 l    df *ABS*	00000000 init.c
0005e0a4 l     O .bss	00000004 init_boot_info
00019e04 l     O .rodata	00000013 __func__.3085
00000000 l    df *ABS*	00000000 mutex.c
00017d30 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00017ebf l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00018251 l     F .text	00000007 hlt
0001a174 l     O .data	00000004 num2ch.1951
00000000 l    df *ABS*	00000000 list.c
00018809 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0005e0a8 l     O .bss	00000014 mutex
0005e0bc l     O .bss	00000004 log_dev_id
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
800000cd l     F .first_task	0000004c sys_call
00015f67 g     F .text	00000044 diritem_get_type
00018145 g     F .text	0000003e bitmap_get_bit
00018437 g     F .text	0000004f kernel_memcpy
00017910 g     F .text	000000fc sys_close
0001170d g     F .text	0000000a task_current
00017350 g     F .text	00000050 path_begin_with
800001d1 g     F .first_task	0000001b yield
00013107 g     F .text	0000000b irq_enable_global
000188a0 g     F .text	00000064 list_insert_last
00011717 g     F .text	00000032 task_file
000102a5 g       .text	00000000 exception_handler_kbd
00010e0a g     F .text	0000010c sys_sbrk
000117c3 g     F .text	00000061 sys_yield
000119e5 g     F .text	00000064 sys_msleep
00012ab1 g     F .text	0000001c do_handler_segment_not_present
0001160b g     F .text	00000034 task_set_ready
00015c5b g     F .text	0000012d cluster_alloc_free
00018183 g     F .text	0000001b bitmap_is_set
00018486 g     F .text	00000041 kernel_memset
00014020 g     F .text	0000004c dev_write
0001787b g     F .text	00000095 sys_lseek
00015077 g     F .text	00000040 kbd_init
00015ad2 g     F .text	0000012f cluster_set_next
00010267 g       .text	00000000 exception_handler_virtual_exception
00014b87 g     F .text	00000006 disk_close
00010f30 g     F .text	00000095 do_handler_syscall
00018258 g     F .text	0000002d strings_count
0001274a g     F .text	0000001e cpu_init
00018a01 g     F .text	0000002f log_init
00016cc7 g     F .text	000000f4 fatfs_readdir
00011aab g     F .text	0000019c sys_fork
00017cd3 g     F .text	0000005d init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00014b7d g     F .text	0000000a disk_control
000125fd g     F .text	00000039 gdt_free_sel
00010f16 g     F .text	0000001a sys_print_msg
0001a140 g     O .data	00000034 fatfs_op
000182cb g     F .text	00000047 kernel_strcpy
0001a000 g       .data	00000000 s_data
800001a4 g     F .first_task	0000002d execve
80000147 g     F .first_task	0000001b getpid
00012fea g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
00015ed4 g     F .text	00000093 diritem_get_name
00015e0f g     F .text	00000037 diritem_name_match
000100a4 g       .text	00000000 exception_handler_breakpoint
00012a09 g     F .text	0000001c do_handler_overflow
00012cd4 g     F .text	0000001c do_handler_alignment_check
0001066b g     F .text	0000008c memory_create_map
000176f2 g     F .text	000000c5 sys_read
000173a0 g     F .text	00000058 path_next_child
00014c91 g     F .text	00000035 kbd_wait_recv_ready
00016923 g     F .text	0000021e fatfs_write
0001337c g     F .text	000000af console_select
000101b3 g       .text	00000000 exception_handler_general_protection
00012ae9 g     F .text	000000d8 do_handler_general_protection
00013824 g     F .text	0000001e restore_cursor
00017fdf g     F .text	00000029 sem_count
80000010 g     F .first_task	000000bd first_task_main
00012999 g     F .text	0000001c do_handler_divider
00018071 g     F .text	000000d4 bitmap_set_bit
00012a79 g     F .text	0000001c do_handler_double_fault
00016dbb g     F .text	0000000a fatfs_closedir
00012bc1 g     F .text	000000f7 do_handler_page_fault
00016310 g     F .text	0000023f fatfs_mount
80000324 g     F .first_task	00000021 isatty
0001677e g     F .text	000001a5 fatfs_read
0001013f g       .text	00000000 exception_handler_double_fault
00012dd7 g     F .text	0000002b pic_send_eoi
00011516 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107b2 g     F .text	00000085 memory_create_uvm
00017eed g     F .text	0000006e sem_wait
00010c4d g     F .text	00000025 memory_alloc_page_for
000150d6 g     F .text	00000028 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00017a57 g     F .text	00000093 sys_fstat
00013fd4 g     F .text	0000004c dev_read
00016bcb g     F .text	000000df fatfs_seek
00016b41 g     F .text	0000008a fatfs_close
00012d28 g     F .text	0000001c do_handler_virtual_exception
00015913 g     F .text	0000000a devfs_stat
000100c3 g       .text	00000000 exception_handler_overflow
000102e3 g       .text	00000000 simple_switch
000102c4 g       .text	00000000 exception_handler_ide_primary
0001654f g     F .text	0000003c fatfs_unmount
800002d0 g     F .first_task	0000002d lseek
0005e0c0 g     O .bss	00002000 stack
00014710 g     F .text	000000f8 disk_init
00017265 g     F .text	00000090 fs_init
00016f7e g     F .text	00000038 file_inc_ref
00010c8c g     F .text	00000099 memory_free_page
000600c0 g       *ABS*	00000000 s_first_task
0001179c g     F .text	00000027 task_remove_fd
0001560c g     F .text	000000ba tty_control
00013842 g     F .text	000000e7 console_init
000154eb g     F .text	00000121 tty_read
00011376 g     F .text	0000008f task_uninit
00010b64 g     F .text	000000e9 memory_alloc_for_page_dir
0001591d g     F .text	00000020 devfs_ioctl
000151ad g     F .text	0000007f tty_fifo_get
000100e2 g       .text	00000000 exception_handler_bound_range
000156cc g     F .text	0000006d tty_in
00015a14 g     F .text	000000be cluster_get_next
00017f5b g     F .text	00000084 sem_notify
00010ae1 g     F .text	00000083 memory_copy_uvm_data
0001406c g     F .text	0000004c dev_control
00014fb5 g     F .text	000000c2 do_handler_kbd
00012a41 g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
00017b3d g     F .text	00000053 sys_readdir
00012cb8 g     F .text	0000001c do_handler_fpu_error
00011427 g     F .text	000000ef task_first_init
00012cf0 g     F .text	0000001c do_handler_machine_check
80000282 g     F .first_task	0000002d write
0001744e g     F .text	00000182 sys_open
000129b5 g     F .text	0000001c do_handler_Debug
800002fd g     F .first_task	00000027 fstat
00017a0c g     F .text	0000004b sys_isatty
00018841 g     F .text	0000005f list_insert_first
00013e88 g     F .text	0000014c dev_open
000172f5 g     F .text	0000005b path_to_num
000116eb g     F .text	00000022 task_set_wakeup
000129d1 g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
00015176 g     F .text	00000037 tty_fifo_init
0001a060 g     O .data	00000038 dev_disk_desc
00018312 g     F .text	00000070 kernel_strncpy
000130fc g     F .text	0000000b irq_disable_global
000177b7 g     F .text	000000c4 sys_write
800001ec g     F .first_task	00000021 wait
00060447 g       *ABS*	00000000 mem_free_start
00014c65 g     F .text	0000002c kbd_write
00017c30 g     F .text	0000003d kernel_init
00017eca g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00018688 g     F .text	0000014b kernel_vsprintf
00018285 g     F .text	00000046 get_file_name
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
000140b8 g     F .text	00000083 dev_close
00013806 g     F .text	0000001e save_cursor
000600c0 g       .bss	00000000 e_data
80000255 g     F .first_task	0000002d read
00017d69 g     F .text	00000097 mutex_lock
00017b90 g     F .text	00000050 sys_closedir
00016dc5 g     F .text	000000ec fatfs_unlink
00011749 g     F .text	00000053 task_alloc_fd
00015909 g     F .text	0000000a devfs_seek
00010229 g       .text	00000000 exception_handler_machine_check
000153fe g     F .text	000000ed tty_write
00012a95 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
0001522c g     F .text	0000008a tty_fifo_put
00060447 g       *ABS*	00000000 e_first_task
000116af g     F .text	0000003c task_set_sleep
000175d0 g     F .text	0000009e sys_dup
000187d3 g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
00012fb0 g     F .text	0000003a irq_install
000126af g     F .text	00000088 init_gdt
00015762 g     F .text	00000017 devfs_mount
00015305 g     F .text	000000f9 tty_open
80000189 g     F .first_task	0000001b fork
00013112 g     F .text	00000018 irq_enter_protection
00017d3b g     F .text	0000002e mutex_init
00013075 g     F .text	00000087 irq_disable
80000345 g     F .first_task	00000021 sbrk
0001a100 g     O .data	00000034 devfs_op
0001577f g     F .text	00000127 devfs_open
00010248 g       .text	00000000 exception_handler_smd_exception
0001766e g     F .text	00000084 sys_ioctl
00010837 g     F .text	0000010f memory_destroy_uvm
00018008 g     F .text	00000016 bitmap_byte_count
00012a5d g     F .text	0000001c do_handler_device_unavailable
00017be0 g     F .text	00000050 sys_unlink
000159eb g     F .text	00000029 cluster_is_valid
00016cb4 g     F .text	00000013 fatfs_opendir
00011824 g     F .text	0000003c task_dispatch
00010946 g     F .text	00000155 memory_copy_uvm
000156c6 g     F .text	00000006 tty_close
000158ca g     F .text	00000024 devfs_write
00017c6d g     F .text	00000066 move_to_first_task
00012737 g     F .text	00000013 switch_to_tss
000158ee g     F .text	0000001b devfs_close
00013d4d g     F .text	000000f7 console_write
00014c30 g     F .text	00000035 kbd_wait_send_ready
80000366 g     F .first_task	00000021 dup
000184c7 g     F .text	0000005e kernel_memcmp
000106f7 g     F .text	000000bb create_kernel_table
0001881c g     F .text	00000025 list_init
00012d0c g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
0001163f g     F .text	0000002b task_set_block
0001297d g     F .text	0000001c do_handler_unknown
00010c72 g     F .text	0000001a memory_alloc_page
000101ed g       .text	00000000 exception_handler_fpu_error
00011405 g     F .text	00000022 task_switch_from_to
00012e02 g     F .text	000001ae irq_init
00017e00 g     F .text	000000bf mutex_unlock
00016fb6 g     F .text	00000030 file_table_init
0001312a g     F .text	00000011 irq_leave_protection
00016f3c g     F .text	00000042 file_free
00014cc6 g     F .text	00000014 kbd_read
00015e46 g     F .text	0000008e diritem_init
80000162 g     F .first_task	00000027 print_msg
00018382 g     F .text	0000003b kernel_strlen
00012530 g     F .text	00000086 segment_desc_set
00012a25 g     F .text	0000001c do_handler_bound_range
000102f8 g       .text	00000000 exception_handler_syscall
00014808 g     F .text	000000f5 disk_open
000165f0 g     F .text	0000018e fatfs_open
00018904 g     F .text	00000078 list_remove_first
00019e90 g       .rodata	00000000 e_text
000183bd g     F .text	0000007a kernel_strncmp
00017aea g     F .text	00000053 sys_opendir
0001801e g     F .text	00000053 bitmap_init
00010179 g       .text	00000000 exception_handler_segment_not_present
000132ac g     F .text	000000d0 console_set_cursor
00010085 g       .text	00000000 exception_handler_NMI
00016caa g     F .text	0000000a fatfs_stat
0001819e g     F .text	000000b3 bitmap_alloc_nbits
00016eb1 g     F .text	0000008b file_alloc
0001152a g     F .text	000000e1 task_manager_init
00011349 g     F .text	0000002d task_start
00010066 g       .text	00000000 exception_handler_Debug
00011860 g     F .text	000000ec task_time_tick
00010d25 g     F .text	000000e5 memory_init
000120b3 g     F .text	000001bd sys_execve
00014a3d g     F .text	00000140 disk_write
00012286 g     F .text	00000115 sys_wait
0001239b g     F .text	00000153 sys_exit
00015739 g     F .text	00000029 tty_select
00013e44 g     F .text	00000006 console_close
00010a9b g     F .text	00000046 memory_get_paddr
00012acd g     F .text	0000001c do_handler_stack_segment_fault
000129ed g     F .text	0000001c do_handler_breakpoint
00015779 g     F .text	00000006 devfs_unmount
8000020d g     F .first_task	00000021 _exit
000158a6 g     F .text	00000024 devfs_read
00018a30 g     F .text	000000cd log_printf
000111fd g     F .text	0000014c task_init
000148fd g     F .text	00000140 disk_read
8000022e g     F .first_task	00000027 open
00015c01 g     F .text	0000005a cluster_free_chain
00018664 g     F .text	00000024 kernel_sprintf
00012270 g     F .text	00000016 sys_getpid
00012636 g     F .text	00000079 gdt_alloc_desc
00018525 g     F .text	0000013f kernel_itoa
0001897c g     F .text	00000085 list_remove
000125b6 g     F .text	00000047 gate_desc_set
80000119 g     F .first_task	0000002e msleep
800002af g     F .first_task	00000021 close
00014b8d g     F .text	00000038 do_handler_ide_primary
000105bb g     F .text	000000b0 find_pte
0001515e g     F .text	00000018 time_init
0001a0a0 g     O .data	00000038 dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 27 7c 00 00       	call   17c30 <kernel_init>

	// 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc c0 00 06 00       	mov    $0x600c0,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10023:	e9 ab 7c 00 00       	jmp    17cd3 <init_main>

00010028 <exception_handler_unknown>:
		// 跳过压入的异常号和错误码
		add $(2*4), %esp
		iret
.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 44 29 00 00       	call   1297d <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 41 29 00 00       	call   12999 <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 3e 29 00 00       	call   129b5 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 3b 29 00 00       	call   129d1 <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 38 29 00 00       	call   129ed <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 35 29 00 00       	call   12a09 <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 32 29 00 00       	call   12a25 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 2f 29 00 00       	call   12a41 <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 2c 29 00 00       	call   12a5d <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 2b 29 00 00       	call   12a79 <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 2a 29 00 00       	call   12a95 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 29 29 00 00       	call   12ab1 <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 28 29 00 00       	call   12acd <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 27 29 00 00       	call   12ae9 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 e2 29 00 00       	call   12bc1 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 ba 2a 00 00       	call   12cb8 <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 b9 2a 00 00       	call   12cd4 <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 b6 2a 00 00       	call   12cf0 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 b3 2a 00 00       	call   12d0c <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 b0 2a 00 00       	call   12d28 <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 3f 4e 00 00       	call   150d6 <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <exception_handler_kbd>:
exception_handler kbd, 0x21, 0
   102a5:	6a 00                	push   $0x0
   102a7:	6a 21                	push   $0x21
   102a9:	60                   	pusha  
   102aa:	1e                   	push   %ds
   102ab:	06                   	push   %es
   102ac:	0f a0                	push   %fs
   102ae:	0f a8                	push   %gs
   102b0:	54                   	push   %esp
   102b1:	e8 ff 4c 00 00       	call   14fb5 <do_handler_kbd>
   102b6:	83 c4 04             	add    $0x4,%esp
   102b9:	0f a9                	pop    %gs
   102bb:	0f a1                	pop    %fs
   102bd:	07                   	pop    %es
   102be:	1f                   	pop    %ds
   102bf:	61                   	popa   
   102c0:	83 c4 08             	add    $0x8,%esp
   102c3:	cf                   	iret   

000102c4 <exception_handler_ide_primary>:
exception_handler ide_primary, 0x2E, 0
   102c4:	6a 00                	push   $0x0
   102c6:	6a 2e                	push   $0x2e
   102c8:	60                   	pusha  
   102c9:	1e                   	push   %ds
   102ca:	06                   	push   %es
   102cb:	0f a0                	push   %fs
   102cd:	0f a8                	push   %gs
   102cf:	54                   	push   %esp
   102d0:	e8 b8 48 00 00       	call   14b8d <do_handler_ide_primary>
   102d5:	83 c4 04             	add    $0x4,%esp
   102d8:	0f a9                	pop    %gs
   102da:	0f a1                	pop    %fs
   102dc:	07                   	pop    %es
   102dd:	1f                   	pop    %ds
   102de:	61                   	popa   
   102df:	83 c4 08             	add    $0x8,%esp
   102e2:	cf                   	iret   

000102e3 <simple_switch>:
// esp不用保存，只需要让esp保存在调用之前的状态
// eflags ?
	.text
	.global simple_switch
simple_switch:
	movl 4(%esp), %eax   // 取from->stack
   102e3:	8b 44 24 04          	mov    0x4(%esp),%eax
	movl 8(%esp), %edx   // 取to->stack
   102e7:	8b 54 24 08          	mov    0x8(%esp),%edx

	// 保存前一任务的状态
	push %ebp
   102eb:	55                   	push   %ebp
	push %ebx
   102ec:	53                   	push   %ebx
	push %esi
   102ed:	56                   	push   %esi
	push %edi
   102ee:	57                   	push   %edi

	// 切换栈
	mov %esp, (%eax)    // from->stack = esp
   102ef:	89 20                	mov    %esp,(%eax)
  	mov %edx, %esp      // esp = to->stack
   102f1:	89 d4                	mov    %edx,%esp

	// 加载下一任务的栈
	pop %edi
   102f3:	5f                   	pop    %edi
	pop %esi
   102f4:	5e                   	pop    %esi
	pop %ebx
   102f5:	5b                   	pop    %ebx
	pop %ebp
   102f6:	5d                   	pop    %ebp
  	ret
   102f7:	c3                   	ret    

000102f8 <exception_handler_syscall>:

     .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
	// 保存前一任务的状态
	pusha
   102f8:	60                   	pusha  
	push %ds
   102f9:	1e                   	push   %ds
	push %es
   102fa:	06                   	push   %es
	push %fs
   102fb:	0f a0                	push   %fs
	push %gs
   102fd:	0f a8                	push   %gs
	pushf
   102ff:	9c                   	pushf  

	// 使用内核段寄存器，避免使用应用层的
	mov $(KERNEL_SELECTOR_DS), %eax
   10300:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
   10305:	8e d8                	mov    %eax,%ds
	mov %eax, %es
   10307:	8e c0                	mov    %eax,%es
	mov %eax, %fs
   10309:	8e e0                	mov    %eax,%fs
	mov %eax, %gs
   1030b:	8e e8                	mov    %eax,%gs

    // 调用处理函数
    mov %esp, %eax
   1030d:	89 e0                	mov    %esp,%eax
    push %eax
   1030f:	50                   	push   %eax
	call do_handler_syscall
   10310:	e8 1b 0c 00 00       	call   10f30 <do_handler_syscall>
	add $4, %esp
   10315:	83 c4 04             	add    $0x4,%esp

    // 再切换回来
	popf
   10318:	9d                   	popf   
	pop %gs
   10319:	0f a9                	pop    %gs
	pop %fs
   1031b:	0f a1                	pop    %fs
	pop %es
   1031d:	07                   	pop    %es
	pop %ds
   1031e:	1f                   	pop    %ds
	popa
   1031f:	61                   	popa   
	
	// 5个参数，加上5*4，不加会导致返回时ss取不出来，最后返回出现问题
   10320:	ca 14 00             	lret   $0x14

00010323 <up2>:

#include <stdarg.h>
#include "comm/types.h"

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   10323:	55                   	push   %ebp
   10324:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10326:	8b 55 08             	mov    0x8(%ebp),%edx
   10329:	8b 45 0c             	mov    0xc(%ebp),%eax
   1032c:	01 d0                	add    %edx,%eax
   1032e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10331:	8b 45 0c             	mov    0xc(%ebp),%eax
   10334:	f7 d8                	neg    %eax
   10336:	21 d0                	and    %edx,%eax
}
   10338:	5d                   	pop    %ebp
   10339:	c3                   	ret    

0001033a <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   1033a:	55                   	push   %ebp
   1033b:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   1033d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10340:	f7 d8                	neg    %eax
   10342:	23 45 08             	and    0x8(%ebp),%eax
}
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   1034a:	8b 45 08             	mov    0x8(%ebp),%eax
   1034d:	0f 22 d8             	mov    %eax,%cr3
}
   10350:	90                   	nop
   10351:	5d                   	pop    %ebp
   10352:	c3                   	ret    

00010353 <pde_index>:
#pragma pack()

/**
 * @brief 返回vaddr在页目录中的索引
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   10353:	55                   	push   %ebp
   10354:	89 e5                	mov    %esp,%ebp
   10356:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	c1 e8 16             	shr    $0x16,%eax
   1035f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10362:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10365:	c9                   	leave  
   10366:	c3                   	ret    

00010367 <pde_paddr>:

/**
 * @brief 获取pde中地址
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10367:	55                   	push   %ebp
   10368:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   1036a:	8b 45 08             	mov    0x8(%ebp),%eax
   1036d:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10371:	c0 ea 04             	shr    $0x4,%dl
   10374:	0f b6 d2             	movzbl %dl,%edx
   10377:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   1037b:	c1 e1 04             	shl    $0x4,%ecx
   1037e:	09 ca                	or     %ecx,%edx
   10380:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10384:	c1 e0 0c             	shl    $0xc,%eax
   10387:	09 d0                	or     %edx,%eax
   10389:	c1 e0 0c             	shl    $0xc,%eax
}
   1038c:	5d                   	pop    %ebp
   1038d:	c3                   	ret    

0001038e <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 */
static inline int pte_index (uint32_t vaddr) {
   1038e:	55                   	push   %ebp
   1038f:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   10391:	8b 45 08             	mov    0x8(%ebp),%eax
   10394:	c1 e8 0c             	shr    $0xc,%eax
   10397:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1039c:	5d                   	pop    %ebp
   1039d:	c3                   	ret    

0001039e <pte_paddr>:

/**
 * @brief 获取pte中的物理地址
 */
static inline uint32_t pte_paddr (pte_t * pte) {
   1039e:	55                   	push   %ebp
   1039f:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   103a8:	c0 ea 04             	shr    $0x4,%dl
   103ab:	0f b6 d2             	movzbl %dl,%edx
   103ae:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   103b2:	c1 e1 04             	shl    $0x4,%ecx
   103b5:	09 ca                	or     %ecx,%edx
   103b7:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   103bb:	c1 e0 0c             	shl    $0xc,%eax
   103be:	09 d0                	or     %edx,%eax
   103c0:	c1 e0 0c             	shl    $0xc,%eax
}
   103c3:	5d                   	pop    %ebp
   103c4:	c3                   	ret    

000103c5 <get_pte_perm>:

/**
 * @brief 获取pte中的权限位
 */
static inline uint32_t get_pte_perm (pte_t * pte) {
   103c5:	55                   	push   %ebp
   103c6:	89 e5                	mov    %esp,%ebp
    return (pte->v & 0x3FF);
   103c8:	8b 45 08             	mov    0x8(%ebp),%eax
   103cb:	8b 00                	mov    (%eax),%eax
   103cd:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   103d2:	5d                   	pop    %ebp
   103d3:	c3                   	ret    

000103d4 <mmu_set_page_dir>:

/**
 * @brief 重新加载整个页表
 * @param vaddr 页表的虚拟地址
 */
static inline void mmu_set_page_dir (uint32_t paddr) {
   103d4:	55                   	push   %ebp
   103d5:	89 e5                	mov    %esp,%ebp
    // 将虚拟地址转换为物理地址
    write_cr3(paddr);
   103d7:	ff 75 08             	pushl  0x8(%ebp)
   103da:	e8 68 ff ff ff       	call   10347 <write_cr3>
   103df:	83 c4 04             	add    $0x4,%esp
}
   103e2:	90                   	nop
   103e3:	c9                   	leave  
   103e4:	c3                   	ret    

000103e5 <current_page_dir>:
static pde_t kernel_page_dir[PDE_CNT] __attribute__((aligned(MEM_PAGE_SIZE))); // 内核页目录表

/**
 * @brief 获取当前页表地址
 */
static pde_t * current_page_dir (void) {
   103e5:	55                   	push   %ebp
   103e6:	89 e5                	mov    %esp,%ebp
   103e8:	83 ec 08             	sub    $0x8,%esp
    return (pde_t *)task_current()->tss.cr3;
   103eb:	e8 1d 13 00 00       	call   1170d <task_current>
   103f0:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
}
   103f6:	c9                   	leave  
   103f7:	c3                   	ret    

000103f8 <addr_alloc_init>:
/**
 * @brief 初始化地址分配结构
 * 以下不检查start和size的页边界，由上层调用者检查
 */
static void addr_alloc_init (addr_alloc_t * alloc, uint8_t * bits,
                    uint32_t start, uint32_t size, uint32_t page_size) {
   103f8:	55                   	push   %ebp
   103f9:	89 e5                	mov    %esp,%ebp
   103fb:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   103fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10401:	83 ec 0c             	sub    $0xc,%esp
   10404:	50                   	push   %eax
   10405:	e8 31 79 00 00       	call   17d3b <mutex_init>
   1040a:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   1040d:	8b 45 08             	mov    0x8(%ebp),%eax
   10410:	8b 55 10             	mov    0x10(%ebp),%edx
   10413:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->size = size;
   10416:	8b 45 08             	mov    0x8(%ebp),%eax
   10419:	8b 55 14             	mov    0x14(%ebp),%edx
   1041c:	89 50 24             	mov    %edx,0x24(%eax)
    alloc->page_size = page_size;
   1041f:	8b 45 08             	mov    0x8(%ebp),%eax
   10422:	8b 55 18             	mov    0x18(%ebp),%edx
   10425:	89 50 1c             	mov    %edx,0x1c(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10428:	8b 45 08             	mov    0x8(%ebp),%eax
   1042b:	8b 40 24             	mov    0x24(%eax),%eax
   1042e:	ba 00 00 00 00       	mov    $0x0,%edx
   10433:	f7 75 18             	divl   0x18(%ebp)
   10436:	89 c2                	mov    %eax,%edx
   10438:	8b 45 08             	mov    0x8(%ebp),%eax
   1043b:	83 c0 14             	add    $0x14,%eax
   1043e:	6a 00                	push   $0x0
   10440:	52                   	push   %edx
   10441:	ff 75 0c             	pushl  0xc(%ebp)
   10444:	50                   	push   %eax
   10445:	e8 d4 7b 00 00       	call   1801e <bitmap_init>
   1044a:	83 c4 10             	add    $0x10,%esp
}
   1044d:	90                   	nop
   1044e:	c9                   	leave  
   1044f:	c3                   	ret    

00010450 <addr_alloc_page>:

/**
 * @brief 分配多页内存
 */
static uint32_t addr_alloc_page (addr_alloc_t * alloc, int page_count) {
   10450:	55                   	push   %ebp
   10451:	89 e5                	mov    %esp,%ebp
   10453:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10456:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   1045d:	8b 45 08             	mov    0x8(%ebp),%eax
   10460:	83 ec 0c             	sub    $0xc,%esp
   10463:	50                   	push   %eax
   10464:	e8 00 79 00 00       	call   17d69 <mutex_lock>
   10469:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   1046c:	8b 45 08             	mov    0x8(%ebp),%eax
   1046f:	83 c0 14             	add    $0x14,%eax
   10472:	83 ec 04             	sub    $0x4,%esp
   10475:	ff 75 0c             	pushl  0xc(%ebp)
   10478:	6a 00                	push   $0x0
   1047a:	50                   	push   %eax
   1047b:	e8 1e 7d 00 00       	call   1819e <bitmap_alloc_nbits>
   10480:	83 c4 10             	add    $0x10,%esp
   10483:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   10486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1048a:	78 17                	js     104a3 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   1048c:	8b 45 08             	mov    0x8(%ebp),%eax
   1048f:	8b 50 20             	mov    0x20(%eax),%edx
   10492:	8b 45 08             	mov    0x8(%ebp),%eax
   10495:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10498:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1049b:	0f af c1             	imul   %ecx,%eax
   1049e:	01 d0                	add    %edx,%eax
   104a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   104a3:	8b 45 08             	mov    0x8(%ebp),%eax
   104a6:	83 ec 0c             	sub    $0xc,%esp
   104a9:	50                   	push   %eax
   104aa:	e8 51 79 00 00       	call   17e00 <mutex_unlock>
   104af:	83 c4 10             	add    $0x10,%esp
    return addr;
   104b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   104b5:	c9                   	leave  
   104b6:	c3                   	ret    

000104b7 <addr_free_page>:

/**
 * @brief 释放多页内存
 */
static void addr_free_page (addr_alloc_t * alloc, uint32_t addr, int page_count) {
   104b7:	55                   	push   %ebp
   104b8:	89 e5                	mov    %esp,%ebp
   104ba:	53                   	push   %ebx
   104bb:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   104be:	8b 45 08             	mov    0x8(%ebp),%eax
   104c1:	83 ec 0c             	sub    $0xc,%esp
   104c4:	50                   	push   %eax
   104c5:	e8 9f 78 00 00       	call   17d69 <mutex_lock>
   104ca:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_idx = (addr - alloc->start) / alloc->page_size;
   104cd:	8b 45 08             	mov    0x8(%ebp),%eax
   104d0:	8b 40 20             	mov    0x20(%eax),%eax
   104d3:	8b 55 0c             	mov    0xc(%ebp),%edx
   104d6:	89 d1                	mov    %edx,%ecx
   104d8:	29 c1                	sub    %eax,%ecx
   104da:	8b 45 08             	mov    0x8(%ebp),%eax
   104dd:	8b 58 1c             	mov    0x1c(%eax),%ebx
   104e0:	89 c8                	mov    %ecx,%eax
   104e2:	ba 00 00 00 00       	mov    $0x0,%edx
   104e7:	f7 f3                	div    %ebx
   104e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_idx, page_count, 0);
   104ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104ef:	8b 55 08             	mov    0x8(%ebp),%edx
   104f2:	83 c2 14             	add    $0x14,%edx
   104f5:	6a 00                	push   $0x0
   104f7:	ff 75 10             	pushl  0x10(%ebp)
   104fa:	50                   	push   %eax
   104fb:	52                   	push   %edx
   104fc:	e8 70 7b 00 00       	call   18071 <bitmap_set_bit>
   10501:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   10504:	8b 45 08             	mov    0x8(%ebp),%eax
   10507:	83 ec 0c             	sub    $0xc,%esp
   1050a:	50                   	push   %eax
   1050b:	e8 f0 78 00 00       	call   17e00 <mutex_unlock>
   10510:	83 c4 10             	add    $0x10,%esp
}
   10513:	90                   	nop
   10514:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10517:	c9                   	leave  
   10518:	c3                   	ret    

00010519 <show_mem_info>:

static void show_mem_info (boot_info_t * boot_info) {
   10519:	55                   	push   %ebp
   1051a:	89 e5                	mov    %esp,%ebp
   1051c:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1051f:	83 ec 0c             	sub    $0xc,%esp
   10522:	68 00 8b 01 00       	push   $0x18b00
   10527:	e8 04 85 00 00       	call   18a30 <log_printf>
   1052c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1052f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10536:	eb 29                	jmp    10561 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i,
   10538:	8b 45 08             	mov    0x8(%ebp),%eax
   1053b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1053e:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10542:	8b 45 08             	mov    0x8(%ebp),%eax
   10545:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10548:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   1054b:	52                   	push   %edx
   1054c:	50                   	push   %eax
   1054d:	ff 75 f4             	pushl  -0xc(%ebp)
   10550:	68 0c 8b 01 00       	push   $0x18b0c
   10555:	e8 d6 84 00 00       	call   18a30 <log_printf>
   1055a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1055d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10561:	8b 45 08             	mov    0x8(%ebp),%eax
   10564:	8b 40 50             	mov    0x50(%eax),%eax
   10567:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1056a:	7c cc                	jl     10538 <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   1056c:	83 ec 0c             	sub    $0xc,%esp
   1056f:	68 1e 8b 01 00       	push   $0x18b1e
   10574:	e8 b7 84 00 00       	call   18a30 <log_printf>
   10579:	83 c4 10             	add    $0x10,%esp
}
   1057c:	90                   	nop
   1057d:	c9                   	leave  
   1057e:	c3                   	ret    

0001057f <total_mem_size>:

/**
 * @brief 获取可用的物理内存大小
 */
static uint32_t total_mem_size(boot_info_t * boot_info) {
   1057f:	55                   	push   %ebp
   10580:	89 e5                	mov    %esp,%ebp
   10582:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10585:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1058c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10593:	eb 16                	jmp    105ab <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   10595:	8b 45 08             	mov    0x8(%ebp),%eax
   10598:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1059b:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1059f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105a2:	01 d0                	add    %edx,%eax
   105a4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   105a7:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   105ab:	8b 45 08             	mov    0x8(%ebp),%eax
   105ae:	8b 40 50             	mov    0x50(%eax),%eax
   105b1:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   105b4:	7c df                	jl     10595 <total_mem_size+0x16>
    }
    return mem_size;
   105b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   105b9:	c9                   	leave  
   105ba:	c3                   	ret    

000105bb <find_pte>:

pte_t * find_pte (pde_t * page_dir, uint32_t vaddr, int alloc) {
   105bb:	55                   	push   %ebp
   105bc:	89 e5                	mov    %esp,%ebp
   105be:	83 ec 18             	sub    $0x18,%esp
    pte_t * page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   105c1:	ff 75 0c             	pushl  0xc(%ebp)
   105c4:	e8 8a fd ff ff       	call   10353 <pde_index>
   105c9:	83 c4 04             	add    $0x4,%esp
   105cc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105d3:	8b 45 08             	mov    0x8(%ebp),%eax
   105d6:	01 d0                	add    %edx,%eax
   105d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present) {
   105db:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105de:	0f b6 00             	movzbl (%eax),%eax
   105e1:	83 e0 01             	and    $0x1,%eax
   105e4:	84 c0                	test   %al,%al
   105e6:	74 10                	je     105f8 <find_pte+0x3d>
        page_table = (pte_t *)pde_paddr(pde);
   105e8:	ff 75 f0             	pushl  -0x10(%ebp)
   105eb:	e8 77 fd ff ff       	call   10367 <pde_paddr>
   105f0:	83 c4 04             	add    $0x4,%esp
   105f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
   105f6:	eb 57                	jmp    1064f <find_pte+0x94>
    } else {
        // 如果不存在，则考虑分配一个
        if (alloc == 0) {
   105f8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   105fc:	75 07                	jne    10605 <find_pte+0x4a>
            return (pte_t *)0;
   105fe:	b8 00 00 00 00       	mov    $0x0,%eax
   10603:	eb 64                	jmp    10669 <find_pte+0xae>
        }

        // 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10605:	83 ec 08             	sub    $0x8,%esp
   10608:	6a 01                	push   $0x1
   1060a:	68 00 b0 01 00       	push   $0x1b000
   1060f:	e8 3c fe ff ff       	call   10450 <addr_alloc_page>
   10614:	83 c4 10             	add    $0x10,%esp
   10617:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1061a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1061e:	75 07                	jne    10627 <find_pte+0x6c>
            return (pte_t *)0;
   10620:	b8 00 00 00 00       	mov    $0x0,%eax
   10625:	eb 42                	jmp    10669 <find_pte+0xae>
        }

        // 设置为用户可读写，将被pte中设置所覆盖
        pde->v = pg_paddr | PTE_P | PTE_W | PDE_U;
   10627:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1062a:	83 c8 07             	or     $0x7,%eax
   1062d:	89 c2                	mov    %eax,%edx
   1062f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10632:	89 10                	mov    %edx,(%eax)
        // 为物理页表绑定虚拟地址的映射，这样下面就可以计算出虚拟地址了
        //kernel_pg_last[pde_index(vaddr)].v = pg_paddr | PTE_P | PTE_W;

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t *)(pg_paddr);
   10634:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10637:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   1063a:	83 ec 04             	sub    $0x4,%esp
   1063d:	68 00 10 00 00       	push   $0x1000
   10642:	6a 00                	push   $0x0
   10644:	ff 75 f4             	pushl  -0xc(%ebp)
   10647:	e8 3a 7e 00 00       	call   18486 <kernel_memset>
   1064c:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   1064f:	83 ec 0c             	sub    $0xc,%esp
   10652:	ff 75 0c             	pushl  0xc(%ebp)
   10655:	e8 34 fd ff ff       	call   1038e <pte_index>
   1065a:	83 c4 10             	add    $0x10,%esp
   1065d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10664:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10667:	01 d0                	add    %edx,%eax
}
   10669:	c9                   	leave  
   1066a:	c3                   	ret    

0001066b <memory_create_map>:

/**
 * @brief 将指定的地址空间进行一页的映射
 */
int memory_create_map (pde_t * page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   1066b:	55                   	push   %ebp
   1066c:	89 e5                	mov    %esp,%ebp
   1066e:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   10671:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10678:	eb 6e                	jmp    106e8 <memory_create_map+0x7d>
        // log_printf("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t * pte = find_pte(page_dir, vaddr, 1);
   1067a:	83 ec 04             	sub    $0x4,%esp
   1067d:	6a 01                	push   $0x1
   1067f:	ff 75 0c             	pushl  0xc(%ebp)
   10682:	ff 75 08             	pushl  0x8(%ebp)
   10685:	e8 31 ff ff ff       	call   105bb <find_pte>
   1068a:	83 c4 10             	add    $0x10,%esp
   1068d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0) {
   10690:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10694:	75 07                	jne    1069d <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   10696:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1069b:	eb 58                	jmp    106f5 <memory_create_map+0x8a>
        }

        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: 0x%x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   1069d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a0:	0f b6 00             	movzbl (%eax),%eax
   106a3:	83 e0 01             	and    $0x1,%eax
   106a6:	84 c0                	test   %al,%al
   106a8:	74 1c                	je     106c6 <memory_create_map+0x5b>
   106aa:	68 20 8b 01 00       	push   $0x18b20
   106af:	68 60 8c 01 00       	push   $0x18c60
   106b4:	68 87 00 00 00       	push   $0x87
   106b9:	68 34 8b 01 00       	push   $0x18b34
   106be:	e8 10 81 00 00       	call   187d3 <panic>
   106c3:	83 c4 10             	add    $0x10,%esp

        pte->v = paddr | perm | PTE_P;
   106c6:	8b 45 10             	mov    0x10(%ebp),%eax
   106c9:	0b 45 18             	or     0x18(%ebp),%eax
   106cc:	83 c8 01             	or     $0x1,%eax
   106cf:	89 c2                	mov    %eax,%edx
   106d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106d4:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   106d6:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106dd:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   106e4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106eb:	3b 45 14             	cmp    0x14(%ebp),%eax
   106ee:	7c 8a                	jl     1067a <memory_create_map+0xf>
    }

    return 0;
   106f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106f5:	c9                   	leave  
   106f6:	c3                   	ret    

000106f7 <create_kernel_table>:

/**
 * @brief 根据内存映射表，构造内核页表
 */
void create_kernel_table (void) {
   106f7:	55                   	push   %ebp
   106f8:	89 e5                	mov    %esp,%ebp
   106fa:	83 ec 28             	sub    $0x28,%esp
        // 扩展存储空间一一映射，方便直接操作
        {(void *)MEM_EXT_START, (void *)MEM_EXT_END,     (void *)MEM_EXT_START, PTE_W},
    };

    // 清空页目录表
    kernel_memset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   106fd:	83 ec 04             	sub    $0x4,%esp
   10700:	68 00 10 00 00       	push   $0x1000
   10705:	6a 00                	push   $0x0
   10707:	68 00 c0 01 00       	push   $0x1c000
   1070c:	e8 75 7d 00 00       	call   18486 <kernel_memset>
   10711:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10714:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1071b:	e9 83 00 00 00       	jmp    107a3 <create_kernel_table+0xac>
        memory_map_t * map = kernel_map + i;
   10720:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10723:	c1 e0 04             	shl    $0x4,%eax
   10726:	05 00 a0 01 00       	add    $0x1a000,%eax
   1072b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1072e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10731:	8b 00                	mov    (%eax),%eax
   10733:	83 ec 08             	sub    $0x8,%esp
   10736:	68 00 10 00 00       	push   $0x1000
   1073b:	50                   	push   %eax
   1073c:	e8 f9 fb ff ff       	call   1033a <down2>
   10741:	83 c4 10             	add    $0x10,%esp
   10744:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10747:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1074a:	8b 40 04             	mov    0x4(%eax),%eax
   1074d:	83 ec 08             	sub    $0x8,%esp
   10750:	68 00 10 00 00       	push   $0x1000
   10755:	50                   	push   %eax
   10756:	e8 c8 fb ff ff       	call   10323 <up2>
   1075b:	83 c4 10             	add    $0x10,%esp
   1075e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   10761:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10764:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10767:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   1076d:	85 c0                	test   %eax,%eax
   1076f:	0f 48 c2             	cmovs  %edx,%eax
   10772:	c1 f8 0c             	sar    $0xc,%eax
   10775:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   10778:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1077b:	8b 50 0c             	mov    0xc(%eax),%edx
   1077e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10781:	8b 40 08             	mov    0x8(%eax),%eax
   10784:	89 c1                	mov    %eax,%ecx
   10786:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10789:	83 ec 0c             	sub    $0xc,%esp
   1078c:	52                   	push   %edx
   1078d:	ff 75 e4             	pushl  -0x1c(%ebp)
   10790:	51                   	push   %ecx
   10791:	50                   	push   %eax
   10792:	68 00 c0 01 00       	push   $0x1c000
   10797:	e8 cf fe ff ff       	call   1066b <memory_create_map>
   1079c:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   1079f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107a6:	83 f8 04             	cmp    $0x4,%eax
   107a9:	0f 86 71 ff ff ff    	jbe    10720 <create_kernel_table+0x29>
    }
}
   107af:	90                   	nop
   107b0:	c9                   	leave  
   107b1:	c3                   	ret    

000107b2 <memory_create_uvm>:

/**
 * @brief 创建进程的初始页表
 * 主要的工作创建页目录表，然后从内核页表中复制一部分
 */
uint32_t memory_create_uvm (void) {
   107b2:	55                   	push   %ebp
   107b3:	89 e5                	mov    %esp,%ebp
   107b5:	83 ec 18             	sub    $0x18,%esp
    pde_t * page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   107b8:	83 ec 08             	sub    $0x8,%esp
   107bb:	6a 01                	push   $0x1
   107bd:	68 00 b0 01 00       	push   $0x1b000
   107c2:	e8 89 fc ff ff       	call   10450 <addr_alloc_page>
   107c7:	83 c4 10             	add    $0x10,%esp
   107ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   107cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   107d1:	75 07                	jne    107da <memory_create_uvm+0x28>
        return 0;
   107d3:	b8 00 00 00 00       	mov    $0x0,%eax
   107d8:	eb 5b                	jmp    10835 <memory_create_uvm+0x83>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   107da:	83 ec 04             	sub    $0x4,%esp
   107dd:	68 00 10 00 00       	push   $0x1000
   107e2:	6a 00                	push   $0x0
   107e4:	ff 75 f0             	pushl  -0x10(%ebp)
   107e7:	e8 9a 7c 00 00       	call   18486 <kernel_memset>
   107ec:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   107ef:	83 ec 0c             	sub    $0xc,%esp
   107f2:	68 00 00 00 80       	push   $0x80000000
   107f7:	e8 57 fb ff ff       	call   10353 <pde_index>
   107fc:	83 c4 10             	add    $0x10,%esp
   107ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   10802:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10809:	eb 1f                	jmp    1082a <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   1080b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1080e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10815:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10818:	01 c2                	add    %eax,%edx
   1081a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1081d:	8b 04 85 00 c0 01 00 	mov    0x1c000(,%eax,4),%eax
   10824:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   10826:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1082a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1082d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10830:	77 d9                	ja     1080b <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   10832:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10835:	c9                   	leave  
   10836:	c3                   	ret    

00010837 <memory_destroy_uvm>:

/**
 * @brief 销毁用户空间内存
 */
void memory_destroy_uvm (uint32_t page_dir) {
   10837:	55                   	push   %ebp
   10838:	89 e5                	mov    %esp,%ebp
   1083a:	83 ec 28             	sub    $0x28,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1083d:	68 00 00 00 80       	push   $0x80000000
   10842:	e8 0c fb ff ff       	call   10353 <pde_index>
   10847:	83 c4 04             	add    $0x4,%esp
   1084a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pde_t * pde = (pde_t *)page_dir + user_pde_start;
   1084d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10850:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10857:	8b 45 08             	mov    0x8(%ebp),%eax
   1085a:	01 d0                	add    %edx,%eax
   1085c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(page_dir != 0);
   1085f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10863:	75 1c                	jne    10881 <memory_destroy_uvm+0x4a>
   10865:	68 67 8b 01 00       	push   $0x18b67
   1086a:	68 74 8c 01 00       	push   $0x18c74
   1086f:	68 d2 00 00 00       	push   $0xd2
   10874:	68 34 8b 01 00       	push   $0x18b34
   10879:	e8 55 7f 00 00       	call   187d3 <panic>
   1087e:	83 c4 10             	add    $0x10,%esp

    // 释放页表中对应的各项，不包含映射的内核页面
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10881:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10884:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10887:	e9 95 00 00 00       	jmp    10921 <memory_destroy_uvm+0xea>
        if (!pde->present) {
   1088c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1088f:	0f b6 00             	movzbl (%eax),%eax
   10892:	83 e0 01             	and    $0x1,%eax
   10895:	84 c0                	test   %al,%al
   10897:	74 7f                	je     10918 <memory_destroy_uvm+0xe1>
            continue;
        }

        // 释放页表对应的物理页 + 页表
        pte_t * pte = (pte_t *)pde_paddr(pde);
   10899:	83 ec 0c             	sub    $0xc,%esp
   1089c:	ff 75 f4             	pushl  -0xc(%ebp)
   1089f:	e8 c3 fa ff ff       	call   10367 <pde_paddr>
   108a4:	83 c4 10             	add    $0x10,%esp
   108a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   108aa:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   108b1:	eb 39                	jmp    108ec <memory_destroy_uvm+0xb5>
            if (!pte->present) {
   108b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   108b6:	0f b6 00             	movzbl (%eax),%eax
   108b9:	83 e0 01             	and    $0x1,%eax
   108bc:	84 c0                	test   %al,%al
   108be:	74 23                	je     108e3 <memory_destroy_uvm+0xac>
                continue;
            }

            addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   108c0:	83 ec 0c             	sub    $0xc,%esp
   108c3:	ff 75 ec             	pushl  -0x14(%ebp)
   108c6:	e8 d3 fa ff ff       	call   1039e <pte_paddr>
   108cb:	83 c4 10             	add    $0x10,%esp
   108ce:	83 ec 04             	sub    $0x4,%esp
   108d1:	6a 01                	push   $0x1
   108d3:	50                   	push   %eax
   108d4:	68 00 b0 01 00       	push   $0x1b000
   108d9:	e8 d9 fb ff ff       	call   104b7 <addr_free_page>
   108de:	83 c4 10             	add    $0x10,%esp
   108e1:	eb 01                	jmp    108e4 <memory_destroy_uvm+0xad>
                continue;
   108e3:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   108e4:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   108e8:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   108ec:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   108f3:	7e be                	jle    108b3 <memory_destroy_uvm+0x7c>
        }

        addr_free_page(&paddr_alloc, (uint32_t)pde_paddr(pde), 1);
   108f5:	83 ec 0c             	sub    $0xc,%esp
   108f8:	ff 75 f4             	pushl  -0xc(%ebp)
   108fb:	e8 67 fa ff ff       	call   10367 <pde_paddr>
   10900:	83 c4 10             	add    $0x10,%esp
   10903:	83 ec 04             	sub    $0x4,%esp
   10906:	6a 01                	push   $0x1
   10908:	50                   	push   %eax
   10909:	68 00 b0 01 00       	push   $0x1b000
   1090e:	e8 a4 fb ff ff       	call   104b7 <addr_free_page>
   10913:	83 c4 10             	add    $0x10,%esp
   10916:	eb 01                	jmp    10919 <memory_destroy_uvm+0xe2>
            continue;
   10918:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10919:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1091d:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10921:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10928:	0f 8e 5e ff ff ff    	jle    1088c <memory_destroy_uvm+0x55>
    }

    // 页目录表
    addr_free_page(&paddr_alloc, page_dir, 1);
   1092e:	83 ec 04             	sub    $0x4,%esp
   10931:	6a 01                	push   $0x1
   10933:	ff 75 08             	pushl  0x8(%ebp)
   10936:	68 00 b0 01 00       	push   $0x1b000
   1093b:	e8 77 fb ff ff       	call   104b7 <addr_free_page>
   10940:	83 c4 10             	add    $0x10,%esp
}
   10943:	90                   	nop
   10944:	c9                   	leave  
   10945:	c3                   	ret    

00010946 <memory_copy_uvm>:

/**
 * @brief 复制页表及其所有的内存空间
 */
uint32_t memory_copy_uvm (uint32_t page_dir) {
   10946:	55                   	push   %ebp
   10947:	89 e5                	mov    %esp,%ebp
   10949:	83 ec 38             	sub    $0x38,%esp
    // 复制基础页表
    uint32_t to_page_dir = memory_create_uvm();
   1094c:	e8 61 fe ff ff       	call   107b2 <memory_create_uvm>
   10951:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (to_page_dir == 0) {
   10954:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10958:	0f 84 1b 01 00 00    	je     10a79 <memory_copy_uvm+0x133>
        goto copy_uvm_failed;
    }

    // 再复制用户空间的各项
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1095e:	83 ec 0c             	sub    $0xc,%esp
   10961:	68 00 00 00 80       	push   $0x80000000
   10966:	e8 e8 f9 ff ff       	call   10353 <pde_index>
   1096b:	83 c4 10             	add    $0x10,%esp
   1096e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    pde_t * pde = (pde_t *)page_dir + user_pde_start;
   10971:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10974:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1097b:	8b 45 08             	mov    0x8(%ebp),%eax
   1097e:	01 d0                	add    %edx,%eax
   10980:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 遍历用户空间页目录项
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10983:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10986:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10989:	e9 d9 00 00 00       	jmp    10a67 <memory_copy_uvm+0x121>
        if (!pde->present) {
   1098e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10991:	0f b6 00             	movzbl (%eax),%eax
   10994:	83 e0 01             	and    $0x1,%eax
   10997:	84 c0                	test   %al,%al
   10999:	0f 84 bf 00 00 00    	je     10a5e <memory_copy_uvm+0x118>
            continue;
        }

        // 遍历页表
        pte_t * pte = (pte_t *)pde_paddr(pde);
   1099f:	83 ec 0c             	sub    $0xc,%esp
   109a2:	ff 75 f4             	pushl  -0xc(%ebp)
   109a5:	e8 bd f9 ff ff       	call   10367 <pde_paddr>
   109aa:	83 c4 10             	add    $0x10,%esp
   109ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   109b0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   109b7:	e9 93 00 00 00       	jmp    10a4f <memory_copy_uvm+0x109>
            if (!pte->present) {
   109bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   109bf:	0f b6 00             	movzbl (%eax),%eax
   109c2:	83 e0 01             	and    $0x1,%eax
   109c5:	84 c0                	test   %al,%al
   109c7:	74 7d                	je     10a46 <memory_copy_uvm+0x100>
                continue;
            }

            // 分配物理内存
            uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   109c9:	83 ec 08             	sub    $0x8,%esp
   109cc:	6a 01                	push   $0x1
   109ce:	68 00 b0 01 00       	push   $0x1b000
   109d3:	e8 78 fa ff ff       	call   10450 <addr_alloc_page>
   109d8:	83 c4 10             	add    $0x10,%esp
   109db:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (page == 0) {
   109de:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   109e2:	0f 84 94 00 00 00    	je     10a7c <memory_copy_uvm+0x136>
                goto copy_uvm_failed;
            }

            // 建立映射关系
            uint32_t vaddr = (i << 22) | (j << 12);
   109e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109eb:	c1 e0 16             	shl    $0x16,%eax
   109ee:	89 c2                	mov    %eax,%edx
   109f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   109f3:	c1 e0 0c             	shl    $0xc,%eax
   109f6:	09 d0                	or     %edx,%eax
   109f8:	89 45 d8             	mov    %eax,-0x28(%ebp)
            int err = memory_create_map((pde_t *)to_page_dir, vaddr, page, 1, get_pte_perm(pte));
   109fb:	83 ec 0c             	sub    $0xc,%esp
   109fe:	ff 75 ec             	pushl  -0x14(%ebp)
   10a01:	e8 bf f9 ff ff       	call   103c5 <get_pte_perm>
   10a06:	83 c4 10             	add    $0x10,%esp
   10a09:	89 c2                	mov    %eax,%edx
   10a0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a0e:	83 ec 0c             	sub    $0xc,%esp
   10a11:	52                   	push   %edx
   10a12:	6a 01                	push   $0x1
   10a14:	ff 75 dc             	pushl  -0x24(%ebp)
   10a17:	ff 75 d8             	pushl  -0x28(%ebp)
   10a1a:	50                   	push   %eax
   10a1b:	e8 4b fc ff ff       	call   1066b <memory_create_map>
   10a20:	83 c4 20             	add    $0x20,%esp
   10a23:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0) {
   10a26:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a2a:	78 53                	js     10a7f <memory_copy_uvm+0x139>
                goto copy_uvm_failed;
            }

            // 复制内容。
            kernel_memcpy((void *)page, (void *)vaddr, MEM_PAGE_SIZE);
   10a2c:	8b 55 d8             	mov    -0x28(%ebp),%edx
   10a2f:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10a32:	83 ec 04             	sub    $0x4,%esp
   10a35:	68 00 10 00 00       	push   $0x1000
   10a3a:	52                   	push   %edx
   10a3b:	50                   	push   %eax
   10a3c:	e8 f6 79 00 00       	call   18437 <kernel_memcpy>
   10a41:	83 c4 10             	add    $0x10,%esp
   10a44:	eb 01                	jmp    10a47 <memory_copy_uvm+0x101>
                continue;
   10a46:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10a47:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10a4b:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10a4f:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10a56:	0f 8e 60 ff ff ff    	jle    109bc <memory_copy_uvm+0x76>
   10a5c:	eb 01                	jmp    10a5f <memory_copy_uvm+0x119>
            continue;
   10a5e:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10a5f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a63:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10a67:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10a6e:	0f 8e 1a ff ff ff    	jle    1098e <memory_copy_uvm+0x48>
        }
    }
    return to_page_dir;
   10a74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a77:	eb 20                	jmp    10a99 <memory_copy_uvm+0x153>
        goto copy_uvm_failed;
   10a79:	90                   	nop
   10a7a:	eb 04                	jmp    10a80 <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a7c:	90                   	nop
   10a7d:	eb 01                	jmp    10a80 <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a7f:	90                   	nop

copy_uvm_failed:
    if (to_page_dir) {
   10a80:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a84:	74 0e                	je     10a94 <memory_copy_uvm+0x14e>
        memory_destroy_uvm(to_page_dir);
   10a86:	83 ec 0c             	sub    $0xc,%esp
   10a89:	ff 75 e4             	pushl  -0x1c(%ebp)
   10a8c:	e8 a6 fd ff ff       	call   10837 <memory_destroy_uvm>
   10a91:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10a94:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10a99:	c9                   	leave  
   10a9a:	c3                   	ret    

00010a9b <memory_get_paddr>:

/**
 * @brief 获取指定虚拟地址的物理地址
 * 如果转换失败，返回0。
 */
uint32_t memory_get_paddr (uint32_t page_dir, uint32_t vaddr) {
   10a9b:	55                   	push   %ebp
   10a9c:	89 e5                	mov    %esp,%ebp
   10a9e:	83 ec 18             	sub    $0x18,%esp
    pte_t * pte = find_pte((pde_t *)page_dir, vaddr, 0);
   10aa1:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa4:	83 ec 04             	sub    $0x4,%esp
   10aa7:	6a 00                	push   $0x0
   10aa9:	ff 75 0c             	pushl  0xc(%ebp)
   10aac:	50                   	push   %eax
   10aad:	e8 09 fb ff ff       	call   105bb <find_pte>
   10ab2:	83 c4 10             	add    $0x10,%esp
   10ab5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pte == (pte_t *)0) {
   10ab8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10abc:	75 07                	jne    10ac5 <memory_get_paddr+0x2a>
        return 0;
   10abe:	b8 00 00 00 00       	mov    $0x0,%eax
   10ac3:	eb 1a                	jmp    10adf <memory_get_paddr+0x44>
    }

    return pte_paddr(pte) + (vaddr & (MEM_PAGE_SIZE - 1));
   10ac5:	83 ec 0c             	sub    $0xc,%esp
   10ac8:	ff 75 f4             	pushl  -0xc(%ebp)
   10acb:	e8 ce f8 ff ff       	call   1039e <pte_paddr>
   10ad0:	83 c4 10             	add    $0x10,%esp
   10ad3:	89 c2                	mov    %eax,%edx
   10ad5:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ad8:	25 ff 0f 00 00       	and    $0xfff,%eax
   10add:	01 d0                	add    %edx,%eax
}
   10adf:	c9                   	leave  
   10ae0:	c3                   	ret    

00010ae1 <memory_copy_uvm_data>:

/**
 * @brief 在不同的进程空间中拷贝字符串
 * page_dir为目标页表，当前仍为老页表
 */
int memory_copy_uvm_data(uint32_t to, uint32_t page_dir, uint32_t from, uint32_t size) {
   10ae1:	55                   	push   %ebp
   10ae2:	89 e5                	mov    %esp,%ebp
   10ae4:	83 ec 18             	sub    $0x18,%esp
    char *buf, *pa0;

    while(size > 0){
   10ae7:	eb 6e                	jmp    10b57 <memory_copy_uvm_data+0x76>
        // 获取目标的物理地址, 也即其另一个虚拟地址
        uint32_t to_paddr = memory_get_paddr(page_dir, to);
   10ae9:	83 ec 08             	sub    $0x8,%esp
   10aec:	ff 75 08             	pushl  0x8(%ebp)
   10aef:	ff 75 0c             	pushl  0xc(%ebp)
   10af2:	e8 a4 ff ff ff       	call   10a9b <memory_get_paddr>
   10af7:	83 c4 10             	add    $0x10,%esp
   10afa:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (to_paddr == 0) {
   10afd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10b01:	75 07                	jne    10b0a <memory_copy_uvm_data+0x29>
            return -1;
   10b03:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10b08:	eb 58                	jmp    10b62 <memory_copy_uvm_data+0x81>
        }

        // 计算当前可拷贝的大小
        uint32_t offset_in_page = to_paddr & (MEM_PAGE_SIZE - 1);
   10b0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b0d:	25 ff 0f 00 00       	and    $0xfff,%eax
   10b12:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t curr_size = MEM_PAGE_SIZE - offset_in_page;
   10b15:	b8 00 10 00 00       	mov    $0x1000,%eax
   10b1a:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10b1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (curr_size > size) {
   10b20:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b23:	3b 45 14             	cmp    0x14(%ebp),%eax
   10b26:	76 06                	jbe    10b2e <memory_copy_uvm_data+0x4d>
            curr_size = size;       // 如果比较大，超过页边界，则只拷贝此页内的
   10b28:	8b 45 14             	mov    0x14(%ebp),%eax
   10b2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        kernel_memcpy((void *)to_paddr, (void *)from, curr_size);
   10b2e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10b31:	8b 55 10             	mov    0x10(%ebp),%edx
   10b34:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b37:	83 ec 04             	sub    $0x4,%esp
   10b3a:	51                   	push   %ecx
   10b3b:	52                   	push   %edx
   10b3c:	50                   	push   %eax
   10b3d:	e8 f5 78 00 00       	call   18437 <kernel_memcpy>
   10b42:	83 c4 10             	add    $0x10,%esp

        size -= curr_size;
   10b45:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b48:	29 45 14             	sub    %eax,0x14(%ebp)
        to += curr_size;
   10b4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b4e:	01 45 08             	add    %eax,0x8(%ebp)
        from += curr_size;
   10b51:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b54:	01 45 10             	add    %eax,0x10(%ebp)
    while(size > 0){
   10b57:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10b5b:	75 8c                	jne    10ae9 <memory_copy_uvm_data+0x8>
  }

  return 0;
   10b5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b62:	c9                   	leave  
   10b63:	c3                   	ret    

00010b64 <memory_alloc_for_page_dir>:

uint32_t memory_alloc_for_page_dir (uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm) {
   10b64:	55                   	push   %ebp
   10b65:	89 e5                	mov    %esp,%ebp
   10b67:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   10b6a:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10b70:	68 00 10 00 00       	push   $0x1000
   10b75:	ff 75 10             	pushl  0x10(%ebp)
   10b78:	e8 a6 f7 ff ff       	call   10323 <up2>
   10b7d:	83 c4 08             	add    $0x8,%esp
   10b80:	c1 e8 0c             	shr    $0xc,%eax
   10b83:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   10b86:	68 00 10 00 00       	push   $0x1000
   10b8b:	ff 75 0c             	pushl  0xc(%ebp)
   10b8e:	e8 a7 f7 ff ff       	call   1033a <down2>
   10b93:	83 c4 08             	add    $0x8,%esp
   10b96:	89 45 0c             	mov    %eax,0xc(%ebp)

    // 逐页分配内存，然后建立映射关系
    for (int i = 0; i < page_count; i++) {
   10b99:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10ba0:	e9 95 00 00 00       	jmp    10c3a <memory_alloc_for_page_dir+0xd6>
        // 分配需要的内存
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10ba5:	83 ec 08             	sub    $0x8,%esp
   10ba8:	6a 01                	push   $0x1
   10baa:	68 00 b0 01 00       	push   $0x1b000
   10baf:	e8 9c f8 ff ff       	call   10450 <addr_alloc_page>
   10bb4:	83 c4 10             	add    $0x10,%esp
   10bb7:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   10bba:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10bbe:	75 17                	jne    10bd7 <memory_alloc_for_page_dir+0x73>
            log_printf("mem alloc failed. no memory");
   10bc0:	83 ec 0c             	sub    $0xc,%esp
   10bc3:	68 75 8b 01 00       	push   $0x18b75
   10bc8:	e8 63 7e 00 00       	call   18a30 <log_printf>
   10bcd:	83 c4 10             	add    $0x10,%esp
            return 0;
   10bd0:	b8 00 00 00 00       	mov    $0x0,%eax
   10bd5:	eb 74                	jmp    10c4b <memory_alloc_for_page_dir+0xe7>
        }

        // 建立分配的内存与指定地址的关联
        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   10bd7:	8b 55 14             	mov    0x14(%ebp),%edx
   10bda:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdd:	83 ec 0c             	sub    $0xc,%esp
   10be0:	52                   	push   %edx
   10be1:	6a 01                	push   $0x1
   10be3:	ff 75 e8             	pushl  -0x18(%ebp)
   10be6:	ff 75 f4             	pushl  -0xc(%ebp)
   10be9:	50                   	push   %eax
   10bea:	e8 7c fa ff ff       	call   1066b <memory_create_map>
   10bef:	83 c4 20             	add    $0x20,%esp
   10bf2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   10bf5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10bf9:	79 34                	jns    10c2f <memory_alloc_for_page_dir+0xcb>
            log_printf("create memory map failed. err = %d", err);
   10bfb:	83 ec 08             	sub    $0x8,%esp
   10bfe:	ff 75 e4             	pushl  -0x1c(%ebp)
   10c01:	68 94 8b 01 00       	push   $0x18b94
   10c06:	e8 25 7e 00 00       	call   18a30 <log_printf>
   10c0b:	83 c4 10             	add    $0x10,%esp
            addr_free_page(&paddr_alloc, vaddr, i + 1);
   10c0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c11:	83 c0 01             	add    $0x1,%eax
   10c14:	83 ec 04             	sub    $0x4,%esp
   10c17:	50                   	push   %eax
   10c18:	ff 75 0c             	pushl  0xc(%ebp)
   10c1b:	68 00 b0 01 00       	push   $0x1b000
   10c20:	e8 92 f8 ff ff       	call   104b7 <addr_free_page>
   10c25:	83 c4 10             	add    $0x10,%esp
            return -1;
   10c28:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c2d:	eb 1c                	jmp    10c4b <memory_alloc_for_page_dir+0xe7>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10c2f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   10c36:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c3d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10c40:	0f 8c 5f ff ff ff    	jl     10ba5 <memory_alloc_for_page_dir+0x41>
    }

    return 0;
   10c46:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c4b:	c9                   	leave  
   10c4c:	c3                   	ret    

00010c4d <memory_alloc_page_for>:

/**
 * @brief 为指定的虚拟地址空间分配多页内存
 */
int memory_alloc_page_for (uint32_t addr, uint32_t size, int perm) {
   10c4d:	55                   	push   %ebp
   10c4e:	89 e5                	mov    %esp,%ebp
   10c50:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   10c53:	e8 b5 0a 00 00       	call   1170d <task_current>
   10c58:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   10c5e:	ff 75 10             	pushl  0x10(%ebp)
   10c61:	ff 75 0c             	pushl  0xc(%ebp)
   10c64:	ff 75 08             	pushl  0x8(%ebp)
   10c67:	50                   	push   %eax
   10c68:	e8 f7 fe ff ff       	call   10b64 <memory_alloc_for_page_dir>
   10c6d:	83 c4 10             	add    $0x10,%esp
}
   10c70:	c9                   	leave  
   10c71:	c3                   	ret    

00010c72 <memory_alloc_page>:

/**
 * @brief 分配一页内存
 * 主要用于内核空间内存的分配，不用于进程内存空间
 */
uint32_t memory_alloc_page (void) {
   10c72:	55                   	push   %ebp
   10c73:	89 e5                	mov    %esp,%ebp
   10c75:	83 ec 08             	sub    $0x8,%esp
    // 内核空间虚拟地址与物理地址相同
    return addr_alloc_page(&paddr_alloc, 1);
   10c78:	83 ec 08             	sub    $0x8,%esp
   10c7b:	6a 01                	push   $0x1
   10c7d:	68 00 b0 01 00       	push   $0x1b000
   10c82:	e8 c9 f7 ff ff       	call   10450 <addr_alloc_page>
   10c87:	83 c4 10             	add    $0x10,%esp
}
   10c8a:	c9                   	leave  
   10c8b:	c3                   	ret    

00010c8c <memory_free_page>:

/**
 * @brief 释放一页内存
 */
void memory_free_page (uint32_t addr) {
   10c8c:	55                   	push   %ebp
   10c8d:	89 e5                	mov    %esp,%ebp
   10c8f:	83 ec 18             	sub    $0x18,%esp
    if (addr < MEMORY_TASK_BASE) {
   10c92:	8b 45 08             	mov    0x8(%ebp),%eax
   10c95:	85 c0                	test   %eax,%eax
   10c97:	78 17                	js     10cb0 <memory_free_page+0x24>
        // 内核空间，直接释放
        addr_free_page(&paddr_alloc, addr, 1);
   10c99:	83 ec 04             	sub    $0x4,%esp
   10c9c:	6a 01                	push   $0x1
   10c9e:	ff 75 08             	pushl  0x8(%ebp)
   10ca1:	68 00 b0 01 00       	push   $0x1b000
   10ca6:	e8 0c f8 ff ff       	call   104b7 <addr_free_page>
   10cab:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);

        // 释放页表
        pte->v = 0;
    }
}
   10cae:	eb 72                	jmp    10d22 <memory_free_page+0x96>
        pte_t * pte = find_pte(current_page_dir(), addr, 0);
   10cb0:	e8 30 f7 ff ff       	call   103e5 <current_page_dir>
   10cb5:	83 ec 04             	sub    $0x4,%esp
   10cb8:	6a 00                	push   $0x0
   10cba:	ff 75 08             	pushl  0x8(%ebp)
   10cbd:	50                   	push   %eax
   10cbe:	e8 f8 f8 ff ff       	call   105bb <find_pte>
   10cc3:	83 c4 10             	add    $0x10,%esp
   10cc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT((pte == (pte_t *)0) && pte->present);
   10cc9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ccd:	75 0d                	jne    10cdc <memory_free_page+0x50>
   10ccf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10cd2:	0f b6 00             	movzbl (%eax),%eax
   10cd5:	83 e0 01             	and    $0x1,%eax
   10cd8:	84 c0                	test   %al,%al
   10cda:	75 1c                	jne    10cf8 <memory_free_page+0x6c>
   10cdc:	68 b8 8b 01 00       	push   $0x18bb8
   10ce1:	68 88 8c 01 00       	push   $0x18c88
   10ce6:	68 83 01 00 00       	push   $0x183
   10ceb:	68 34 8b 01 00       	push   $0x18b34
   10cf0:	e8 de 7a 00 00       	call   187d3 <panic>
   10cf5:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10cf8:	83 ec 0c             	sub    $0xc,%esp
   10cfb:	ff 75 f4             	pushl  -0xc(%ebp)
   10cfe:	e8 9b f6 ff ff       	call   1039e <pte_paddr>
   10d03:	83 c4 10             	add    $0x10,%esp
   10d06:	83 ec 04             	sub    $0x4,%esp
   10d09:	6a 01                	push   $0x1
   10d0b:	50                   	push   %eax
   10d0c:	68 00 b0 01 00       	push   $0x1b000
   10d11:	e8 a1 f7 ff ff       	call   104b7 <addr_free_page>
   10d16:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d1c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10d22:	90                   	nop
   10d23:	c9                   	leave  
   10d24:	c3                   	ret    

00010d25 <memory_init>:
 * @brief 初始化内存管理系统
 * 该函数的主要任务：
 * 1、初始化物理内存分配器：将所有物理内存管理起来. 在1MB内存中分配物理位图
 * 2、重新创建内核页表：原loader中创建的页表已经不再合适
 */
void memory_init (boot_info_t * boot_info) {
   10d25:	55                   	push   %ebp
   10d26:	89 e5                	mov    %esp,%ebp
   10d28:	83 ec 18             	sub    $0x18,%esp
    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   10d2b:	83 ec 0c             	sub    $0xc,%esp
   10d2e:	68 dc 8b 01 00       	push   $0x18bdc
   10d33:	e8 f8 7c 00 00       	call   18a30 <log_printf>
   10d38:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10d3b:	83 ec 0c             	sub    $0xc,%esp
   10d3e:	ff 75 08             	pushl  0x8(%ebp)
   10d41:	e8 d3 f7 ff ff       	call   10519 <show_mem_info>
   10d46:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)mem_free_start;
   10d49:	a1 47 04 06 00       	mov    0x60447,%eax
   10d4e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10d51:	83 ec 0c             	sub    $0xc,%esp
   10d54:	ff 75 08             	pushl  0x8(%ebp)
   10d57:	e8 23 f8 ff ff       	call   1057f <total_mem_size>
   10d5c:	83 c4 10             	add    $0x10,%esp
   10d5f:	2d 00 00 10 00       	sub    $0x100000,%eax
   10d64:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   10d67:	83 ec 08             	sub    $0x8,%esp
   10d6a:	68 00 10 00 00       	push   $0x1000
   10d6f:	ff 75 f0             	pushl  -0x10(%ebp)
   10d72:	e8 c3 f5 ff ff       	call   1033a <down2>
   10d77:	83 c4 10             	add    $0x10,%esp
   10d7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   10d7d:	83 ec 04             	sub    $0x4,%esp
   10d80:	ff 75 f0             	pushl  -0x10(%ebp)
   10d83:	68 00 00 10 00       	push   $0x100000
   10d88:	68 e6 8b 01 00       	push   $0x18be6
   10d8d:	e8 9e 7c 00 00       	call   18a30 <log_printf>
   10d92:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存仅跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10d95:	83 ec 0c             	sub    $0xc,%esp
   10d98:	68 00 10 00 00       	push   $0x1000
   10d9d:	ff 75 f0             	pushl  -0x10(%ebp)
   10da0:	68 00 00 10 00       	push   $0x100000
   10da5:	ff 75 f4             	pushl  -0xc(%ebp)
   10da8:	68 00 b0 01 00       	push   $0x1b000
   10dad:	e8 46 f6 ff ff       	call   103f8 <addr_alloc_init>
   10db2:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10db5:	a1 24 b0 01 00       	mov    0x1b024,%eax
   10dba:	c1 e8 0c             	shr    $0xc,%eax
   10dbd:	83 ec 0c             	sub    $0xc,%esp
   10dc0:	50                   	push   %eax
   10dc1:	e8 42 72 00 00       	call   18008 <bitmap_byte_count>
   10dc6:	83 c4 10             	add    $0x10,%esp
   10dc9:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10dcc:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10dd3:	76 1c                	jbe    10df1 <memory_init+0xcc>
   10dd5:	68 04 8c 01 00       	push   $0x18c04
   10dda:	68 9c 8c 01 00       	push   $0x18c9c
   10ddf:	68 a8 01 00 00       	push   $0x1a8
   10de4:	68 34 8b 01 00       	push   $0x18b34
   10de9:	e8 e5 79 00 00       	call   187d3 <panic>
   10dee:	83 c4 10             	add    $0x10,%esp

    // 创建内核页表并切换过去
    create_kernel_table();
   10df1:	e8 01 f9 ff ff       	call   106f7 <create_kernel_table>

    // 先切换到当前页表
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10df6:	b8 00 c0 01 00       	mov    $0x1c000,%eax
   10dfb:	83 ec 0c             	sub    $0xc,%esp
   10dfe:	50                   	push   %eax
   10dff:	e8 d0 f5 ff ff       	call   103d4 <mmu_set_page_dir>
   10e04:	83 c4 10             	add    $0x10,%esp
}
   10e07:	90                   	nop
   10e08:	c9                   	leave  
   10e09:	c3                   	ret    

00010e0a <sys_sbrk>:

/**
 * @brief 调整堆的内存分配，返回堆之前的指针
 */
char * sys_sbrk(int incr) {
   10e0a:	55                   	push   %ebp
   10e0b:	89 e5                	mov    %esp,%ebp
   10e0d:	83 ec 38             	sub    $0x38,%esp
    task_t * task = task_current();
   10e10:	e8 f8 08 00 00       	call   1170d <task_current>
   10e15:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char * pre_heap_end = (char * )task->heap_end;
   10e18:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e1b:	8b 40 30             	mov    0x30(%eax),%eax
   10e1e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int pre_incr = incr;
   10e21:	8b 45 08             	mov    0x8(%ebp),%eax
   10e24:	89 45 e8             	mov    %eax,-0x18(%ebp)

    ASSERT(incr >= 0);
   10e27:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e2b:	79 1c                	jns    10e49 <sys_sbrk+0x3f>
   10e2d:	68 29 8c 01 00       	push   $0x18c29
   10e32:	68 a8 8c 01 00       	push   $0x18ca8
   10e37:	68 b9 01 00 00       	push   $0x1b9
   10e3c:	68 34 8b 01 00       	push   $0x18b34
   10e41:	e8 8d 79 00 00       	call   187d3 <panic>
   10e46:	83 c4 10             	add    $0x10,%esp

    // 如果地址为0，则返回有效的heap区域的顶端
    if (incr == 0) {
   10e49:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e4d:	75 1b                	jne    10e6a <sys_sbrk+0x60>
        log_printf("sbrk(0): end = 0x%x", pre_heap_end);
   10e4f:	83 ec 08             	sub    $0x8,%esp
   10e52:	ff 75 ec             	pushl  -0x14(%ebp)
   10e55:	68 33 8c 01 00       	push   $0x18c33
   10e5a:	e8 d1 7b 00 00       	call   18a30 <log_printf>
   10e5f:	83 c4 10             	add    $0x10,%esp
        return pre_heap_end;
   10e62:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e65:	e9 aa 00 00 00       	jmp    10f14 <sys_sbrk+0x10a>
    } 
    
    uint32_t start = task->heap_end;
   10e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e6d:	8b 40 30             	mov    0x30(%eax),%eax
   10e70:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t end = start + incr;
   10e73:	8b 55 08             	mov    0x8(%ebp),%edx
   10e76:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e79:	01 d0                	add    %edx,%eax
   10e7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 起始偏移非0
    int start_offset = start % MEM_PAGE_SIZE;
   10e7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e81:	25 ff 0f 00 00       	and    $0xfff,%eax
   10e86:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (start_offset) {
   10e89:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   10e8d:	74 37                	je     10ec6 <sys_sbrk+0xbc>
        // 不超过1页，只调整
        if (start_offset + incr <= MEM_PAGE_SIZE) {
   10e8f:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10e92:	8b 45 08             	mov    0x8(%ebp),%eax
   10e95:	01 d0                	add    %edx,%eax
   10e97:	3d 00 10 00 00       	cmp    $0x1000,%eax
   10e9c:	7f 0e                	jg     10eac <sys_sbrk+0xa2>
            task->heap_end = end;
   10e9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ea1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10ea4:	89 50 30             	mov    %edx,0x30(%eax)
            return pre_heap_end;
   10ea7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10eaa:	eb 68                	jmp    10f14 <sys_sbrk+0x10a>
        } else {
            // 超过1页，先只调本页的
            uint32_t curr_size = MEM_PAGE_SIZE - start_offset;
   10eac:	b8 00 10 00 00       	mov    $0x1000,%eax
   10eb1:	2b 45 e0             	sub    -0x20(%ebp),%eax
   10eb4:	89 45 dc             	mov    %eax,-0x24(%ebp)
            start += curr_size;
   10eb7:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10eba:	01 45 f4             	add    %eax,-0xc(%ebp)
            incr -= curr_size;
   10ebd:	8b 45 08             	mov    0x8(%ebp),%eax
   10ec0:	2b 45 dc             	sub    -0x24(%ebp),%eax
   10ec3:	89 45 08             	mov    %eax,0x8(%ebp)
        }
    }

    // 处理其余的，起始对齐的页边界的
    if (incr) {
   10ec6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10eca:	74 3c                	je     10f08 <sys_sbrk+0xfe>
        uint32_t curr_size = end - start;
   10ecc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10ecf:	2b 45 f4             	sub    -0xc(%ebp),%eax
   10ed2:	89 45 d8             	mov    %eax,-0x28(%ebp)
        int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U | PTE_W);
   10ed5:	83 ec 04             	sub    $0x4,%esp
   10ed8:	6a 07                	push   $0x7
   10eda:	ff 75 d8             	pushl  -0x28(%ebp)
   10edd:	ff 75 f4             	pushl  -0xc(%ebp)
   10ee0:	e8 68 fd ff ff       	call   10c4d <memory_alloc_page_for>
   10ee5:	83 c4 10             	add    $0x10,%esp
   10ee8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0) {
   10eeb:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10eef:	79 17                	jns    10f08 <sys_sbrk+0xfe>
            log_printf("sbrk: alloc mem failed.");
   10ef1:	83 ec 0c             	sub    $0xc,%esp
   10ef4:	68 47 8c 01 00       	push   $0x18c47
   10ef9:	e8 32 7b 00 00       	call   18a30 <log_printf>
   10efe:	83 c4 10             	add    $0x10,%esp
            return (char *)-1;
   10f01:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f06:	eb 0c                	jmp    10f14 <sys_sbrk+0x10a>
        }
    }

    //log_printf("sbrk(%d): end = 0x%x", pre_incr, end);
    task->heap_end = end;
   10f08:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f0b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10f0e:	89 50 30             	mov    %edx,0x30(%eax)
    return (char * )pre_heap_end;        
   10f11:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   10f14:	c9                   	leave  
   10f15:	c3                   	ret    

00010f16 <sys_print_msg>:
#include "fs/fs.h"

// 系统调用处理函数类型
typedef int (*syscall_handler_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

int sys_print_msg (char * fmt, int arg) {
   10f16:	55                   	push   %ebp
   10f17:	89 e5                	mov    %esp,%ebp
   10f19:	83 ec 08             	sub    $0x8,%esp
	log_printf(fmt, arg);
   10f1c:	83 ec 08             	sub    $0x8,%esp
   10f1f:	ff 75 0c             	pushl  0xc(%ebp)
   10f22:	ff 75 08             	pushl  0x8(%ebp)
   10f25:	e8 06 7b 00 00       	call   18a30 <log_printf>
   10f2a:	83 c4 10             	add    $0x10,%esp
}
   10f2d:	90                   	nop
   10f2e:	c9                   	leave  
   10f2f:	c3                   	ret    

00010f30 <do_handler_syscall>:
};

/**
 * 处理系统调用。该函数由系统调用函数调用
 */
void do_handler_syscall (syscall_frame_t * frame) {
   10f30:	55                   	push   %ebp
   10f31:	89 e5                	mov    %esp,%ebp
   10f33:	53                   	push   %ebx
   10f34:	83 ec 14             	sub    $0x14,%esp
	// 超出边界，返回错误
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0])) {
   10f37:	8b 45 08             	mov    0x8(%ebp),%eax
   10f3a:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f3d:	83 f8 64             	cmp    $0x64,%eax
   10f40:	77 4e                	ja     10f90 <do_handler_syscall+0x60>
		// 查表取得处理函数，然后调用处理
		syscall_handler_t handler = sys_table[frame->func_id];
   10f42:	8b 45 08             	mov    0x8(%ebp),%eax
   10f45:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f48:	8b 04 85 c0 8c 01 00 	mov    0x18cc0(,%eax,4),%eax
   10f4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (handler) {
   10f52:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f56:	74 38                	je     10f90 <do_handler_syscall+0x60>
			int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10f58:	8b 45 08             	mov    0x8(%ebp),%eax
   10f5b:	8b 40 4c             	mov    0x4c(%eax),%eax
   10f5e:	89 c3                	mov    %eax,%ebx
   10f60:	8b 45 08             	mov    0x8(%ebp),%eax
   10f63:	8b 40 48             	mov    0x48(%eax),%eax
   10f66:	89 c1                	mov    %eax,%ecx
   10f68:	8b 45 08             	mov    0x8(%ebp),%eax
   10f6b:	8b 40 44             	mov    0x44(%eax),%eax
   10f6e:	89 c2                	mov    %eax,%edx
   10f70:	8b 45 08             	mov    0x8(%ebp),%eax
   10f73:	8b 40 40             	mov    0x40(%eax),%eax
   10f76:	53                   	push   %ebx
   10f77:	51                   	push   %ecx
   10f78:	52                   	push   %edx
   10f79:	50                   	push   %eax
   10f7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f7d:	ff d0                	call   *%eax
   10f7f:	83 c4 10             	add    $0x10,%esp
   10f82:	89 45 f0             	mov    %eax,-0x10(%ebp)
			frame->eax = ret;  // 设置系统调用的返回值，由eax传递
   10f85:	8b 45 08             	mov    0x8(%ebp),%eax
   10f88:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10f8b:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   10f8e:	eb 30                	jmp    10fc0 <do_handler_syscall+0x90>
		}
	}

	// 不支持的系统调用，打印出错信息
	task_t * task = task_current();
   10f90:	e8 78 07 00 00       	call   1170d <task_current>
   10f95:	89 45 ec             	mov    %eax,-0x14(%ebp)
	log_printf("task: %s, Unknown syscall: %d", task->name,  frame->func_id);
   10f98:	8b 45 08             	mov    0x8(%ebp),%eax
   10f9b:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10fa1:	83 c2 04             	add    $0x4,%edx
   10fa4:	83 ec 04             	sub    $0x4,%esp
   10fa7:	50                   	push   %eax
   10fa8:	52                   	push   %edx
   10fa9:	68 54 8e 01 00       	push   $0x18e54
   10fae:	e8 7d 7a 00 00       	call   18a30 <log_printf>
   10fb3:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;  // 设置系统调用的返回值，由eax传递
   10fb6:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb9:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
}
   10fc0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10fc3:	c9                   	leave  
   10fc4:	c3                   	ret    

00010fc5 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   10fc5:	55                   	push   %ebp
   10fc6:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10fc8:	8b 45 08             	mov    0x8(%ebp),%eax
   10fcb:	0f 22 d8             	mov    %eax,%cr3
}
   10fce:	90                   	nop
   10fcf:	5d                   	pop    %ebp
   10fd0:	c3                   	ret    

00010fd1 <hlt>:
	idt.limit = size - 1;

	__asm__ __volatile__("lidt %0"::"m"(idt));
}

static inline void hlt(void) {
   10fd1:	55                   	push   %ebp
   10fd2:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10fd4:	f4                   	hlt    
}
   10fd5:	90                   	nop
   10fd6:	5d                   	pop    %ebp
   10fd7:	c3                   	ret    

00010fd8 <write_tr>:

static inline void write_tr (uint32_t tss_selector) {
   10fd8:	55                   	push   %ebp
   10fd9:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
   10fdb:	8b 45 08             	mov    0x8(%ebp),%eax
   10fde:	0f 00 d8             	ltr    %ax
}
   10fe1:	90                   	nop
   10fe2:	5d                   	pop    %ebp
   10fe3:	c3                   	ret    

00010fe4 <list_node_init>:

/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node) {
   10fe4:	55                   	push   %ebp
   10fe5:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10fe7:	8b 45 08             	mov    0x8(%ebp),%eax
   10fea:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10ff1:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff4:	8b 50 04             	mov    0x4(%eax),%edx
   10ff7:	8b 45 08             	mov    0x8(%ebp),%eax
   10ffa:	89 10                	mov    %edx,(%eax)
}
   10ffc:	90                   	nop
   10ffd:	5d                   	pop    %ebp
   10ffe:	c3                   	ret    

00010fff <list_node_next>:
/**
 * 获取结点的前一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t * list_node_next(list_node_t *node) {
   10fff:	55                   	push   %ebp
   11000:	89 e5                	mov    %esp,%ebp
    return node->next;
   11002:	8b 45 08             	mov    0x8(%ebp),%eax
   11005:	8b 40 04             	mov    0x4(%eax),%eax
}
   11008:	5d                   	pop    %ebp
   11009:	c3                   	ret    

0001100a <list_count>:
/**
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list) {
   1100a:	55                   	push   %ebp
   1100b:	89 e5                	mov    %esp,%ebp
    return list->count;
   1100d:	8b 45 08             	mov    0x8(%ebp),%eax
   11010:	8b 40 08             	mov    0x8(%eax),%eax
}
   11013:	5d                   	pop    %ebp
   11014:	c3                   	ret    

00011015 <list_first>:
/**
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t* list_first(list_t *list) {
   11015:	55                   	push   %ebp
   11016:	89 e5                	mov    %esp,%ebp
    return list->first;
   11018:	8b 45 08             	mov    0x8(%ebp),%eax
   1101b:	8b 00                	mov    (%eax),%eax
}
   1101d:	5d                   	pop    %ebp
   1101e:	c3                   	ret    

0001101f <mmu_set_page_dir>:
static inline void mmu_set_page_dir (uint32_t paddr) {
   1101f:	55                   	push   %ebp
   11020:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11022:	ff 75 08             	pushl  0x8(%ebp)
   11025:	e8 9b ff ff ff       	call   10fc5 <write_cr3>
   1102a:	83 c4 04             	add    $0x4,%esp
}
   1102d:	90                   	nop
   1102e:	c9                   	leave  
   1102f:	c3                   	ret    

00011030 <tss_init>:
static task_manager_t task_manager;     // 任务管理器
static uint32_t idle_task_stack[IDLE_STACK_SIZE];	// 空闲任务堆栈
static task_t task_table[TASK_NR];      // 用户进程表
static mutex_t task_table_mutex;        // 进程表互斥访问锁

static int tss_init (task_t * task, int flag, uint32_t entry, uint32_t esp) {
   11030:	55                   	push   %ebp
   11031:	89 e5                	mov    %esp,%ebp
   11033:	83 ec 28             	sub    $0x28,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   11036:	e8 fb 15 00 00       	call   12636 <gdt_alloc_desc>
   1103b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0) {
   1103e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11042:	79 1a                	jns    1105e <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   11044:	83 ec 0c             	sub    $0xc,%esp
   11047:	68 74 8e 01 00       	push   $0x18e74
   1104c:	e8 df 79 00 00       	call   18a30 <log_printf>
   11051:	83 c4 10             	add    $0x10,%esp
        return -1;
   11054:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11059:	e9 9d 01 00 00       	jmp    111fb <tss_init+0x1cb>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t),
   1105e:	8b 45 08             	mov    0x8(%ebp),%eax
   11061:	05 44 02 00 00       	add    $0x244,%eax
   11066:	68 89 00 00 00       	push   $0x89
   1106b:	6a 68                	push   $0x68
   1106d:	50                   	push   %eax
   1106e:	ff 75 ec             	pushl  -0x14(%ebp)
   11071:	e8 ba 14 00 00       	call   12530 <segment_desc_set>
   11076:	83 c4 10             	add    $0x10,%esp
            SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   11079:	8b 45 08             	mov    0x8(%ebp),%eax
   1107c:	05 44 02 00 00       	add    $0x244,%eax
   11081:	83 ec 04             	sub    $0x4,%esp
   11084:	6a 68                	push   $0x68
   11086:	6a 00                	push   $0x0
   11088:	50                   	push   %eax
   11089:	e8 f8 73 00 00       	call   18486 <kernel_memset>
   1108e:	83 c4 10             	add    $0x10,%esp

    // 分配内核栈，得到的是物理地址
    uint32_t kernel_stack = memory_alloc_page();
   11091:	e8 dc fb ff ff       	call   10c72 <memory_alloc_page>
   11096:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) {
   11099:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1109d:	0f 84 2d 01 00 00    	je     111d0 <tss_init+0x1a0>
        goto tss_init_failed;
    }
    
    // 根据不同的权限选择不同的访问选择子
    int code_sel, data_sel;
    if (flag & TASK_FLAG_SYSTEM) {
   110a3:	8b 45 0c             	mov    0xc(%ebp),%eax
   110a6:	83 e0 01             	and    $0x1,%eax
   110a9:	85 c0                	test   %eax,%eax
   110ab:	74 10                	je     110bd <tss_init+0x8d>
        code_sel = KERNEL_SELECTOR_CS;
   110ad:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   110b4:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   110bb:	eb 16                	jmp    110d3 <tss_init+0xa3>
    } else {
        // 注意加了RP3,不然将产生段保护错误
        code_sel = task_manager.app_code_sel | SEG_RPL3;
   110bd:	a1 b8 d5 01 00       	mov    0x1d5b8,%eax
   110c2:	83 c8 03             	or     $0x3,%eax
   110c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_RPL3;
   110c8:	a1 bc d5 01 00       	mov    0x1d5bc,%eax
   110cd:	83 c8 03             	or     $0x3,%eax
   110d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip = entry;
   110d3:	8b 45 08             	mov    0x8(%ebp),%eax
   110d6:	8b 55 10             	mov    0x10(%ebp),%edx
   110d9:	89 90 64 02 00 00    	mov    %edx,0x264(%eax)
    task->tss.esp = esp ? esp : kernel_stack + MEM_PAGE_SIZE;  // 未指定栈则用内核栈，即运行在特权级0的进程
   110df:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   110e3:	75 0a                	jne    110ef <tss_init+0xbf>
   110e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110e8:	05 00 10 00 00       	add    $0x1000,%eax
   110ed:	eb 03                	jmp    110f2 <tss_init+0xc2>
   110ef:	8b 45 14             	mov    0x14(%ebp),%eax
   110f2:	8b 55 08             	mov    0x8(%ebp),%edx
   110f5:	89 82 7c 02 00 00    	mov    %eax,0x27c(%edx)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   110fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110fe:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   11104:	8b 45 08             	mov    0x8(%ebp),%eax
   11107:	89 90 48 02 00 00    	mov    %edx,0x248(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   1110d:	8b 45 08             	mov    0x8(%ebp),%eax
   11110:	c7 80 4c 02 00 00 10 	movl   $0x10,0x24c(%eax)
   11117:	00 00 00 
    task->tss.eip = entry;
   1111a:	8b 45 08             	mov    0x8(%ebp),%eax
   1111d:	8b 55 10             	mov    0x10(%ebp),%edx
   11120:	89 90 64 02 00 00    	mov    %edx,0x264(%eax)
    task->tss.eflags = EFLAGS_DEFAULT| EFLAGS_IF;
   11126:	8b 45 08             	mov    0x8(%ebp),%eax
   11129:	c7 80 68 02 00 00 02 	movl   $0x202,0x268(%eax)
   11130:	02 00 00 
    task->tss.es = task->tss.ss = task->tss.ds = task->tss.fs 
            = task->tss.gs = data_sel;   // 全部采用同一数据段
   11133:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11136:	8b 45 08             	mov    0x8(%ebp),%eax
   11139:	89 90 a0 02 00 00    	mov    %edx,0x2a0(%eax)
   1113f:	8b 45 08             	mov    0x8(%ebp),%eax
   11142:	8b 90 a0 02 00 00    	mov    0x2a0(%eax),%edx
   11148:	8b 45 08             	mov    0x8(%ebp),%eax
   1114b:	89 90 9c 02 00 00    	mov    %edx,0x29c(%eax)
    task->tss.es = task->tss.ss = task->tss.ds = task->tss.fs 
   11151:	8b 45 08             	mov    0x8(%ebp),%eax
   11154:	8b 90 9c 02 00 00    	mov    0x29c(%eax),%edx
   1115a:	8b 45 08             	mov    0x8(%ebp),%eax
   1115d:	89 90 98 02 00 00    	mov    %edx,0x298(%eax)
   11163:	8b 45 08             	mov    0x8(%ebp),%eax
   11166:	8b 90 98 02 00 00    	mov    0x298(%eax),%edx
   1116c:	8b 45 08             	mov    0x8(%ebp),%eax
   1116f:	89 90 94 02 00 00    	mov    %edx,0x294(%eax)
   11175:	8b 45 08             	mov    0x8(%ebp),%eax
   11178:	8b 90 94 02 00 00    	mov    0x294(%eax),%edx
   1117e:	8b 45 08             	mov    0x8(%ebp),%eax
   11181:	89 90 8c 02 00 00    	mov    %edx,0x28c(%eax)
    task->tss.cs = code_sel; 
   11187:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1118a:	8b 45 08             	mov    0x8(%ebp),%eax
   1118d:	89 90 90 02 00 00    	mov    %edx,0x290(%eax)
    task->tss.iomap = 0;
   11193:	8b 45 08             	mov    0x8(%ebp),%eax
   11196:	c7 80 a8 02 00 00 00 	movl   $0x0,0x2a8(%eax)
   1119d:	00 00 00 

    // 页表初始化
    uint32_t page_dir = memory_create_uvm();
   111a0:	e8 0d f6 ff ff       	call   107b2 <memory_create_uvm>
   111a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) {
   111a8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   111ac:	74 25                	je     111d3 <tss_init+0x1a3>
        goto tss_init_failed;
    }
    task->tss.cr3 = page_dir;
   111ae:	8b 45 08             	mov    0x8(%ebp),%eax
   111b1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   111b4:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)

    task->tss_sel = tss_sel;
   111ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
   111bd:	89 c2                	mov    %eax,%edx
   111bf:	8b 45 08             	mov    0x8(%ebp),%eax
   111c2:	66 89 90 ac 02 00 00 	mov    %dx,0x2ac(%eax)
    return 0;
   111c9:	b8 00 00 00 00       	mov    $0x0,%eax
   111ce:	eb 2b                	jmp    111fb <tss_init+0x1cb>
        goto tss_init_failed;
   111d0:	90                   	nop
   111d1:	eb 01                	jmp    111d4 <tss_init+0x1a4>
        goto tss_init_failed;
   111d3:	90                   	nop
tss_init_failed:
    gdt_free_sel(tss_sel);
   111d4:	83 ec 0c             	sub    $0xc,%esp
   111d7:	ff 75 ec             	pushl  -0x14(%ebp)
   111da:	e8 1e 14 00 00       	call   125fd <gdt_free_sel>
   111df:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) {
   111e2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   111e6:	74 0e                	je     111f6 <tss_init+0x1c6>
        memory_free_page(kernel_stack);
   111e8:	83 ec 0c             	sub    $0xc,%esp
   111eb:	ff 75 e8             	pushl  -0x18(%ebp)
   111ee:	e8 99 fa ff ff       	call   10c8c <memory_free_page>
   111f3:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   111f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   111fb:	c9                   	leave  
   111fc:	c3                   	ret    

000111fd <task_init>:

/**
 * @brief 初始化任务
 */
int task_init (task_t *task, const char * name, int flag, uint32_t entry, uint32_t esp) {
   111fd:	55                   	push   %ebp
   111fe:	89 e5                	mov    %esp,%ebp
   11200:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   11203:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11207:	75 19                	jne    11222 <task_init+0x25>
   11209:	68 87 8e 01 00       	push   $0x18e87
   1120e:	68 04 90 01 00       	push   $0x19004
   11213:	6a 56                	push   $0x56
   11215:	68 9c 8e 01 00       	push   $0x18e9c
   1121a:	e8 b4 75 00 00       	call   187d3 <panic>
   1121f:	83 c4 10             	add    $0x10,%esp

    int err = tss_init(task, flag, entry, esp);
   11222:	ff 75 18             	pushl  0x18(%ebp)
   11225:	ff 75 14             	pushl  0x14(%ebp)
   11228:	ff 75 10             	pushl  0x10(%ebp)
   1122b:	ff 75 08             	pushl  0x8(%ebp)
   1122e:	e8 fd fd ff ff       	call   11030 <tss_init>
   11233:	83 c4 10             	add    $0x10,%esp
   11236:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0) {
   11239:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1123d:	79 18                	jns    11257 <task_init+0x5a>
        log_printf("init task failed.\n");
   1123f:	83 ec 0c             	sub    $0xc,%esp
   11242:	68 cd 8e 01 00       	push   $0x18ecd
   11247:	e8 e4 77 00 00       	call   18a30 <log_printf>
   1124c:	83 c4 10             	add    $0x10,%esp
        return err;
   1124f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11252:	e9 f0 00 00 00       	jmp    11347 <task_init+0x14a>
    }

    // 任务字段初始化
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11257:	8b 45 08             	mov    0x8(%ebp),%eax
   1125a:	83 c0 04             	add    $0x4,%eax
   1125d:	83 ec 04             	sub    $0x4,%esp
   11260:	6a 20                	push   $0x20
   11262:	ff 75 0c             	pushl  0xc(%ebp)
   11265:	50                   	push   %eax
   11266:	e8 a7 70 00 00       	call   18312 <kernel_strncpy>
   1126b:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1126e:	8b 45 08             	mov    0x8(%ebp),%eax
   11271:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   11277:	8b 45 08             	mov    0x8(%ebp),%eax
   1127a:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    task->time_slice = TASK_TIME_SLICE_DEFAULT;
   11281:	8b 45 08             	mov    0x8(%ebp),%eax
   11284:	c7 40 3c 0a 00 00 00 	movl   $0xa,0x3c(%eax)
    task->slice_ticks = task->time_slice;
   1128b:	8b 45 08             	mov    0x8(%ebp),%eax
   1128e:	8b 50 3c             	mov    0x3c(%eax),%edx
   11291:	8b 45 08             	mov    0x8(%ebp),%eax
   11294:	89 50 40             	mov    %edx,0x40(%eax)
    task->parent = (task_t *)0;
   11297:	8b 45 08             	mov    0x8(%ebp),%eax
   1129a:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    task->heap_start = 0;
   112a1:	8b 45 08             	mov    0x8(%ebp),%eax
   112a4:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
    task->heap_end = 0;
   112ab:	8b 45 08             	mov    0x8(%ebp),%eax
   112ae:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    list_node_init(&task->all_node);
   112b5:	8b 45 08             	mov    0x8(%ebp),%eax
   112b8:	05 c0 02 00 00       	add    $0x2c0,%eax
   112bd:	83 ec 0c             	sub    $0xc,%esp
   112c0:	50                   	push   %eax
   112c1:	e8 1e fd ff ff       	call   10fe4 <list_node_init>
   112c6:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   112c9:	8b 45 08             	mov    0x8(%ebp),%eax
   112cc:	05 b0 02 00 00       	add    $0x2b0,%eax
   112d1:	83 ec 0c             	sub    $0xc,%esp
   112d4:	50                   	push   %eax
   112d5:	e8 0a fd ff ff       	call   10fe4 <list_node_init>
   112da:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   112dd:	8b 45 08             	mov    0x8(%ebp),%eax
   112e0:	05 b8 02 00 00       	add    $0x2b8,%eax
   112e5:	83 ec 0c             	sub    $0xc,%esp
   112e8:	50                   	push   %eax
   112e9:	e8 f6 fc ff ff       	call   10fe4 <list_node_init>
   112ee:	83 c4 10             	add    $0x10,%esp

    // 文件相关
    kernel_memset(task->file_table, 0, sizeof(task->file_table));
   112f1:	8b 45 08             	mov    0x8(%ebp),%eax
   112f4:	83 c0 44             	add    $0x44,%eax
   112f7:	83 ec 04             	sub    $0x4,%esp
   112fa:	68 00 02 00 00       	push   $0x200
   112ff:	6a 00                	push   $0x0
   11301:	50                   	push   %eax
   11302:	e8 7f 71 00 00       	call   18486 <kernel_memset>
   11307:	83 c4 10             	add    $0x10,%esp

    // 插入就绪队列中和所有的任务队列中
    irq_state_t state = irq_enter_protection();
   1130a:	e8 03 1e 00 00       	call   13112 <irq_enter_protection>
   1130f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task->pid = (uint32_t)task;   // 使用地址，能唯一
   11312:	8b 55 08             	mov    0x8(%ebp),%edx
   11315:	8b 45 08             	mov    0x8(%ebp),%eax
   11318:	89 50 24             	mov    %edx,0x24(%eax)
    list_insert_last(&task_manager.task_list, &task->all_node);
   1131b:	8b 45 08             	mov    0x8(%ebp),%eax
   1131e:	05 c0 02 00 00       	add    $0x2c0,%eax
   11323:	83 ec 08             	sub    $0x8,%esp
   11326:	50                   	push   %eax
   11327:	68 10 d0 01 00       	push   $0x1d010
   1132c:	e8 6f 75 00 00       	call   188a0 <list_insert_last>
   11331:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11334:	83 ec 0c             	sub    $0xc,%esp
   11337:	ff 75 f0             	pushl  -0x10(%ebp)
   1133a:	e8 eb 1d 00 00       	call   1312a <irq_leave_protection>
   1133f:	83 c4 10             	add    $0x10,%esp
    return 0;
   11342:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11347:	c9                   	leave  
   11348:	c3                   	ret    

00011349 <task_start>:

/**
 * @brief 启动任务
 */
void task_start(task_t * task) {
   11349:	55                   	push   %ebp
   1134a:	89 e5                	mov    %esp,%ebp
   1134c:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1134f:	e8 be 1d 00 00       	call   13112 <irq_enter_protection>
   11354:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   11357:	83 ec 0c             	sub    $0xc,%esp
   1135a:	ff 75 08             	pushl  0x8(%ebp)
   1135d:	e8 a9 02 00 00       	call   1160b <task_set_ready>
   11362:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11365:	83 ec 0c             	sub    $0xc,%esp
   11368:	ff 75 f4             	pushl  -0xc(%ebp)
   1136b:	e8 ba 1d 00 00       	call   1312a <irq_leave_protection>
   11370:	83 c4 10             	add    $0x10,%esp
}
   11373:	90                   	nop
   11374:	c9                   	leave  
   11375:	c3                   	ret    

00011376 <task_uninit>:

/**
 * @brief 任务任务初始时分配的各项资源
 */
void task_uninit (task_t * task) {
   11376:	55                   	push   %ebp
   11377:	89 e5                	mov    %esp,%ebp
   11379:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_sel) {
   1137c:	8b 45 08             	mov    0x8(%ebp),%eax
   1137f:	0f b7 80 ac 02 00 00 	movzwl 0x2ac(%eax),%eax
   11386:	66 85 c0             	test   %ax,%ax
   11389:	74 19                	je     113a4 <task_uninit+0x2e>
        gdt_free_sel(task->tss_sel);
   1138b:	8b 45 08             	mov    0x8(%ebp),%eax
   1138e:	0f b7 80 ac 02 00 00 	movzwl 0x2ac(%eax),%eax
   11395:	0f b7 c0             	movzwl %ax,%eax
   11398:	83 ec 0c             	sub    $0xc,%esp
   1139b:	50                   	push   %eax
   1139c:	e8 5c 12 00 00       	call   125fd <gdt_free_sel>
   113a1:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0) {
   113a4:	8b 45 08             	mov    0x8(%ebp),%eax
   113a7:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   113ad:	85 c0                	test   %eax,%eax
   113af:	74 1a                	je     113cb <task_uninit+0x55>
        memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   113b1:	8b 45 08             	mov    0x8(%ebp),%eax
   113b4:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   113ba:	2d 00 10 00 00       	sub    $0x1000,%eax
   113bf:	83 ec 0c             	sub    $0xc,%esp
   113c2:	50                   	push   %eax
   113c3:	e8 c4 f8 ff ff       	call   10c8c <memory_free_page>
   113c8:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3) {
   113cb:	8b 45 08             	mov    0x8(%ebp),%eax
   113ce:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   113d4:	85 c0                	test   %eax,%eax
   113d6:	74 15                	je     113ed <task_uninit+0x77>
        memory_destroy_uvm(task->tss.cr3);
   113d8:	8b 45 08             	mov    0x8(%ebp),%eax
   113db:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   113e1:	83 ec 0c             	sub    $0xc,%esp
   113e4:	50                   	push   %eax
   113e5:	e8 4d f4 ff ff       	call   10837 <memory_destroy_uvm>
   113ea:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   113ed:	83 ec 04             	sub    $0x4,%esp
   113f0:	68 c8 02 00 00       	push   $0x2c8
   113f5:	6a 00                	push   $0x0
   113f7:	ff 75 08             	pushl  0x8(%ebp)
   113fa:	e8 87 70 00 00       	call   18486 <kernel_memset>
   113ff:	83 c4 10             	add    $0x10,%esp
}
   11402:	90                   	nop
   11403:	c9                   	leave  
   11404:	c3                   	ret    

00011405 <task_switch_from_to>:
void simple_switch (uint32_t ** from, uint32_t * to);

/**
 * @brief 切换至指定任务
 */
void task_switch_from_to (task_t * from, task_t * to) {
   11405:	55                   	push   %ebp
   11406:	89 e5                	mov    %esp,%ebp
   11408:	83 ec 08             	sub    $0x8,%esp
     switch_to_tss(to->tss_sel);
   1140b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1140e:	0f b7 80 ac 02 00 00 	movzwl 0x2ac(%eax),%eax
   11415:	0f b7 c0             	movzwl %ax,%eax
   11418:	83 ec 0c             	sub    $0xc,%esp
   1141b:	50                   	push   %eax
   1141c:	e8 16 13 00 00       	call   12737 <switch_to_tss>
   11421:	83 c4 10             	add    $0x10,%esp
    //simple_switch(&from->stack, to->stack);
}
   11424:	90                   	nop
   11425:	c9                   	leave  
   11426:	c3                   	ret    

00011427 <task_first_init>:
 * 将init加载地址设置成和内核一起的，运行地址设置成用户进程运行的高处。
 * 不过，考虑到init可能用到newlib库，如果与kernel合并编译，在lds中很难控制将newlib的
 * 代码与init进程的放在一起，有可能与kernel放在了一起。
 * 综上，最好是分离。
 */
void task_first_init (void) {
   11427:	55                   	push   %ebp
   11428:	89 e5                	mov    %esp,%ebp
   1142a:	83 ec 18             	sub    $0x18,%esp

    // 以下获得的是bin文件在内存中的物理地址
    extern uint8_t s_first_task[], e_first_task[];

    // 分配的空间比实际存储的空间要大一些，多余的用于放置栈
    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   1142d:	ba 47 04 06 00       	mov    $0x60447,%edx
   11432:	b8 c0 00 06 00       	mov    $0x600c0,%eax
   11437:	29 c2                	sub    %eax,%edx
   11439:	89 d0                	mov    %edx,%eax
   1143b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   1143e:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   11445:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11448:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   1144b:	72 1c                	jb     11469 <task_first_init+0x42>
   1144d:	68 e0 8e 01 00       	push   $0x18ee0
   11452:	68 10 90 01 00       	push   $0x19010
   11457:	68 ae 00 00 00       	push   $0xae
   1145c:	68 9c 8e 01 00       	push   $0x18e9c
   11461:	e8 6d 73 00 00       	call   187d3 <panic>
   11466:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   11469:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    // 第一个任务代码量小一些，好和栈放在1个页面呢
    // 这样就不要立即考虑还要给栈分配空间的问题
    task_init(&task_manager.first_task, "first task", 0, first_start, first_start + alloc_size);
   11470:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11473:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11476:	01 d0                	add    %edx,%eax
   11478:	83 ec 0c             	sub    $0xc,%esp
   1147b:	50                   	push   %eax
   1147c:	ff 75 ec             	pushl  -0x14(%ebp)
   1147f:	6a 00                	push   $0x0
   11481:	68 f7 8e 01 00       	push   $0x18ef7
   11486:	68 28 d0 01 00       	push   $0x1d028
   1148b:	e8 6d fd ff ff       	call   111fd <task_init>
   11490:	83 c4 20             	add    $0x20,%esp
    task_manager.first_task.heap_start = (uint32_t)e_first_task;  // 这里不对
   11493:	b8 47 04 06 00       	mov    $0x60447,%eax
   11498:	a3 54 d0 01 00       	mov    %eax,0x1d054
    task_manager.first_task.heap_end = task_manager.first_task.heap_start;
   1149d:	a1 54 d0 01 00       	mov    0x1d054,%eax
   114a2:	a3 58 d0 01 00       	mov    %eax,0x1d058
    task_manager.curr_task = &task_manager.first_task;
   114a7:	c7 05 00 d0 01 00 28 	movl   $0x1d028,0x1d000
   114ae:	d0 01 00 

    // 更新页表地址为自己的
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   114b1:	a1 88 d2 01 00       	mov    0x1d288,%eax
   114b6:	83 ec 0c             	sub    $0xc,%esp
   114b9:	50                   	push   %eax
   114ba:	e8 60 fb ff ff       	call   1101f <mmu_set_page_dir>
   114bf:	83 c4 10             	add    $0x10,%esp

    // 分配一页内存供代码存放使用，然后将代码复制过去
    memory_alloc_page_for(first_start,  alloc_size, PTE_P | PTE_W | PTE_U);
   114c2:	83 ec 04             	sub    $0x4,%esp
   114c5:	6a 07                	push   $0x7
   114c7:	ff 75 f0             	pushl  -0x10(%ebp)
   114ca:	ff 75 ec             	pushl  -0x14(%ebp)
   114cd:	e8 7b f7 ff ff       	call   10c4d <memory_alloc_page_for>
   114d2:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy((void *)first_start, (void *)&s_first_task, copy_size);
   114d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
   114d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114db:	83 ec 04             	sub    $0x4,%esp
   114de:	52                   	push   %edx
   114df:	68 c0 00 06 00       	push   $0x600c0
   114e4:	50                   	push   %eax
   114e5:	e8 4d 6f 00 00       	call   18437 <kernel_memcpy>
   114ea:	83 c4 10             	add    $0x10,%esp

    // 启动进程
    task_start(&task_manager.first_task);
   114ed:	83 ec 0c             	sub    $0xc,%esp
   114f0:	68 28 d0 01 00       	push   $0x1d028
   114f5:	e8 4f fe ff ff       	call   11349 <task_start>
   114fa:	83 c4 10             	add    $0x10,%esp

    // 写TR寄存器，指示当前运行的第一个任务
    write_tr(task_manager.first_task.tss_sel);
   114fd:	0f b7 05 d4 d2 01 00 	movzwl 0x1d2d4,%eax
   11504:	0f b7 c0             	movzwl %ax,%eax
   11507:	83 ec 0c             	sub    $0xc,%esp
   1150a:	50                   	push   %eax
   1150b:	e8 c8 fa ff ff       	call   10fd8 <write_tr>
   11510:	83 c4 10             	add    $0x10,%esp
}
   11513:	90                   	nop
   11514:	c9                   	leave  
   11515:	c3                   	ret    

00011516 <task_first_task>:

/**
 * @brief 返回初始任务
 */
task_t * task_first_task (void) {
   11516:	55                   	push   %ebp
   11517:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11519:	b8 28 d0 01 00       	mov    $0x1d028,%eax
}
   1151e:	5d                   	pop    %ebp
   1151f:	c3                   	ret    

00011520 <idle_task_entry>:

/**
 * @brief 空闲任务
 */
static void idle_task_entry (void) {
   11520:	55                   	push   %ebp
   11521:	89 e5                	mov    %esp,%ebp
    for (;;) {
        hlt();
   11523:	e8 a9 fa ff ff       	call   10fd1 <hlt>
   11528:	eb f9                	jmp    11523 <idle_task_entry+0x3>

0001152a <task_manager_init>:
}

/**
 * @brief 任务管理器初始化
 */
void task_manager_init (void) {
   1152a:	55                   	push   %ebp
   1152b:	89 e5                	mov    %esp,%ebp
   1152d:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(task_table, 0, sizeof(task_table));
   11530:	83 ec 04             	sub    $0x4,%esp
   11533:	68 00 64 01 00       	push   $0x16400
   11538:	6a 00                	push   $0x0
   1153a:	68 c0 e5 01 00       	push   $0x1e5c0
   1153f:	e8 42 6f 00 00       	call   18486 <kernel_memset>
   11544:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_mutex);
   11547:	83 ec 0c             	sub    $0xc,%esp
   1154a:	68 c0 49 03 00       	push   $0x349c0
   1154f:	e8 e7 67 00 00       	call   17d3b <mutex_init>
   11554:	83 c4 10             	add    $0x10,%esp

    //数据段和代码段，使用DPL3，所有应用共用同一个
    //为调试方便，暂时使用DPL0
    int sel = gdt_alloc_desc();
   11557:	e8 da 10 00 00       	call   12636 <gdt_alloc_desc>
   1155c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   1155f:	68 f2 40 00 00       	push   $0x40f2
   11564:	6a ff                	push   $0xffffffff
   11566:	6a 00                	push   $0x0
   11568:	ff 75 f4             	pushl  -0xc(%ebp)
   1156b:	e8 c0 0f 00 00       	call   12530 <segment_desc_set>
   11570:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   11573:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11576:	a3 bc d5 01 00       	mov    %eax,0x1d5bc

    sel = gdt_alloc_desc();
   1157b:	e8 b6 10 00 00       	call   12636 <gdt_alloc_desc>
   11580:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   11583:	68 fa 40 00 00       	push   $0x40fa
   11588:	6a ff                	push   $0xffffffff
   1158a:	6a 00                	push   $0x0
   1158c:	ff 75 f4             	pushl  -0xc(%ebp)
   1158f:	e8 9c 0f 00 00       	call   12530 <segment_desc_set>
   11594:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   11597:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1159a:	a3 b8 d5 01 00       	mov    %eax,0x1d5b8

    // 各队列初始化
    list_init(&task_manager.ready_list);
   1159f:	83 ec 0c             	sub    $0xc,%esp
   115a2:	68 04 d0 01 00       	push   $0x1d004
   115a7:	e8 70 72 00 00       	call   1881c <list_init>
   115ac:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   115af:	83 ec 0c             	sub    $0xc,%esp
   115b2:	68 10 d0 01 00       	push   $0x1d010
   115b7:	e8 60 72 00 00       	call   1881c <list_init>
   115bc:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   115bf:	83 ec 0c             	sub    $0xc,%esp
   115c2:	68 1c d0 01 00       	push   $0x1d01c
   115c7:	e8 50 72 00 00       	call   1881c <list_init>
   115cc:	83 c4 10             	add    $0x10,%esp

    // 空闲任务初始化
    task_init(&task_manager.idle_task,
   115cf:	b8 20 15 01 00       	mov    $0x11520,%eax
   115d4:	83 ec 0c             	sub    $0xc,%esp
   115d7:	6a 00                	push   $0x0
   115d9:	50                   	push   %eax
   115da:	6a 01                	push   $0x1
   115dc:	68 02 8f 01 00       	push   $0x18f02
   115e1:	68 f0 d2 01 00       	push   $0x1d2f0
   115e6:	e8 12 fc ff ff       	call   111fd <task_init>
   115eb:	83 c4 20             	add    $0x20,%esp
                "idle task",
                TASK_FLAG_SYSTEM,
                (uint32_t)idle_task_entry,
                0);     // 运行于内核模式，无需指定特权级3的栈
    task_manager.curr_task = (task_t *)0;
   115ee:	c7 05 00 d0 01 00 00 	movl   $0x0,0x1d000
   115f5:	00 00 00 
    task_start(&task_manager.idle_task);
   115f8:	83 ec 0c             	sub    $0xc,%esp
   115fb:	68 f0 d2 01 00       	push   $0x1d2f0
   11600:	e8 44 fd ff ff       	call   11349 <task_start>
   11605:	83 c4 10             	add    $0x10,%esp
}
   11608:	90                   	nop
   11609:	c9                   	leave  
   1160a:	c3                   	ret    

0001160b <task_set_ready>:

/**
 * @brief 将任务插入就绪队列
 */
void task_set_ready(task_t *task) {
   1160b:	55                   	push   %ebp
   1160c:	89 e5                	mov    %esp,%ebp
   1160e:	83 ec 08             	sub    $0x8,%esp
    if (task != &task_manager.idle_task) {
   11611:	81 7d 08 f0 d2 01 00 	cmpl   $0x1d2f0,0x8(%ebp)
   11618:	74 22                	je     1163c <task_set_ready+0x31>
        list_insert_last(&task_manager.ready_list, &task->run_node);
   1161a:	8b 45 08             	mov    0x8(%ebp),%eax
   1161d:	05 b0 02 00 00       	add    $0x2b0,%eax
   11622:	83 ec 08             	sub    $0x8,%esp
   11625:	50                   	push   %eax
   11626:	68 04 d0 01 00       	push   $0x1d004
   1162b:	e8 70 72 00 00       	call   188a0 <list_insert_last>
   11630:	83 c4 10             	add    $0x10,%esp
        task->state = TASK_READY;
   11633:	8b 45 08             	mov    0x8(%ebp),%eax
   11636:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    }
}
   1163c:	90                   	nop
   1163d:	c9                   	leave  
   1163e:	c3                   	ret    

0001163f <task_set_block>:

/**
 * @brief 将任务从就绪队列移除
 */
void task_set_block (task_t *task) {
   1163f:	55                   	push   %ebp
   11640:	89 e5                	mov    %esp,%ebp
   11642:	83 ec 08             	sub    $0x8,%esp
    if (task != &task_manager.idle_task) {
   11645:	81 7d 08 f0 d2 01 00 	cmpl   $0x1d2f0,0x8(%ebp)
   1164c:	74 19                	je     11667 <task_set_block+0x28>
        list_remove(&task_manager.ready_list, &task->run_node);
   1164e:	8b 45 08             	mov    0x8(%ebp),%eax
   11651:	05 b0 02 00 00       	add    $0x2b0,%eax
   11656:	83 ec 08             	sub    $0x8,%esp
   11659:	50                   	push   %eax
   1165a:	68 04 d0 01 00       	push   $0x1d004
   1165f:	e8 18 73 00 00       	call   1897c <list_remove>
   11664:	83 c4 10             	add    $0x10,%esp
    }
}
   11667:	90                   	nop
   11668:	c9                   	leave  
   11669:	c3                   	ret    

0001166a <task_next_run>:
/**
 * @brief 获取下一将要运行的任务
 */
static task_t * task_next_run (void) {
   1166a:	55                   	push   %ebp
   1166b:	89 e5                	mov    %esp,%ebp
   1166d:	83 ec 10             	sub    $0x10,%esp
    // 如果没有任务，则运行空闲任务
    if (list_count(&task_manager.ready_list) == 0) {
   11670:	68 04 d0 01 00       	push   $0x1d004
   11675:	e8 90 f9 ff ff       	call   1100a <list_count>
   1167a:	83 c4 04             	add    $0x4,%esp
   1167d:	85 c0                	test   %eax,%eax
   1167f:	75 07                	jne    11688 <task_next_run+0x1e>
        return &task_manager.idle_task;
   11681:	b8 f0 d2 01 00       	mov    $0x1d2f0,%eax
   11686:	eb 25                	jmp    116ad <task_next_run+0x43>
    }
    
    // 普通任务
    list_node_t * task_node = list_first(&task_manager.ready_list);
   11688:	68 04 d0 01 00       	push   $0x1d004
   1168d:	e8 83 f9 ff ff       	call   11015 <list_first>
   11692:	83 c4 04             	add    $0x4,%esp
   11695:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   11698:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1169c:	74 0a                	je     116a8 <task_next_run+0x3e>
   1169e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116a1:	2d b0 02 00 00       	sub    $0x2b0,%eax
   116a6:	eb 05                	jmp    116ad <task_next_run+0x43>
   116a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   116ad:	c9                   	leave  
   116ae:	c3                   	ret    

000116af <task_set_sleep>:

/**
 * @brief 将任务加入睡眠状态
 */
void task_set_sleep(task_t *task, uint32_t ticks) {
   116af:	55                   	push   %ebp
   116b0:	89 e5                	mov    %esp,%ebp
   116b2:	83 ec 08             	sub    $0x8,%esp
    if (ticks <= 0) {
   116b5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   116b9:	74 2d                	je     116e8 <task_set_sleep+0x39>
        return;
    }

    task->sleep_ticks = ticks;
   116bb:	8b 55 0c             	mov    0xc(%ebp),%edx
   116be:	8b 45 08             	mov    0x8(%ebp),%eax
   116c1:	89 50 38             	mov    %edx,0x38(%eax)
    task->state = TASK_SLEEP;
   116c4:	8b 45 08             	mov    0x8(%ebp),%eax
   116c7:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   116cd:	8b 45 08             	mov    0x8(%ebp),%eax
   116d0:	05 b0 02 00 00       	add    $0x2b0,%eax
   116d5:	83 ec 08             	sub    $0x8,%esp
   116d8:	50                   	push   %eax
   116d9:	68 1c d0 01 00       	push   $0x1d01c
   116de:	e8 bd 71 00 00       	call   188a0 <list_insert_last>
   116e3:	83 c4 10             	add    $0x10,%esp
   116e6:	eb 01                	jmp    116e9 <task_set_sleep+0x3a>
        return;
   116e8:	90                   	nop
}
   116e9:	c9                   	leave  
   116ea:	c3                   	ret    

000116eb <task_set_wakeup>:
/**
 * @brief 将任务从延时队列移除
 * 
 * @param task 
 */
void task_set_wakeup (task_t *task) {
   116eb:	55                   	push   %ebp
   116ec:	89 e5                	mov    %esp,%ebp
   116ee:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   116f1:	8b 45 08             	mov    0x8(%ebp),%eax
   116f4:	05 b0 02 00 00       	add    $0x2b0,%eax
   116f9:	83 ec 08             	sub    $0x8,%esp
   116fc:	50                   	push   %eax
   116fd:	68 1c d0 01 00       	push   $0x1d01c
   11702:	e8 75 72 00 00       	call   1897c <list_remove>
   11707:	83 c4 10             	add    $0x10,%esp
}
   1170a:	90                   	nop
   1170b:	c9                   	leave  
   1170c:	c3                   	ret    

0001170d <task_current>:

/**
 * @brief 获取当前正在运行的任务
 */
task_t * task_current (void) {
   1170d:	55                   	push   %ebp
   1170e:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   11710:	a1 00 d0 01 00       	mov    0x1d000,%eax
}
   11715:	5d                   	pop    %ebp
   11716:	c3                   	ret    

00011717 <task_file>:

/**
 * @brief 获取当前进程指定的文件描述符
 */
file_t * task_file (int fd) {
   11717:	55                   	push   %ebp
   11718:	89 e5                	mov    %esp,%ebp
   1171a:	83 ec 10             	sub    $0x10,%esp
    if ((fd >= 0) && (fd < TASK_OFILE_NR)) {
   1171d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11721:	78 1f                	js     11742 <task_file+0x2b>
   11723:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11727:	7f 19                	jg     11742 <task_file+0x2b>
        file_t * file = task_current()->file_table[fd];
   11729:	e8 df ff ff ff       	call   1170d <task_current>
   1172e:	89 c2                	mov    %eax,%edx
   11730:	8b 45 08             	mov    0x8(%ebp),%eax
   11733:	83 c0 10             	add    $0x10,%eax
   11736:	8b 44 82 04          	mov    0x4(%edx,%eax,4),%eax
   1173a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        return file;
   1173d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11740:	eb 05                	jmp    11747 <task_file+0x30>
    }

    return (file_t *)0;
   11742:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11747:	c9                   	leave  
   11748:	c3                   	ret    

00011749 <task_alloc_fd>:

/**
 * @brief 为指定的file分配一个新的文件id
 */
int task_alloc_fd (file_t * file) {
   11749:	55                   	push   %ebp
   1174a:	89 e5                	mov    %esp,%ebp
   1174c:	83 ec 10             	sub    $0x10,%esp
    task_t * task = task_current();
   1174f:	e8 b9 ff ff ff       	call   1170d <task_current>
   11754:	89 45 f8             	mov    %eax,-0x8(%ebp)

    for (int i = 0; i < TASK_OFILE_NR; i++) {
   11757:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1175e:	eb 2f                	jmp    1178f <task_alloc_fd+0x46>
        file_t * p = task->file_table[i];
   11760:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11763:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11766:	83 c2 10             	add    $0x10,%edx
   11769:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   1176d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p == (file_t *)0) {
   11770:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11774:	75 15                	jne    1178b <task_alloc_fd+0x42>
            task->file_table[i] = file;
   11776:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11779:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1177c:	8d 4a 10             	lea    0x10(%edx),%ecx
   1177f:	8b 55 08             	mov    0x8(%ebp),%edx
   11782:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
            return i;
   11786:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11789:	eb 0f                	jmp    1179a <task_alloc_fd+0x51>
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   1178b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1178f:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   11793:	7e cb                	jle    11760 <task_alloc_fd+0x17>
        }
    }

    return -1;
   11795:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1179a:	c9                   	leave  
   1179b:	c3                   	ret    

0001179c <task_remove_fd>:

/**
 * @brief 移除任务中打开的文件fd
 */
void task_remove_fd (int fd) {
   1179c:	55                   	push   %ebp
   1179d:	89 e5                	mov    %esp,%ebp
    if ((fd >= 0) && (fd < TASK_OFILE_NR)) {
   1179f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   117a3:	78 1b                	js     117c0 <task_remove_fd+0x24>
   117a5:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   117a9:	7f 15                	jg     117c0 <task_remove_fd+0x24>
        task_current()->file_table[fd] = (file_t *)0;
   117ab:	e8 5d ff ff ff       	call   1170d <task_current>
   117b0:	89 c2                	mov    %eax,%edx
   117b2:	8b 45 08             	mov    0x8(%ebp),%eax
   117b5:	83 c0 10             	add    $0x10,%eax
   117b8:	c7 44 82 04 00 00 00 	movl   $0x0,0x4(%edx,%eax,4)
   117bf:	00 
    }
}
   117c0:	90                   	nop
   117c1:	5d                   	pop    %ebp
   117c2:	c3                   	ret    

000117c3 <sys_yield>:

/**
 * @brief 当前任务主动放弃CPU
 */
int sys_yield (void) {
   117c3:	55                   	push   %ebp
   117c4:	89 e5                	mov    %esp,%ebp
   117c6:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   117c9:	e8 44 19 00 00       	call   13112 <irq_enter_protection>
   117ce:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&task_manager.ready_list) > 1) {
   117d1:	83 ec 0c             	sub    $0xc,%esp
   117d4:	68 04 d0 01 00       	push   $0x1d004
   117d9:	e8 2c f8 ff ff       	call   1100a <list_count>
   117de:	83 c4 10             	add    $0x10,%esp
   117e1:	83 f8 01             	cmp    $0x1,%eax
   117e4:	7e 29                	jle    1180f <sys_yield+0x4c>
        task_t * curr_task = task_current();
   117e6:	e8 22 ff ff ff       	call   1170d <task_current>
   117eb:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 如果队列中还有其它任务，则将当前任务移入到队列尾部
        task_set_block(curr_task);
   117ee:	83 ec 0c             	sub    $0xc,%esp
   117f1:	ff 75 f0             	pushl  -0x10(%ebp)
   117f4:	e8 46 fe ff ff       	call   1163f <task_set_block>
   117f9:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   117fc:	83 ec 0c             	sub    $0xc,%esp
   117ff:	ff 75 f0             	pushl  -0x10(%ebp)
   11802:	e8 04 fe ff ff       	call   1160b <task_set_ready>
   11807:	83 c4 10             	add    $0x10,%esp

        // 切换至下一个任务，在切换完成前要保护，不然可能下一任务
        // 由于某些原因运行后阻塞或删除，再回到这里切换将发生问题
        task_dispatch();
   1180a:	e8 15 00 00 00       	call   11824 <task_dispatch>
    }
    irq_leave_protection(state);
   1180f:	83 ec 0c             	sub    $0xc,%esp
   11812:	ff 75 f4             	pushl  -0xc(%ebp)
   11815:	e8 10 19 00 00       	call   1312a <irq_leave_protection>
   1181a:	83 c4 10             	add    $0x10,%esp

    return 0;
   1181d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11822:	c9                   	leave  
   11823:	c3                   	ret    

00011824 <task_dispatch>:

/**
 * @brief 进行一次任务调度
 */
void task_dispatch (void) {
   11824:	55                   	push   %ebp
   11825:	89 e5                	mov    %esp,%ebp
   11827:	83 ec 18             	sub    $0x18,%esp
    task_t * to = task_next_run();
   1182a:	e8 3b fe ff ff       	call   1166a <task_next_run>
   1182f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (to != task_manager.curr_task) {
   11832:	a1 00 d0 01 00       	mov    0x1d000,%eax
   11837:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1183a:	74 21                	je     1185d <task_dispatch+0x39>
        task_t * from = task_manager.curr_task;
   1183c:	a1 00 d0 01 00       	mov    0x1d000,%eax
   11841:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_manager.curr_task = to;
   11844:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11847:	a3 00 d0 01 00       	mov    %eax,0x1d000
        task_switch_from_to(from, to);
   1184c:	83 ec 08             	sub    $0x8,%esp
   1184f:	ff 75 f4             	pushl  -0xc(%ebp)
   11852:	ff 75 f0             	pushl  -0x10(%ebp)
   11855:	e8 ab fb ff ff       	call   11405 <task_switch_from_to>
   1185a:	83 c4 10             	add    $0x10,%esp
    }
}
   1185d:	90                   	nop
   1185e:	c9                   	leave  
   1185f:	c3                   	ret    

00011860 <task_time_tick>:

/**
 * @brief 时间处理
 * 该函数在中断处理函数中调用
 */
void task_time_tick (void) {
   11860:	55                   	push   %ebp
   11861:	89 e5                	mov    %esp,%ebp
   11863:	83 ec 28             	sub    $0x28,%esp
    task_t * curr_task = task_current();
   11866:	e8 a2 fe ff ff       	call   1170d <task_current>
   1186b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 时间片的处理
    irq_state_t state = irq_enter_protection();
   1186e:	e8 9f 18 00 00       	call   13112 <irq_enter_protection>
   11873:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (--curr_task->slice_ticks == 0) {
   11876:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11879:	8b 40 40             	mov    0x40(%eax),%eax
   1187c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1187f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11882:	89 50 40             	mov    %edx,0x40(%eax)
   11885:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11888:	8b 40 40             	mov    0x40(%eax),%eax
   1188b:	85 c0                	test   %eax,%eax
   1188d:	75 28                	jne    118b7 <task_time_tick+0x57>
        // 时间片用完，重新加载时间片
        // 对于空闲任务，此处减未用
        curr_task->slice_ticks = curr_task->time_slice;
   1188f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11892:	8b 50 3c             	mov    0x3c(%eax),%edx
   11895:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11898:	89 50 40             	mov    %edx,0x40(%eax)

        // 调整队列的位置到尾部，不用直接操作队列
        task_set_block(curr_task);
   1189b:	83 ec 0c             	sub    $0xc,%esp
   1189e:	ff 75 f0             	pushl  -0x10(%ebp)
   118a1:	e8 99 fd ff ff       	call   1163f <task_set_block>
   118a6:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   118a9:	83 ec 0c             	sub    $0xc,%esp
   118ac:	ff 75 f0             	pushl  -0x10(%ebp)
   118af:	e8 57 fd ff ff       	call   1160b <task_set_ready>
   118b4:	83 c4 10             	add    $0x10,%esp
    }
    
    // 睡眠处理
    list_node_t * curr = list_first(&task_manager.sleep_list);
   118b7:	83 ec 0c             	sub    $0xc,%esp
   118ba:	68 1c d0 01 00       	push   $0x1d01c
   118bf:	e8 51 f7 ff ff       	call   11015 <list_first>
   118c4:	83 c4 10             	add    $0x10,%esp
   118c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   118ca:	eb 64                	jmp    11930 <task_time_tick+0xd0>
        list_node_t * next = list_node_next(curr);
   118cc:	83 ec 0c             	sub    $0xc,%esp
   118cf:	ff 75 f4             	pushl  -0xc(%ebp)
   118d2:	e8 28 f7 ff ff       	call   10fff <list_node_next>
   118d7:	83 c4 10             	add    $0x10,%esp
   118da:	89 45 e8             	mov    %eax,-0x18(%ebp)

        task_t * task = list_node_parent(curr, task_t, run_node);
   118dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   118e1:	74 0a                	je     118ed <task_time_tick+0x8d>
   118e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118e6:	2d b0 02 00 00       	sub    $0x2b0,%eax
   118eb:	eb 05                	jmp    118f2 <task_time_tick+0x92>
   118ed:	b8 00 00 00 00       	mov    $0x0,%eax
   118f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (--task->sleep_ticks == 0) {
   118f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   118f8:	8b 40 38             	mov    0x38(%eax),%eax
   118fb:	8d 50 ff             	lea    -0x1(%eax),%edx
   118fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11901:	89 50 38             	mov    %edx,0x38(%eax)
   11904:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11907:	8b 40 38             	mov    0x38(%eax),%eax
   1190a:	85 c0                	test   %eax,%eax
   1190c:	75 1c                	jne    1192a <task_time_tick+0xca>
            // 延时时间到达，从睡眠队列中移除，送至就绪队列
            task_set_wakeup(task);
   1190e:	83 ec 0c             	sub    $0xc,%esp
   11911:	ff 75 e4             	pushl  -0x1c(%ebp)
   11914:	e8 d2 fd ff ff       	call   116eb <task_set_wakeup>
   11919:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   1191c:	83 ec 0c             	sub    $0xc,%esp
   1191f:	ff 75 e4             	pushl  -0x1c(%ebp)
   11922:	e8 e4 fc ff ff       	call   1160b <task_set_ready>
   11927:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   1192a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1192d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   11930:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11934:	75 96                	jne    118cc <task_time_tick+0x6c>
    }

    task_dispatch();
   11936:	e8 e9 fe ff ff       	call   11824 <task_dispatch>
    irq_leave_protection(state);
   1193b:	83 ec 0c             	sub    $0xc,%esp
   1193e:	ff 75 ec             	pushl  -0x14(%ebp)
   11941:	e8 e4 17 00 00       	call   1312a <irq_leave_protection>
   11946:	83 c4 10             	add    $0x10,%esp
}
   11949:	90                   	nop
   1194a:	c9                   	leave  
   1194b:	c3                   	ret    

0001194c <alloc_task>:

/**
 * @brief 分配一个任务结构
 */
static task_t * alloc_task (void) {
   1194c:	55                   	push   %ebp
   1194d:	89 e5                	mov    %esp,%ebp
   1194f:	83 ec 18             	sub    $0x18,%esp
    task_t * task = (task_t *)0;
   11952:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_mutex);
   11959:	83 ec 0c             	sub    $0xc,%esp
   1195c:	68 c0 49 03 00       	push   $0x349c0
   11961:	e8 03 64 00 00       	call   17d69 <mutex_lock>
   11966:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_NR; i++) {
   11969:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11970:	eb 28                	jmp    1199a <alloc_task+0x4e>
        task_t * curr = task_table + i;
   11972:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11975:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   1197b:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   11980:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->name[0] == 0) {
   11983:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11986:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   1198a:	84 c0                	test   %al,%al
   1198c:	75 08                	jne    11996 <alloc_task+0x4a>
            task = curr;
   1198e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11991:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   11994:	eb 0a                	jmp    119a0 <alloc_task+0x54>
    for (int i = 0; i < TASK_NR; i++) {
   11996:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1199a:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   1199e:	7e d2                	jle    11972 <alloc_task+0x26>
        }
    }
    mutex_unlock(&task_table_mutex);
   119a0:	83 ec 0c             	sub    $0xc,%esp
   119a3:	68 c0 49 03 00       	push   $0x349c0
   119a8:	e8 53 64 00 00       	call   17e00 <mutex_unlock>
   119ad:	83 c4 10             	add    $0x10,%esp

    return task;
   119b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   119b3:	c9                   	leave  
   119b4:	c3                   	ret    

000119b5 <free_task>:

/**
 * @brief 释放任务结构
 */
static void free_task (task_t * task) {
   119b5:	55                   	push   %ebp
   119b6:	89 e5                	mov    %esp,%ebp
   119b8:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_mutex);
   119bb:	83 ec 0c             	sub    $0xc,%esp
   119be:	68 c0 49 03 00       	push   $0x349c0
   119c3:	e8 a1 63 00 00       	call   17d69 <mutex_lock>
   119c8:	83 c4 10             	add    $0x10,%esp
    task->name[0] = 0;
   119cb:	8b 45 08             	mov    0x8(%ebp),%eax
   119ce:	c6 40 04 00          	movb   $0x0,0x4(%eax)
    mutex_unlock(&task_table_mutex);
   119d2:	83 ec 0c             	sub    $0xc,%esp
   119d5:	68 c0 49 03 00       	push   $0x349c0
   119da:	e8 21 64 00 00       	call   17e00 <mutex_unlock>
   119df:	83 c4 10             	add    $0x10,%esp
}
   119e2:	90                   	nop
   119e3:	c9                   	leave  
   119e4:	c3                   	ret    

000119e5 <sys_msleep>:
/**
 * @brief 任务进入睡眠状态
 * 
 * @param ms 
 */
void sys_msleep (uint32_t ms) {
   119e5:	55                   	push   %ebp
   119e6:	89 e5                	mov    %esp,%ebp
   119e8:	83 ec 18             	sub    $0x18,%esp
    // 至少延时1个tick
    if (ms < OS_TICK_MS) {
   119eb:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
   119ef:	77 07                	ja     119f8 <sys_msleep+0x13>
        ms = OS_TICK_MS;
   119f1:	c7 45 08 0a 00 00 00 	movl   $0xa,0x8(%ebp)
    }

    irq_state_t state = irq_enter_protection();
   119f8:	e8 15 17 00 00       	call   13112 <irq_enter_protection>
   119fd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 从就绪队列移除，加入睡眠队列
    task_set_block(task_manager.curr_task);
   11a00:	a1 00 d0 01 00       	mov    0x1d000,%eax
   11a05:	83 ec 0c             	sub    $0xc,%esp
   11a08:	50                   	push   %eax
   11a09:	e8 31 fc ff ff       	call   1163f <task_set_block>
   11a0e:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICK_MS - 1))/ OS_TICK_MS);
   11a11:	8b 45 08             	mov    0x8(%ebp),%eax
   11a14:	83 c0 09             	add    $0x9,%eax
   11a17:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11a1c:	f7 e2                	mul    %edx
   11a1e:	c1 ea 03             	shr    $0x3,%edx
   11a21:	a1 00 d0 01 00       	mov    0x1d000,%eax
   11a26:	83 ec 08             	sub    $0x8,%esp
   11a29:	52                   	push   %edx
   11a2a:	50                   	push   %eax
   11a2b:	e8 7f fc ff ff       	call   116af <task_set_sleep>
   11a30:	83 c4 10             	add    $0x10,%esp
    
    // 进行一次调度
    task_dispatch();
   11a33:	e8 ec fd ff ff       	call   11824 <task_dispatch>

    irq_leave_protection(state);
   11a38:	83 ec 0c             	sub    $0xc,%esp
   11a3b:	ff 75 f4             	pushl  -0xc(%ebp)
   11a3e:	e8 e7 16 00 00       	call   1312a <irq_leave_protection>
   11a43:	83 c4 10             	add    $0x10,%esp
}
   11a46:	90                   	nop
   11a47:	c9                   	leave  
   11a48:	c3                   	ret    

00011a49 <copy_opened_files>:


/**
 * @brief 从当前进程中拷贝已经打开的文件列表
 */
static void copy_opened_files(task_t * child_task) {
   11a49:	55                   	push   %ebp
   11a4a:	89 e5                	mov    %esp,%ebp
   11a4c:	83 ec 18             	sub    $0x18,%esp
    task_t * parent = task_current();
   11a4f:	e8 b9 fc ff ff       	call   1170d <task_current>
   11a54:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (int i = 0; i < TASK_OFILE_NR; i++) {
   11a57:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11a5e:	eb 42                	jmp    11aa2 <copy_opened_files+0x59>
        file_t * file = parent->file_table[i];
   11a60:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a63:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11a66:	83 c2 10             	add    $0x10,%edx
   11a69:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   11a6d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (file) {
   11a70:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11a74:	74 28                	je     11a9e <copy_opened_files+0x55>
            file_inc_ref(file);
   11a76:	83 ec 0c             	sub    $0xc,%esp
   11a79:	ff 75 ec             	pushl  -0x14(%ebp)
   11a7c:	e8 fd 54 00 00       	call   16f7e <file_inc_ref>
   11a81:	83 c4 10             	add    $0x10,%esp
            child_task->file_table[i] = parent->file_table[i];
   11a84:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a87:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11a8a:	83 c2 10             	add    $0x10,%edx
   11a8d:	8b 54 90 04          	mov    0x4(%eax,%edx,4),%edx
   11a91:	8b 45 08             	mov    0x8(%ebp),%eax
   11a94:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   11a97:	83 c1 10             	add    $0x10,%ecx
   11a9a:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   11a9e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11aa2:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11aa6:	7e b8                	jle    11a60 <copy_opened_files+0x17>
        }
    }
}
   11aa8:	90                   	nop
   11aa9:	c9                   	leave  
   11aaa:	c3                   	ret    

00011aab <sys_fork>:

/**
 * @brief 创建进程的副本
 */
int sys_fork (void) {
   11aab:	55                   	push   %ebp
   11aac:	89 e5                	mov    %esp,%ebp
   11aae:	83 ec 28             	sub    $0x28,%esp
    task_t * parent_task = task_current();
   11ab1:	e8 57 fc ff ff       	call   1170d <task_current>
   11ab6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 分配任务结构
    task_t * child_task = alloc_task();
   11ab9:	e8 8e fe ff ff       	call   1194c <alloc_task>
   11abe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t *)0) {
   11ac1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11ac5:	0f 84 4f 01 00 00    	je     11c1a <sys_fork+0x16f>
        goto fork_failed;
    }

    syscall_frame_t * frame = (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11acb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ace:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   11ad4:	83 e8 58             	sub    $0x58,%eax
   11ad7:	89 45 ec             	mov    %eax,-0x14(%ebp)

    // 对子进程进行初始化，并对必要的字段进行调整
    // 其中esp要减去系统调用的总参数字节大小，因为其是通过正常的ret返回, 而没有走系统调用处理的ret(参数个数返回)
    int err = task_init(child_task,  parent_task->name, 0, frame->eip,
                        frame->esp + sizeof(uint32_t)*SYSCALL_PARAM_COUNT);
   11ada:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11add:	8b 40 50             	mov    0x50(%eax),%eax
   11ae0:	8d 50 14             	lea    0x14(%eax),%edx
    int err = task_init(child_task,  parent_task->name, 0, frame->eip,
   11ae3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ae6:	8b 40 34             	mov    0x34(%eax),%eax
   11ae9:	89 c1                	mov    %eax,%ecx
   11aeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11aee:	83 c0 04             	add    $0x4,%eax
   11af1:	83 ec 0c             	sub    $0xc,%esp
   11af4:	52                   	push   %edx
   11af5:	51                   	push   %ecx
   11af6:	6a 00                	push   $0x0
   11af8:	50                   	push   %eax
   11af9:	ff 75 f0             	pushl  -0x10(%ebp)
   11afc:	e8 fc f6 ff ff       	call   111fd <task_init>
   11b01:	83 c4 20             	add    $0x20,%esp
   11b04:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   11b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11b0b:	0f 88 0c 01 00 00    	js     11c1d <sys_fork+0x172>
        goto fork_failed;
    }

    // 拷贝打开的文件
    copy_opened_files(child_task);
   11b11:	83 ec 0c             	sub    $0xc,%esp
   11b14:	ff 75 f0             	pushl  -0x10(%ebp)
   11b17:	e8 2d ff ff ff       	call   11a49 <copy_opened_files>
   11b1c:	83 c4 10             	add    $0x10,%esp

    // 从父进程的栈中取部分状态，然后写入tss。
    // 注意检查esp, eip等是否在用户空间范围内，不然会造成page_fault
    tss_t * tss = &child_task->tss;
   11b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b22:	05 44 02 00 00       	add    $0x244,%eax
   11b27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    tss->eax = 0;                       // 子进程返回0
   11b2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b2d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11b34:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b37:	8b 40 24             	mov    0x24(%eax),%eax
   11b3a:	89 c2                	mov    %eax,%edx
   11b3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b3f:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11b42:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b45:	8b 40 2c             	mov    0x2c(%eax),%eax
   11b48:	89 c2                	mov    %eax,%edx
   11b4a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b4d:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11b50:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b53:	8b 40 28             	mov    0x28(%eax),%eax
   11b56:	89 c2                	mov    %eax,%edx
   11b58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b5b:	89 50 30             	mov    %edx,0x30(%eax)
    tss->esi = frame->esi;
   11b5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b61:	8b 40 18             	mov    0x18(%eax),%eax
   11b64:	89 c2                	mov    %eax,%edx
   11b66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b69:	89 50 40             	mov    %edx,0x40(%eax)
    tss->edi = frame->edi;
   11b6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b6f:	8b 40 14             	mov    0x14(%eax),%eax
   11b72:	89 c2                	mov    %eax,%edx
   11b74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b77:	89 50 44             	mov    %edx,0x44(%eax)
    tss->ebp = frame->ebp;
   11b7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b7d:	8b 40 1c             	mov    0x1c(%eax),%eax
   11b80:	89 c2                	mov    %eax,%edx
   11b82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b85:	89 50 3c             	mov    %edx,0x3c(%eax)

    tss->cs = frame->cs;
   11b88:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b8b:	8b 40 38             	mov    0x38(%eax),%eax
   11b8e:	89 c2                	mov    %eax,%edx
   11b90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b93:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11b96:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b99:	8b 40 10             	mov    0x10(%eax),%eax
   11b9c:	89 c2                	mov    %eax,%edx
   11b9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ba1:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11ba4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ba7:	8b 40 0c             	mov    0xc(%eax),%eax
   11baa:	89 c2                	mov    %eax,%edx
   11bac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11baf:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11bb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bb5:	8b 40 08             	mov    0x8(%eax),%eax
   11bb8:	89 c2                	mov    %eax,%edx
   11bba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bbd:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11bc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bc3:	8b 40 04             	mov    0x4(%eax),%eax
   11bc6:	89 c2                	mov    %eax,%edx
   11bc8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bcb:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->eflags = frame->eflags;
   11bce:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bd1:	8b 00                	mov    (%eax),%eax
   11bd3:	89 c2                	mov    %eax,%edx
   11bd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bd8:	89 50 24             	mov    %edx,0x24(%eax)

    child_task->parent = parent_task;
   11bdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bde:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11be1:	89 50 28             	mov    %edx,0x28(%eax)

    // 复制父进程的内存空间到子进程
    if ((child_task->tss.cr3 = memory_copy_uvm(parent_task->tss.cr3)) < 0) {
   11be4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11be7:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   11bed:	83 ec 0c             	sub    $0xc,%esp
   11bf0:	50                   	push   %eax
   11bf1:	e8 50 ed ff ff       	call   10946 <memory_copy_uvm>
   11bf6:	83 c4 10             	add    $0x10,%esp
   11bf9:	89 c2                	mov    %eax,%edx
   11bfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bfe:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
        goto fork_failed;
    }

    // 创建成功，返回子进程的pid
    task_start(child_task);
   11c04:	83 ec 0c             	sub    $0xc,%esp
   11c07:	ff 75 f0             	pushl  -0x10(%ebp)
   11c0a:	e8 3a f7 ff ff       	call   11349 <task_start>
   11c0f:	83 c4 10             	add    $0x10,%esp
    return child_task->pid;
   11c12:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c15:	8b 40 24             	mov    0x24(%eax),%eax
   11c18:	eb 2b                	jmp    11c45 <sys_fork+0x19a>
        goto fork_failed;
   11c1a:	90                   	nop
   11c1b:	eb 01                	jmp    11c1e <sys_fork+0x173>
        goto fork_failed;
   11c1d:	90                   	nop
fork_failed:
    if (child_task) {
   11c1e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11c22:	74 1c                	je     11c40 <sys_fork+0x195>
        task_uninit (child_task);
   11c24:	83 ec 0c             	sub    $0xc,%esp
   11c27:	ff 75 f0             	pushl  -0x10(%ebp)
   11c2a:	e8 47 f7 ff ff       	call   11376 <task_uninit>
   11c2f:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11c32:	83 ec 0c             	sub    $0xc,%esp
   11c35:	ff 75 f0             	pushl  -0x10(%ebp)
   11c38:	e8 78 fd ff ff       	call   119b5 <free_task>
   11c3d:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11c40:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11c45:	c9                   	leave  
   11c46:	c3                   	ret    

00011c47 <load_phdr>:

/**
 * @brief 加载一个程序表头的数据到内存中
 */
static int load_phdr(int file, Elf32_Phdr * phdr, uint32_t page_dir) {
   11c47:	55                   	push   %ebp
   11c48:	89 e5                	mov    %esp,%ebp
   11c4a:	83 ec 28             	sub    $0x28,%esp
    // 生成的ELF文件要求是页边界对齐的
    ASSERT((phdr->p_vaddr & (MEM_PAGE_SIZE - 1)) == 0);
   11c4d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c50:	8b 40 08             	mov    0x8(%eax),%eax
   11c53:	25 ff 0f 00 00       	and    $0xfff,%eax
   11c58:	85 c0                	test   %eax,%eax
   11c5a:	74 1c                	je     11c78 <load_phdr+0x31>
   11c5c:	68 0c 8f 01 00       	push   $0x18f0c
   11c61:	68 20 90 01 00       	push   $0x19020
   11c66:	68 2b 02 00 00       	push   $0x22b
   11c6b:	68 9c 8e 01 00       	push   $0x18e9c
   11c70:	e8 5e 6b 00 00       	call   187d3 <panic>
   11c75:	83 c4 10             	add    $0x10,%esp

    // 分配空间
    int err = memory_alloc_for_page_dir(page_dir, phdr->p_vaddr, phdr->p_memsz, PTE_P | PTE_U | PTE_W);
   11c78:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c7b:	8b 50 14             	mov    0x14(%eax),%edx
   11c7e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c81:	8b 40 08             	mov    0x8(%eax),%eax
   11c84:	6a 07                	push   $0x7
   11c86:	52                   	push   %edx
   11c87:	50                   	push   %eax
   11c88:	ff 75 10             	pushl  0x10(%ebp)
   11c8b:	e8 d4 ee ff ff       	call   10b64 <memory_alloc_for_page_dir>
   11c90:	83 c4 10             	add    $0x10,%esp
   11c93:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   11c96:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11c9a:	79 1a                	jns    11cb6 <load_phdr+0x6f>
        log_printf("no memory");
   11c9c:	83 ec 0c             	sub    $0xc,%esp
   11c9f:	68 37 8f 01 00       	push   $0x18f37
   11ca4:	e8 87 6d 00 00       	call   18a30 <log_printf>
   11ca9:	83 c4 10             	add    $0x10,%esp
        return -1;
   11cac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11cb1:	e9 b8 00 00 00       	jmp    11d6e <load_phdr+0x127>
    }

    // 调整当前的读写位置
    if (sys_lseek(file, phdr->p_offset, 0) < 0) {
   11cb6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cb9:	8b 40 04             	mov    0x4(%eax),%eax
   11cbc:	83 ec 04             	sub    $0x4,%esp
   11cbf:	6a 00                	push   $0x0
   11cc1:	50                   	push   %eax
   11cc2:	ff 75 08             	pushl  0x8(%ebp)
   11cc5:	e8 b1 5b 00 00       	call   1787b <sys_lseek>
   11cca:	83 c4 10             	add    $0x10,%esp
   11ccd:	85 c0                	test   %eax,%eax
   11ccf:	79 1a                	jns    11ceb <load_phdr+0xa4>
        log_printf("read file failed");
   11cd1:	83 ec 0c             	sub    $0xc,%esp
   11cd4:	68 41 8f 01 00       	push   $0x18f41
   11cd9:	e8 52 6d 00 00       	call   18a30 <log_printf>
   11cde:	83 c4 10             	add    $0x10,%esp
        return -1;
   11ce1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ce6:	e9 83 00 00 00       	jmp    11d6e <load_phdr+0x127>
    }

    // 为段分配所有的内存空间.后续操作如果失败，将在上层释放
    // 简单起见，设置成可写模式，也许可考虑根据phdr->flags设置成只读
    // 因为没有找到该值的详细定义，所以没有加上
    uint32_t vaddr = phdr->p_vaddr;
   11ceb:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cee:	8b 40 08             	mov    0x8(%eax),%eax
   11cf1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t size = phdr->p_filesz;
   11cf4:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cf7:	8b 40 10             	mov    0x10(%eax),%eax
   11cfa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (size > 0) {
   11cfd:	eb 64                	jmp    11d63 <load_phdr+0x11c>
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11cff:	b8 00 10 00 00       	mov    $0x1000,%eax
   11d04:	81 7d f0 00 10 00 00 	cmpl   $0x1000,-0x10(%ebp)
   11d0b:	0f 46 45 f0          	cmovbe -0x10(%ebp),%eax
   11d0f:	89 45 e8             	mov    %eax,-0x18(%ebp)

        uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11d12:	83 ec 08             	sub    $0x8,%esp
   11d15:	ff 75 f4             	pushl  -0xc(%ebp)
   11d18:	ff 75 10             	pushl  0x10(%ebp)
   11d1b:	e8 7b ed ff ff       	call   10a9b <memory_get_paddr>
   11d20:	83 c4 10             	add    $0x10,%esp
   11d23:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        // 注意，这里用的页表仍然是当前的
        if (sys_read(file, (char *)paddr, curr_size) <  curr_size) {
   11d26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d29:	83 ec 04             	sub    $0x4,%esp
   11d2c:	ff 75 e8             	pushl  -0x18(%ebp)
   11d2f:	50                   	push   %eax
   11d30:	ff 75 08             	pushl  0x8(%ebp)
   11d33:	e8 ba 59 00 00       	call   176f2 <sys_read>
   11d38:	83 c4 10             	add    $0x10,%esp
   11d3b:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   11d3e:	7e 17                	jle    11d57 <load_phdr+0x110>
            log_printf("read file failed");
   11d40:	83 ec 0c             	sub    $0xc,%esp
   11d43:	68 41 8f 01 00       	push   $0x18f41
   11d48:	e8 e3 6c 00 00       	call   18a30 <log_printf>
   11d4d:	83 c4 10             	add    $0x10,%esp
            return -1;
   11d50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11d55:	eb 17                	jmp    11d6e <load_phdr+0x127>
        }

        size -= curr_size;
   11d57:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d5a:	29 45 f0             	sub    %eax,-0x10(%ebp)
        vaddr += curr_size;
   11d5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d60:	01 45 f4             	add    %eax,-0xc(%ebp)
    while (size > 0) {
   11d63:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d67:	75 96                	jne    11cff <load_phdr+0xb8>

    // bss区考虑由crt0和cstart自行清0，这样更简单一些
    // 如果在上边进行处理，需要考虑到有可能的跨页表填充数据，懒得写代码
    // 或者也可修改memory_alloc_for_page_dir，增加分配时清0页表，但这样开销较大
    // 所以，直接放在cstart哐crt0中直接内存填0，比较简单
    return 0;
   11d69:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11d6e:	c9                   	leave  
   11d6f:	c3                   	ret    

00011d70 <load_elf_file>:

/**
 * @brief 加载elf文件到内存中
 */
static uint32_t load_elf_file (task_t * task, const char * name, uint32_t page_dir) {
   11d70:	55                   	push   %ebp
   11d71:	89 e5                	mov    %esp,%ebp
   11d73:	83 ec 78             	sub    $0x78,%esp
    Elf32_Ehdr elf_hdr;
    Elf32_Phdr elf_phdr;

    // 以只读方式打开
    int file = sys_open(name, 0);   // todo: flags暂时用0替代
   11d76:	83 ec 08             	sub    $0x8,%esp
   11d79:	6a 00                	push   $0x0
   11d7b:	ff 75 0c             	pushl  0xc(%ebp)
   11d7e:	e8 cb 56 00 00       	call   1744e <sys_open>
   11d83:	83 c4 10             	add    $0x10,%esp
   11d86:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file < 0) {
   11d89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11d8d:	79 18                	jns    11da7 <load_elf_file+0x37>
        log_printf("open file failed.%s", name);
   11d8f:	83 ec 08             	sub    $0x8,%esp
   11d92:	ff 75 0c             	pushl  0xc(%ebp)
   11d95:	68 52 8f 01 00       	push   $0x18f52
   11d9a:	e8 91 6c 00 00       	call   18a30 <log_printf>
   11d9f:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11da2:	e9 c1 01 00 00       	jmp    11f68 <load_elf_file+0x1f8>
    }

    // 先读取文件头
    int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   11da7:	83 ec 04             	sub    $0x4,%esp
   11daa:	6a 34                	push   $0x34
   11dac:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11daf:	50                   	push   %eax
   11db0:	ff 75 ec             	pushl  -0x14(%ebp)
   11db3:	e8 3a 59 00 00       	call   176f2 <sys_read>
   11db8:	83 c4 10             	add    $0x10,%esp
   11dbb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr)) {
   11dbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11dc1:	83 f8 33             	cmp    $0x33,%eax
   11dc4:	77 18                	ja     11dde <load_elf_file+0x6e>
        log_printf("elf hdr too small. size=%d", cnt);
   11dc6:	83 ec 08             	sub    $0x8,%esp
   11dc9:	ff 75 e8             	pushl  -0x18(%ebp)
   11dcc:	68 66 8f 01 00       	push   $0x18f66
   11dd1:	e8 5a 6c 00 00       	call   18a30 <log_printf>
   11dd6:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11dd9:	e9 8a 01 00 00       	jmp    11f68 <load_elf_file+0x1f8>
    }

    // 做点必要性的检查。当然可以再做其它检查
    if ((elf_hdr.e_ident[0] != ELF_MAGIC) || (elf_hdr.e_ident[1] != 'E')
   11dde:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   11de2:	3c 7f                	cmp    $0x7f,%al
   11de4:	75 18                	jne    11dfe <load_elf_file+0x8e>
   11de6:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   11dea:	3c 45                	cmp    $0x45,%al
   11dec:	75 10                	jne    11dfe <load_elf_file+0x8e>
        || (elf_hdr.e_ident[2] != 'L') || (elf_hdr.e_ident[3] != 'F')) {
   11dee:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   11df2:	3c 4c                	cmp    $0x4c,%al
   11df4:	75 08                	jne    11dfe <load_elf_file+0x8e>
   11df6:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   11dfa:	3c 46                	cmp    $0x46,%al
   11dfc:	74 15                	je     11e13 <load_elf_file+0xa3>
        log_printf("check elf indent failed.");
   11dfe:	83 ec 0c             	sub    $0xc,%esp
   11e01:	68 81 8f 01 00       	push   $0x18f81
   11e06:	e8 25 6c 00 00       	call   18a30 <log_printf>
   11e0b:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e0e:	e9 55 01 00 00       	jmp    11f68 <load_elf_file+0x1f8>
    }

    // 必须是可执行文件和针对386处理器的类型，且有入口
    if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != ET_386) || (elf_hdr.e_entry == 0)) {
   11e13:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   11e17:	66 83 f8 02          	cmp    $0x2,%ax
   11e1b:	75 11                	jne    11e2e <load_elf_file+0xbe>
   11e1d:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   11e21:	66 83 f8 03          	cmp    $0x3,%ax
   11e25:	75 07                	jne    11e2e <load_elf_file+0xbe>
   11e27:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11e2a:	85 c0                	test   %eax,%eax
   11e2c:	75 15                	jne    11e43 <load_elf_file+0xd3>
        log_printf("check elf type or entry failed.");
   11e2e:	83 ec 0c             	sub    $0xc,%esp
   11e31:	68 9c 8f 01 00       	push   $0x18f9c
   11e36:	e8 f5 6b 00 00       	call   18a30 <log_printf>
   11e3b:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e3e:	e9 25 01 00 00       	jmp    11f68 <load_elf_file+0x1f8>
    }

    // 必须有程序头部
    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   11e43:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11e47:	66 85 c0             	test   %ax,%ax
   11e4a:	74 07                	je     11e53 <load_elf_file+0xe3>
   11e4c:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11e4f:	85 c0                	test   %eax,%eax
   11e51:	75 15                	jne    11e68 <load_elf_file+0xf8>
        log_printf("none programe header");
   11e53:	83 ec 0c             	sub    $0xc,%esp
   11e56:	68 bc 8f 01 00       	push   $0x18fbc
   11e5b:	e8 d0 6b 00 00       	call   18a30 <log_printf>
   11e60:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e63:	e9 00 01 00 00       	jmp    11f68 <load_elf_file+0x1f8>
    }

    // 然后从中加载程序头，将内容拷贝到相应的位置
    uint32_t e_phoff = elf_hdr.e_phoff;
   11e68:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11e6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize) {
   11e6e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11e75:	e9 cb 00 00 00       	jmp    11f45 <load_elf_file+0x1d5>
        if (sys_lseek(file, e_phoff, 0) < 0) {
   11e7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e7d:	83 ec 04             	sub    $0x4,%esp
   11e80:	6a 00                	push   $0x0
   11e82:	50                   	push   %eax
   11e83:	ff 75 ec             	pushl  -0x14(%ebp)
   11e86:	e8 f0 59 00 00       	call   1787b <sys_lseek>
   11e8b:	83 c4 10             	add    $0x10,%esp
   11e8e:	85 c0                	test   %eax,%eax
   11e90:	79 15                	jns    11ea7 <load_elf_file+0x137>
            log_printf("read file failed");
   11e92:	83 ec 0c             	sub    $0xc,%esp
   11e95:	68 41 8f 01 00       	push   $0x18f41
   11e9a:	e8 91 6b 00 00       	call   18a30 <log_printf>
   11e9f:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11ea2:	e9 c1 00 00 00       	jmp    11f68 <load_elf_file+0x1f8>
        }

        // 读取程序头后解析，这里不用读取到新进程的页表中，因为只是临时使用下
        cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   11ea7:	83 ec 04             	sub    $0x4,%esp
   11eaa:	6a 20                	push   $0x20
   11eac:	8d 45 90             	lea    -0x70(%ebp),%eax
   11eaf:	50                   	push   %eax
   11eb0:	ff 75 ec             	pushl  -0x14(%ebp)
   11eb3:	e8 3a 58 00 00       	call   176f2 <sys_read>
   11eb8:	83 c4 10             	add    $0x10,%esp
   11ebb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr)) {
   11ebe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11ec1:	83 f8 1f             	cmp    $0x1f,%eax
   11ec4:	77 15                	ja     11edb <load_elf_file+0x16b>
            log_printf("read file failed");
   11ec6:	83 ec 0c             	sub    $0xc,%esp
   11ec9:	68 41 8f 01 00       	push   $0x18f41
   11ece:	e8 5d 6b 00 00       	call   18a30 <log_printf>
   11ed3:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11ed6:	e9 8d 00 00 00       	jmp    11f68 <load_elf_file+0x1f8>
        }

        // 简单做一些检查，如有必要，可自行加更多
        // 主要判断是否是可加载的类型，并且要求加载的地址必须是用户空间
        if ((elf_phdr.p_type != PT_LOAD) || (elf_phdr.p_vaddr < MEMORY_TASK_BASE)) {
   11edb:	8b 45 90             	mov    -0x70(%ebp),%eax
   11ede:	83 f8 01             	cmp    $0x1,%eax
   11ee1:	75 53                	jne    11f36 <load_elf_file+0x1c6>
   11ee3:	8b 45 98             	mov    -0x68(%ebp),%eax
   11ee6:	85 c0                	test   %eax,%eax
   11ee8:	79 4c                	jns    11f36 <load_elf_file+0x1c6>
           continue;
        }

        // 加载当前程序头
        int err = load_phdr(file, &elf_phdr, page_dir);
   11eea:	83 ec 04             	sub    $0x4,%esp
   11eed:	ff 75 10             	pushl  0x10(%ebp)
   11ef0:	8d 45 90             	lea    -0x70(%ebp),%eax
   11ef3:	50                   	push   %eax
   11ef4:	ff 75 ec             	pushl  -0x14(%ebp)
   11ef7:	e8 4b fd ff ff       	call   11c47 <load_phdr>
   11efc:	83 c4 10             	add    $0x10,%esp
   11eff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   11f02:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11f06:	79 12                	jns    11f1a <load_elf_file+0x1aa>
            log_printf("load program hdr failed");
   11f08:	83 ec 0c             	sub    $0xc,%esp
   11f0b:	68 d1 8f 01 00       	push   $0x18fd1
   11f10:	e8 1b 6b 00 00       	call   18a30 <log_printf>
   11f15:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11f18:	eb 4e                	jmp    11f68 <load_elf_file+0x1f8>
        }

        // 简单起见，不检查了，以最后的地址为bss的地址
        task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   11f1a:	8b 55 98             	mov    -0x68(%ebp),%edx
   11f1d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   11f20:	01 c2                	add    %eax,%edx
   11f22:	8b 45 08             	mov    0x8(%ebp),%eax
   11f25:	89 50 2c             	mov    %edx,0x2c(%eax)
        task->heap_end = task->heap_start;
   11f28:	8b 45 08             	mov    0x8(%ebp),%eax
   11f2b:	8b 50 2c             	mov    0x2c(%eax),%edx
   11f2e:	8b 45 08             	mov    0x8(%ebp),%eax
   11f31:	89 50 30             	mov    %edx,0x30(%eax)
   11f34:	eb 01                	jmp    11f37 <load_elf_file+0x1c7>
           continue;
   11f36:	90                   	nop
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize) {
   11f37:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11f3b:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11f3f:	0f b7 c0             	movzwl %ax,%eax
   11f42:	01 45 f4             	add    %eax,-0xc(%ebp)
   11f45:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   11f49:	0f b7 c0             	movzwl %ax,%eax
   11f4c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11f4f:	0f 8c 25 ff ff ff    	jl     11e7a <load_elf_file+0x10a>
   }

    sys_close(file);
   11f55:	83 ec 0c             	sub    $0xc,%esp
   11f58:	ff 75 ec             	pushl  -0x14(%ebp)
   11f5b:	e8 b0 59 00 00       	call   17910 <sys_close>
   11f60:	83 c4 10             	add    $0x10,%esp
    return elf_hdr.e_entry;
   11f63:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11f66:	eb 19                	jmp    11f81 <load_elf_file+0x211>

load_failed:
    if (file >= 0) {
   11f68:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11f6c:	78 0e                	js     11f7c <load_elf_file+0x20c>
        sys_close(file);
   11f6e:	83 ec 0c             	sub    $0xc,%esp
   11f71:	ff 75 ec             	pushl  -0x14(%ebp)
   11f74:	e8 97 59 00 00       	call   17910 <sys_close>
   11f79:	83 c4 10             	add    $0x10,%esp
    }

    return 0;
   11f7c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11f81:	c9                   	leave  
   11f82:	c3                   	ret    

00011f83 <copy_args>:

/**
 * @brief 复制进程参数到栈中。注意argv和env指向的空间在另一个页表里
 */
static int copy_args (char * to, uint32_t page_dir, int argc, char **argv) {
   11f83:	55                   	push   %ebp
   11f84:	89 e5                	mov    %esp,%ebp
   11f86:	83 ec 38             	sub    $0x38,%esp
    // 在stack_top中依次写入argc, argv指针，参数字符串
    task_args_t task_args;
    task_args.argc = argc;
   11f89:	8b 45 10             	mov    0x10(%ebp),%eax
   11f8c:	89 45 d8             	mov    %eax,-0x28(%ebp)
    task_args.argv = (char **)(to + sizeof(task_args_t));
   11f8f:	8b 45 08             	mov    0x8(%ebp),%eax
   11f92:	83 c0 0c             	add    $0xc,%eax
   11f95:	89 45 dc             	mov    %eax,-0x24(%ebp)

    // 复制各项参数, 跳过task_args和参数表
    // 各argv参数写入的内存空间
    char * dest_arg = to + sizeof(task_args_t) + sizeof(char *) * (argc + 1);   // 留出结束符
   11f98:	8b 45 10             	mov    0x10(%ebp),%eax
   11f9b:	83 c0 04             	add    $0x4,%eax
   11f9e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11fa5:	8b 45 08             	mov    0x8(%ebp),%eax
   11fa8:	01 d0                	add    %edx,%eax
   11faa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    // argv表
    char ** dest_argv_tb = (char **)memory_get_paddr(page_dir, (uint32_t)(to + sizeof(task_args_t)));
   11fad:	8b 45 08             	mov    0x8(%ebp),%eax
   11fb0:	83 c0 0c             	add    $0xc,%eax
   11fb3:	83 ec 08             	sub    $0x8,%esp
   11fb6:	50                   	push   %eax
   11fb7:	ff 75 0c             	pushl  0xc(%ebp)
   11fba:	e8 dc ea ff ff       	call   10a9b <memory_get_paddr>
   11fbf:	83 c4 10             	add    $0x10,%esp
   11fc2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ASSERT(dest_argv_tb != 0);
   11fc5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11fc9:	75 1c                	jne    11fe7 <copy_args+0x64>
   11fcb:	68 e9 8f 01 00       	push   $0x18fe9
   11fd0:	68 2c 90 01 00       	push   $0x1902c
   11fd5:	68 b8 02 00 00       	push   $0x2b8
   11fda:	68 9c 8e 01 00       	push   $0x18e9c
   11fdf:	e8 ef 67 00 00       	call   187d3 <panic>
   11fe4:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < argc; i++) {
   11fe7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11fee:	e9 82 00 00 00       	jmp    12075 <copy_args+0xf2>
        char * from = argv[i];
   11ff3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ff6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11ffd:	8b 45 14             	mov    0x14(%ebp),%eax
   12000:	01 d0                	add    %edx,%eax
   12002:	8b 00                	mov    (%eax),%eax
   12004:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // 不能用kernel_strcpy，因为to和argv不在一个页表里
        int len = kernel_strlen(from) + 1;   // 包含结束符
   12007:	83 ec 0c             	sub    $0xc,%esp
   1200a:	ff 75 e8             	pushl  -0x18(%ebp)
   1200d:	e8 70 63 00 00       	call   18382 <kernel_strlen>
   12012:	83 c4 10             	add    $0x10,%esp
   12015:	83 c0 01             	add    $0x1,%eax
   12018:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, page_dir, (uint32_t)from, len);
   1201b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   1201e:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12021:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12024:	51                   	push   %ecx
   12025:	52                   	push   %edx
   12026:	ff 75 0c             	pushl  0xc(%ebp)
   12029:	50                   	push   %eax
   1202a:	e8 b2 ea ff ff       	call   10ae1 <memory_copy_uvm_data>
   1202f:	83 c4 10             	add    $0x10,%esp
   12032:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   12035:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12039:	79 1c                	jns    12057 <copy_args+0xd4>
   1203b:	68 fb 8f 01 00       	push   $0x18ffb
   12040:	68 2c 90 01 00       	push   $0x1902c
   12045:	68 c0 02 00 00       	push   $0x2c0
   1204a:	68 9c 8e 01 00       	push   $0x18e9c
   1204f:	e8 7f 67 00 00       	call   187d3 <panic>
   12054:	83 c4 10             	add    $0x10,%esp

        // 关联ar
        dest_argv_tb[i] = dest_arg;
   12057:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1205a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12061:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12064:	01 c2                	add    %eax,%edx
   12066:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12069:	89 02                	mov    %eax,(%edx)

        // 记录下位置后，复制的位置前移
        dest_arg += len;
   1206b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1206e:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; i++) {
   12071:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12075:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12078:	3b 45 10             	cmp    0x10(%ebp),%eax
   1207b:	0f 8c 72 ff ff ff    	jl     11ff3 <copy_args+0x70>
    }

    // 可能存在无参的情况，此时不需要写入
    if (argc) {
   12081:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12085:	74 15                	je     1209c <copy_args+0x119>
        dest_argv_tb[argc] = '\0';
   12087:	8b 45 10             	mov    0x10(%ebp),%eax
   1208a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12091:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12094:	01 d0                	add    %edx,%eax
   12096:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

     // 写入task_args
    return memory_copy_uvm_data((uint32_t)to, page_dir, (uint32_t)&task_args, sizeof(task_args_t));
   1209c:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   1209f:	8b 45 08             	mov    0x8(%ebp),%eax
   120a2:	6a 0c                	push   $0xc
   120a4:	52                   	push   %edx
   120a5:	ff 75 0c             	pushl  0xc(%ebp)
   120a8:	50                   	push   %eax
   120a9:	e8 33 ea ff ff       	call   10ae1 <memory_copy_uvm_data>
   120ae:	83 c4 10             	add    $0x10,%esp
}
   120b1:	c9                   	leave  
   120b2:	c3                   	ret    

000120b3 <sys_execve>:
/**
 * @brief 加载一个进程
 * 这个比较复杂，argv/name/env都是原进程空间中的数据，execve中涉及到页表的切换
 * 在对argv和name进行处理时，会涉及到不同进程空间中数据的传递。
 */
int sys_execve(char *name, char **argv, char **env) {
   120b3:	55                   	push   %ebp
   120b4:	89 e5                	mov    %esp,%ebp
   120b6:	83 ec 28             	sub    $0x28,%esp
    task_t * task = task_current();
   120b9:	e8 4f f6 ff ff       	call   1170d <task_current>
   120be:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 后面会切换页表，所以先处理需要从进程空间取数据的情况
    kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   120c1:	83 ec 0c             	sub    $0xc,%esp
   120c4:	ff 75 08             	pushl  0x8(%ebp)
   120c7:	e8 b9 61 00 00       	call   18285 <get_file_name>
   120cc:	83 c4 10             	add    $0x10,%esp
   120cf:	89 c2                	mov    %eax,%edx
   120d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120d4:	83 c0 04             	add    $0x4,%eax
   120d7:	83 ec 04             	sub    $0x4,%esp
   120da:	6a 20                	push   $0x20
   120dc:	52                   	push   %edx
   120dd:	50                   	push   %eax
   120de:	e8 2f 62 00 00       	call   18312 <kernel_strncpy>
   120e3:	83 c4 10             	add    $0x10,%esp

    // 现在开始加载了，先准备应用页表，由于所有操作均在内核区中进行，所以可以直接先切换到新页表
    uint32_t old_page_dir = task->tss.cr3;
   120e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120e9:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   120ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t new_page_dir = memory_create_uvm();
   120f2:	e8 bb e6 ff ff       	call   107b2 <memory_create_uvm>
   120f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (!new_page_dir) {
   120fa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   120fe:	0f 84 2d 01 00 00    	je     12231 <sys_execve+0x17e>
        goto exec_failed;
    }

    // 加载elf文件到内存中。要放在开启新页表之后，这样才能对相应的内存区域写
    uint32_t entry = load_elf_file(task, name, new_page_dir);    // 暂时置用task->name表示
   12104:	83 ec 04             	sub    $0x4,%esp
   12107:	ff 75 ec             	pushl  -0x14(%ebp)
   1210a:	ff 75 08             	pushl  0x8(%ebp)
   1210d:	ff 75 f4             	pushl  -0xc(%ebp)
   12110:	e8 5b fc ff ff       	call   11d70 <load_elf_file>
   12115:	83 c4 10             	add    $0x10,%esp
   12118:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (entry == 0) {
   1211b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1211f:	0f 84 0f 01 00 00    	je     12234 <sys_execve+0x181>
        goto exec_failed;
    }

    // 准备用户栈空间，预留环境环境及参数的空间
    uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;    // 预留一部分参数空间
   12125:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
    int err = memory_alloc_for_page_dir(new_page_dir,
   1212c:	6a 07                	push   $0x7
   1212e:	68 00 40 1f 00       	push   $0x1f4000
   12133:	68 00 c0 e0 df       	push   $0xdfe0c000
   12138:	ff 75 ec             	pushl  -0x14(%ebp)
   1213b:	e8 24 ea ff ff       	call   10b64 <memory_alloc_for_page_dir>
   12140:	83 c4 10             	add    $0x10,%esp
   12143:	89 45 e0             	mov    %eax,-0x20(%ebp)
                            MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
                            MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);
    if (err < 0) {
   12146:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1214a:	0f 88 e7 00 00 00    	js     12237 <sys_execve+0x184>
        goto exec_failed;
    }

    // 复制参数，写入到栈顶的后边
    int argc = strings_count(argv);
   12150:	83 ec 0c             	sub    $0xc,%esp
   12153:	ff 75 0c             	pushl  0xc(%ebp)
   12156:	e8 fd 60 00 00       	call   18258 <strings_count>
   1215b:	83 c4 10             	add    $0x10,%esp
   1215e:	89 45 dc             	mov    %eax,-0x24(%ebp)
    err = copy_args((char *)stack_top, new_page_dir, argc, argv);
   12161:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12164:	ff 75 0c             	pushl  0xc(%ebp)
   12167:	ff 75 dc             	pushl  -0x24(%ebp)
   1216a:	ff 75 ec             	pushl  -0x14(%ebp)
   1216d:	50                   	push   %eax
   1216e:	e8 10 fe ff ff       	call   11f83 <copy_args>
   12173:	83 c4 10             	add    $0x10,%esp
   12176:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (err < 0) {
   12179:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1217d:	0f 88 b7 00 00 00    	js     1223a <sys_execve+0x187>

    // 加载完毕，为程序的执行做必要准备
    // 注意，exec的作用是替换掉当前进程，所以只要改变当前进程的执行流即可
    // 当该进程恢复运行时，像完全重新运行一样，所以用户栈要设置成初始模式
    // 运行地址要设备成整个程序的入口地址
    syscall_frame_t * frame = (syscall_frame_t *)(task->tss.esp0 - sizeof(syscall_frame_t));
   12183:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12186:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   1218c:	83 e8 58             	sub    $0x58,%eax
   1218f:	89 45 d8             	mov    %eax,-0x28(%ebp)
    frame->eip = entry;
   12192:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12195:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12198:	89 50 34             	mov    %edx,0x34(%eax)
    frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   1219b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1219e:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   121a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121a8:	8b 50 28             	mov    0x28(%eax),%edx
   121ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121ae:	89 50 2c             	mov    %edx,0x2c(%eax)
   121b1:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121b4:	8b 50 2c             	mov    0x2c(%eax),%edx
   121b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121ba:	89 50 24             	mov    %edx,0x24(%eax)
   121bd:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121c0:	8b 50 24             	mov    0x24(%eax),%edx
   121c3:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121c6:	89 50 30             	mov    %edx,0x30(%eax)
    frame->esi = frame->edi = frame->ebp = 0;
   121c9:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121cc:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   121d3:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121d6:	8b 50 1c             	mov    0x1c(%eax),%edx
   121d9:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121dc:	89 50 14             	mov    %edx,0x14(%eax)
   121df:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121e2:	8b 50 14             	mov    0x14(%eax),%edx
   121e5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121e8:	89 50 18             	mov    %edx,0x18(%eax)
    frame->eflags = EFLAGS_DEFAULT| EFLAGS_IF;  // 段寄存器无需修改
   121eb:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121ee:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

    // 内核栈不用设置，保持不变，后面调用memory_destroy_uvm并不会销毁内核栈的映射。
    // 但用户栈需要更改, 同样要加上调用门的参数压栈空间
    frame->esp = stack_top - sizeof(uint32_t)*SYSCALL_PARAM_COUNT;
   121f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   121f7:	83 e8 14             	sub    $0x14,%eax
   121fa:	89 c2                	mov    %eax,%edx
   121fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121ff:	89 50 50             	mov    %edx,0x50(%eax)

    // 切换到新的页表
    task->tss.cr3 = new_page_dir;
   12202:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12205:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12208:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
    mmu_set_page_dir(new_page_dir);   // 切换至新的页表。由于不用访问原栈及数据，所以并无问题
   1220e:	83 ec 0c             	sub    $0xc,%esp
   12211:	ff 75 ec             	pushl  -0x14(%ebp)
   12214:	e8 06 ee ff ff       	call   1101f <mmu_set_page_dir>
   12219:	83 c4 10             	add    $0x10,%esp

    // 调整页表，切换成新的，同时释放掉之前的
    // 当前使用的是内核栈，而内核栈并未映射到进程地址空间中，所以下面的释放没有问题
    memory_destroy_uvm(old_page_dir);            // 再释放掉了原进程的内容空间
   1221c:	83 ec 0c             	sub    $0xc,%esp
   1221f:	ff 75 f0             	pushl  -0x10(%ebp)
   12222:	e8 10 e6 ff ff       	call   10837 <memory_destroy_uvm>
   12227:	83 c4 10             	add    $0x10,%esp

    // 当从系统调用中返回时，将切换至新进程的入口地址运行，并且进程能够获取参数
    // 注意，如果用户栈设置不当，可能导致返回后运行出现异常。可在gdb中使用nexti单步观察运行流程
    return  0;
   1222a:	b8 00 00 00 00       	mov    $0x0,%eax
   1222f:	eb 3d                	jmp    1226e <sys_execve+0x1bb>
        goto exec_failed;
   12231:	90                   	nop
   12232:	eb 07                	jmp    1223b <sys_execve+0x188>
        goto exec_failed;
   12234:	90                   	nop
   12235:	eb 04                	jmp    1223b <sys_execve+0x188>
        goto exec_failed;
   12237:	90                   	nop
   12238:	eb 01                	jmp    1223b <sys_execve+0x188>
        goto exec_failed;
   1223a:	90                   	nop

exec_failed:    // 必要的资源释放
    if (new_page_dir) {
   1223b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1223f:	74 28                	je     12269 <sys_execve+0x1b6>
        // 有页表空间切换，切换至旧页表，销毁新页表
        task->tss.cr3 = old_page_dir;
   12241:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12244:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12247:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
        mmu_set_page_dir(old_page_dir);
   1224d:	83 ec 0c             	sub    $0xc,%esp
   12250:	ff 75 f0             	pushl  -0x10(%ebp)
   12253:	e8 c7 ed ff ff       	call   1101f <mmu_set_page_dir>
   12258:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(new_page_dir);
   1225b:	83 ec 0c             	sub    $0xc,%esp
   1225e:	ff 75 ec             	pushl  -0x14(%ebp)
   12261:	e8 d1 e5 ff ff       	call   10837 <memory_destroy_uvm>
   12266:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   12269:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1226e:	c9                   	leave  
   1226f:	c3                   	ret    

00012270 <sys_getpid>:

/**
 * 返回任务的pid
 */
int sys_getpid (void) {
   12270:	55                   	push   %ebp
   12271:	89 e5                	mov    %esp,%ebp
   12273:	83 ec 10             	sub    $0x10,%esp
    task_t * curr_task = task_current();
   12276:	e8 92 f4 ff ff       	call   1170d <task_current>
   1227b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return curr_task->pid;
   1227e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12281:	8b 40 24             	mov    0x24(%eax),%eax
}
   12284:	c9                   	leave  
   12285:	c3                   	ret    

00012286 <sys_wait>:


/**
 * @brief 等待子进程退出
 */
int sys_wait(int* status) {
   12286:	55                   	push   %ebp
   12287:	89 e5                	mov    %esp,%ebp
   12289:	83 ec 28             	sub    $0x28,%esp
    task_t * curr_task = task_current();
   1228c:	e8 7c f4 ff ff       	call   1170d <task_current>
   12291:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (;;) {
        // 遍历，找僵尸状态的进程，然后回收。如果收不到，则进入睡眠态
        mutex_lock(&task_table_mutex);
   12294:	83 ec 0c             	sub    $0xc,%esp
   12297:	68 c0 49 03 00       	push   $0x349c0
   1229c:	e8 c8 5a 00 00       	call   17d69 <mutex_lock>
   122a1:	83 c4 10             	add    $0x10,%esp
        for (int i = 0; i < TASK_NR; i++) {
   122a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   122ab:	e9 98 00 00 00       	jmp    12348 <sys_wait+0xc2>
            task_t * task = task_table + i;
   122b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122b3:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   122b9:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   122be:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (task->parent != curr_task) {
   122c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122c4:	8b 40 28             	mov    0x28(%eax),%eax
   122c7:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   122ca:	75 77                	jne    12343 <sys_wait+0xbd>
                continue;
            }

            if (task->state == TASK_ZOMBIE) {
   122cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122cf:	8b 00                	mov    (%eax),%eax
   122d1:	83 f8 05             	cmp    $0x5,%eax
   122d4:	75 6e                	jne    12344 <sys_wait+0xbe>
                int pid = task->pid;
   122d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122d9:	8b 40 24             	mov    0x24(%eax),%eax
   122dc:	89 45 e4             	mov    %eax,-0x1c(%ebp)

                *status = task->status;
   122df:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122e2:	8b 50 34             	mov    0x34(%eax),%edx
   122e5:	8b 45 08             	mov    0x8(%ebp),%eax
   122e8:	89 10                	mov    %edx,(%eax)

                memory_destroy_uvm(task->tss.cr3);
   122ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122ed:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   122f3:	83 ec 0c             	sub    $0xc,%esp
   122f6:	50                   	push   %eax
   122f7:	e8 3b e5 ff ff       	call   10837 <memory_destroy_uvm>
   122fc:	83 c4 10             	add    $0x10,%esp
                memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   122ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12302:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   12308:	2d 00 10 00 00       	sub    $0x1000,%eax
   1230d:	83 ec 0c             	sub    $0xc,%esp
   12310:	50                   	push   %eax
   12311:	e8 76 e9 ff ff       	call   10c8c <memory_free_page>
   12316:	83 c4 10             	add    $0x10,%esp
                kernel_memset(task, 0, sizeof(task_t));
   12319:	83 ec 04             	sub    $0x4,%esp
   1231c:	68 c8 02 00 00       	push   $0x2c8
   12321:	6a 00                	push   $0x0
   12323:	ff 75 e8             	pushl  -0x18(%ebp)
   12326:	e8 5b 61 00 00       	call   18486 <kernel_memset>
   1232b:	83 c4 10             	add    $0x10,%esp

                mutex_unlock(&task_table_mutex);
   1232e:	83 ec 0c             	sub    $0xc,%esp
   12331:	68 c0 49 03 00       	push   $0x349c0
   12336:	e8 c5 5a 00 00       	call   17e00 <mutex_unlock>
   1233b:	83 c4 10             	add    $0x10,%esp
                return pid;
   1233e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12341:	eb 56                	jmp    12399 <sys_wait+0x113>
                continue;
   12343:	90                   	nop
        for (int i = 0; i < TASK_NR; i++) {
   12344:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12348:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   1234c:	0f 8e 5e ff ff ff    	jle    122b0 <sys_wait+0x2a>
            }
        }
        mutex_unlock(&task_table_mutex);
   12352:	83 ec 0c             	sub    $0xc,%esp
   12355:	68 c0 49 03 00       	push   $0x349c0
   1235a:	e8 a1 5a 00 00       	call   17e00 <mutex_unlock>
   1235f:	83 c4 10             	add    $0x10,%esp

        // 找不到，则等待
        irq_state_t state = irq_enter_protection();
   12362:	e8 ab 0d 00 00       	call   13112 <irq_enter_protection>
   12367:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr_task);
   1236a:	83 ec 0c             	sub    $0xc,%esp
   1236d:	ff 75 f0             	pushl  -0x10(%ebp)
   12370:	e8 ca f2 ff ff       	call   1163f <task_set_block>
   12375:	83 c4 10             	add    $0x10,%esp
        curr_task->state = TASK_WAITING;
   12378:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1237b:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
        task_dispatch();
   12381:	e8 9e f4 ff ff       	call   11824 <task_dispatch>
        irq_leave_protection(state);
   12386:	83 ec 0c             	sub    $0xc,%esp
   12389:	ff 75 ec             	pushl  -0x14(%ebp)
   1238c:	e8 99 0d 00 00       	call   1312a <irq_leave_protection>
   12391:	83 c4 10             	add    $0x10,%esp
    for (;;) {
   12394:	e9 fb fe ff ff       	jmp    12294 <sys_wait+0xe>
    }
}
   12399:	c9                   	leave  
   1239a:	c3                   	ret    

0001239b <sys_exit>:

/**
 * @brief 退出进程
 */
void sys_exit(int status) {
   1239b:	55                   	push   %ebp
   1239c:	89 e5                	mov    %esp,%ebp
   1239e:	83 ec 28             	sub    $0x28,%esp
    task_t * curr_task = task_current();
   123a1:	e8 67 f3 ff ff       	call   1170d <task_current>
   123a6:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 关闭所有已经打开的文件, 标准输入输出库会由newlib自行关闭，但这里仍然再处理下
    for (int fd = 0; fd < TASK_OFILE_NR; fd++) {
   123a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   123b0:	eb 39                	jmp    123eb <sys_exit+0x50>
        file_t * file = curr_task->file_table[fd];
   123b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   123b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
   123b8:	83 c2 10             	add    $0x10,%edx
   123bb:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   123bf:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (file) {
   123c2:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   123c6:	74 1f                	je     123e7 <sys_exit+0x4c>
            sys_close(fd);
   123c8:	83 ec 0c             	sub    $0xc,%esp
   123cb:	ff 75 f4             	pushl  -0xc(%ebp)
   123ce:	e8 3d 55 00 00       	call   17910 <sys_close>
   123d3:	83 c4 10             	add    $0x10,%esp
            curr_task->file_table[fd] = (file_t *)0;
   123d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   123d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
   123dc:	83 c2 10             	add    $0x10,%edx
   123df:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
   123e6:	00 
    for (int fd = 0; fd < TASK_OFILE_NR; fd++) {
   123e7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   123eb:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   123ef:	7e c1                	jle    123b2 <sys_exit+0x17>
        }
    }

    int move_child = 0;
   123f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    // 找所有的子进程，将其转交给init进程
    mutex_lock(&task_table_mutex);
   123f8:	83 ec 0c             	sub    $0xc,%esp
   123fb:	68 c0 49 03 00       	push   $0x349c0
   12400:	e8 64 59 00 00       	call   17d69 <mutex_lock>
   12405:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   12408:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1240f:	eb 3b                	jmp    1244c <sys_exit+0xb1>
        task_t * task = task_table + i;
   12411:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12414:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   1241a:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   1241f:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (task->parent == curr_task) {
   12422:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12425:	8b 40 28             	mov    0x28(%eax),%eax
   12428:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   1242b:	75 1b                	jne    12448 <sys_exit+0xad>
            // 有子进程，则转给init_task
            task->parent = &task_manager.first_task;
   1242d:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12430:	c7 40 28 28 d0 01 00 	movl   $0x1d028,0x28(%eax)

            // 如果子进程中有僵尸进程，唤醒回收资源
            // 并不由自己回收，因为自己将要退出
            if (task->state == TASK_ZOMBIE) {
   12437:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1243a:	8b 00                	mov    (%eax),%eax
   1243c:	83 f8 05             	cmp    $0x5,%eax
   1243f:	75 07                	jne    12448 <sys_exit+0xad>
                move_child = 1;
   12441:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   12448:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1244c:	83 7d ec 7f          	cmpl   $0x7f,-0x14(%ebp)
   12450:	7e bf                	jle    12411 <sys_exit+0x76>
            }
        }
    }
    mutex_unlock(&task_table_mutex);
   12452:	83 ec 0c             	sub    $0xc,%esp
   12455:	68 c0 49 03 00       	push   $0x349c0
   1245a:	e8 a1 59 00 00       	call   17e00 <mutex_unlock>
   1245f:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   12462:	e8 ab 0c 00 00       	call   13112 <irq_enter_protection>
   12467:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 如果有移动子进程，则唤醒init进程
    task_t * parent = curr_task->parent;
   1246a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1246d:	8b 40 28             	mov    0x28(%eax),%eax
   12470:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (move_child && (parent != &task_manager.first_task)) {  // 如果父进程为init进程，在下方唤醒
   12473:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12477:	74 23                	je     1249c <sys_exit+0x101>
   12479:	81 7d e0 28 d0 01 00 	cmpl   $0x1d028,-0x20(%ebp)
   12480:	74 1a                	je     1249c <sys_exit+0x101>
        if (task_manager.first_task.state == TASK_WAITING) {
   12482:	a1 28 d0 01 00       	mov    0x1d028,%eax
   12487:	83 f8 04             	cmp    $0x4,%eax
   1248a:	75 10                	jne    1249c <sys_exit+0x101>
            task_set_ready(&task_manager.first_task);
   1248c:	83 ec 0c             	sub    $0xc,%esp
   1248f:	68 28 d0 01 00       	push   $0x1d028
   12494:	e8 72 f1 ff ff       	call   1160b <task_set_ready>
   12499:	83 c4 10             	add    $0x10,%esp
        }
    }

    // 如果有父任务在wait，则唤醒父任务进行回收
    // 如果父进程没有等待，则一直处理僵死状态？
    if (parent->state == TASK_WAITING) {
   1249c:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1249f:	8b 00                	mov    (%eax),%eax
   124a1:	83 f8 04             	cmp    $0x4,%eax
   124a4:	75 12                	jne    124b8 <sys_exit+0x11d>
        task_set_ready(curr_task->parent);
   124a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124a9:	8b 40 28             	mov    0x28(%eax),%eax
   124ac:	83 ec 0c             	sub    $0xc,%esp
   124af:	50                   	push   %eax
   124b0:	e8 56 f1 ff ff       	call   1160b <task_set_ready>
   124b5:	83 c4 10             	add    $0x10,%esp
    }

    // 保存返回值，进入僵尸状态
    curr_task->status = status;
   124b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124bb:	8b 55 08             	mov    0x8(%ebp),%edx
   124be:	89 50 34             	mov    %edx,0x34(%eax)
    curr_task->state = TASK_ZOMBIE;
   124c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124c4:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
    task_set_block(curr_task);
   124ca:	83 ec 0c             	sub    $0xc,%esp
   124cd:	ff 75 e8             	pushl  -0x18(%ebp)
   124d0:	e8 6a f1 ff ff       	call   1163f <task_set_block>
   124d5:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   124d8:	e8 47 f3 ff ff       	call   11824 <task_dispatch>

    irq_leave_protection(state);
   124dd:	83 ec 0c             	sub    $0xc,%esp
   124e0:	ff 75 e4             	pushl  -0x1c(%ebp)
   124e3:	e8 42 0c 00 00       	call   1312a <irq_leave_protection>
   124e8:	83 c4 10             	add    $0x10,%esp
}
   124eb:	90                   	nop
   124ec:	c9                   	leave  
   124ed:	c3                   	ret    

000124ee <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   124ee:	55                   	push   %ebp
   124ef:	89 e5                	mov    %esp,%ebp
   124f1:	83 ec 10             	sub    $0x10,%esp
	gdt.start31_16 = start >> 16;
   124f4:	8b 45 08             	mov    0x8(%ebp),%eax
   124f7:	c1 e8 10             	shr    $0x10,%eax
   124fa:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   124fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12501:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   12505:	8b 45 0c             	mov    0xc(%ebp),%eax
   12508:	83 e8 01             	sub    $0x1,%eax
   1250b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1250f:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   12513:	90                   	nop
   12514:	c9                   	leave  
   12515:	c3                   	ret    

00012516 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   12516:	55                   	push   %ebp
   12517:	89 e5                	mov    %esp,%ebp
   12519:	83 ec 10             	sub    $0x10,%esp
	uint32_t addr[] = {offset, selector };
   1251c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1251f:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12522:	8b 45 08             	mov    0x8(%ebp),%eax
   12525:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   12528:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1252b:	ff 28                	ljmp   *(%eax)
}
   1252d:	90                   	nop
   1252e:	c9                   	leave  
   1252f:	c3                   	ret    

00012530 <segment_desc_set>:
static mutex_t mutex;

/**
 * 设置段描述符
 */
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   12530:	55                   	push   %ebp
   12531:	89 e5                	mov    %esp,%ebp
   12533:	83 ec 14             	sub    $0x14,%esp
   12536:	8b 45 14             	mov    0x14(%ebp),%eax
   12539:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table + (selector >> 3);
   1253d:	8b 45 08             	mov    0x8(%ebp),%eax
   12540:	c1 f8 03             	sar    $0x3,%eax
   12543:	c1 e0 03             	shl    $0x3,%eax
   12546:	05 e0 49 03 00       	add    $0x349e0,%eax
   1254b:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
	if (limit > 0xfffff) {
   1254e:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   12555:	76 0f                	jbe    12566 <segment_desc_set+0x36>
		attr |= 0x8000;
   12557:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   1255d:	8b 45 10             	mov    0x10(%ebp),%eax
   12560:	c1 e8 0c             	shr    $0xc,%eax
   12563:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   12566:	8b 45 10             	mov    0x10(%ebp),%eax
   12569:	89 c2                	mov    %eax,%edx
   1256b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1256e:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   12571:	8b 45 0c             	mov    0xc(%ebp),%eax
   12574:	89 c2                	mov    %eax,%edx
   12576:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12579:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   1257d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12580:	c1 e8 10             	shr    $0x10,%eax
   12583:	89 c2                	mov    %eax,%edx
   12585:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12588:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1258b:	8b 45 10             	mov    0x10(%ebp),%eax
   1258e:	c1 e8 10             	shr    $0x10,%eax
   12591:	c1 e0 08             	shl    $0x8,%eax
   12594:	66 25 00 0f          	and    $0xf00,%ax
   12598:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1259c:	89 c2                	mov    %eax,%edx
   1259e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125a1:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   125a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   125a8:	c1 e8 18             	shr    $0x18,%eax
   125ab:	89 c2                	mov    %eax,%edx
   125ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125b0:	88 50 07             	mov    %dl,0x7(%eax)
}
   125b3:	90                   	nop
   125b4:	c9                   	leave  
   125b5:	c3                   	ret    

000125b6 <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   125b6:	55                   	push   %ebp
   125b7:	89 e5                	mov    %esp,%ebp
   125b9:	83 ec 08             	sub    $0x8,%esp
   125bc:	8b 55 0c             	mov    0xc(%ebp),%edx
   125bf:	8b 45 14             	mov    0x14(%ebp),%eax
   125c2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   125c6:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   125ca:	8b 45 10             	mov    0x10(%ebp),%eax
   125cd:	89 c2                	mov    %eax,%edx
   125cf:	8b 45 08             	mov    0x8(%ebp),%eax
   125d2:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   125d5:	8b 45 08             	mov    0x8(%ebp),%eax
   125d8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   125dc:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   125e0:	8b 45 08             	mov    0x8(%ebp),%eax
   125e3:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   125e7:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   125eb:	8b 45 10             	mov    0x10(%ebp),%eax
   125ee:	c1 e8 10             	shr    $0x10,%eax
   125f1:	89 c2                	mov    %eax,%edx
   125f3:	8b 45 08             	mov    0x8(%ebp),%eax
   125f6:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   125fa:	90                   	nop
   125fb:	c9                   	leave  
   125fc:	c3                   	ret    

000125fd <gdt_free_sel>:

void gdt_free_sel (int sel) {
   125fd:	55                   	push   %ebp
   125fe:	89 e5                	mov    %esp,%ebp
   12600:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex);
   12603:	83 ec 0c             	sub    $0xc,%esp
   12606:	68 e0 51 03 00       	push   $0x351e0
   1260b:	e8 59 57 00 00       	call   17d69 <mutex_lock>
   12610:	83 c4 10             	add    $0x10,%esp
    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   12613:	8b 45 08             	mov    0x8(%ebp),%eax
   12616:	c1 e8 03             	shr    $0x3,%eax
   12619:	66 c7 04 c5 e5 49 03 	movw   $0x0,0x349e5(,%eax,8)
   12620:	00 00 00 
    mutex_unlock(&mutex);
   12623:	83 ec 0c             	sub    $0xc,%esp
   12626:	68 e0 51 03 00       	push   $0x351e0
   1262b:	e8 d0 57 00 00       	call   17e00 <mutex_unlock>
   12630:	83 c4 10             	add    $0x10,%esp
}
   12633:	90                   	nop
   12634:	c9                   	leave  
   12635:	c3                   	ret    

00012636 <gdt_alloc_desc>:

/**
 * 分配一个GDT推荐表符
 */
int gdt_alloc_desc (void) {
   12636:	55                   	push   %ebp
   12637:	89 e5                	mov    %esp,%ebp
   12639:	83 ec 18             	sub    $0x18,%esp
    int i;

    // 跳过第0项
    mutex_lock(&mutex);
   1263c:	83 ec 0c             	sub    $0xc,%esp
   1263f:	68 e0 51 03 00       	push   $0x351e0
   12644:	e8 20 57 00 00       	call   17d69 <mutex_lock>
   12649:	83 c4 10             	add    $0x10,%esp
    for (i = 1; i < GDT_TABLE_SIZE; i++) {
   1264c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12653:	eb 29                	jmp    1267e <gdt_alloc_desc+0x48>
        segment_desc_t * desc = gdt_table + i;
   12655:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12658:	c1 e0 03             	shl    $0x3,%eax
   1265b:	05 e0 49 03 00       	add    $0x349e0,%eax
   12660:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   12663:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12666:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1266a:	66 85 c0             	test   %ax,%ax
   1266d:	75 0b                	jne    1267a <gdt_alloc_desc+0x44>
            desc->attr = SEG_P_PRESENT;     // 标记为占用状态
   1266f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12672:	66 c7 40 05 80 00    	movw   $0x80,0x5(%eax)
            break;
   12678:	eb 0d                	jmp    12687 <gdt_alloc_desc+0x51>
    for (i = 1; i < GDT_TABLE_SIZE; i++) {
   1267a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1267e:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12685:	7e ce                	jle    12655 <gdt_alloc_desc+0x1f>
        }
    }
    mutex_unlock(&mutex);
   12687:	83 ec 0c             	sub    $0xc,%esp
   1268a:	68 e0 51 03 00       	push   $0x351e0
   1268f:	e8 6c 57 00 00       	call   17e00 <mutex_unlock>
   12694:	83 c4 10             	add    $0x10,%esp

    return i >= GDT_TABLE_SIZE ? -1 : i * sizeof(segment_desc_t);;
   12697:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1269e:	7f 08                	jg     126a8 <gdt_alloc_desc+0x72>
   126a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   126a3:	c1 e0 03             	shl    $0x3,%eax
   126a6:	eb 05                	jmp    126ad <gdt_alloc_desc+0x77>
   126a8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   126ad:	c9                   	leave  
   126ae:	c3                   	ret    

000126af <init_gdt>:

/**
 * 初始化GDT
 */
void init_gdt(void) {
   126af:	55                   	push   %ebp
   126b0:	89 e5                	mov    %esp,%ebp
   126b2:	83 ec 10             	sub    $0x10,%esp
	// 全部清空
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   126b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   126bc:	eb 19                	jmp    126d7 <init_gdt+0x28>
        segment_desc_set(i << 3, 0, 0, 0);
   126be:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126c1:	c1 e0 03             	shl    $0x3,%eax
   126c4:	6a 00                	push   $0x0
   126c6:	6a 00                	push   $0x0
   126c8:	6a 00                	push   $0x0
   126ca:	50                   	push   %eax
   126cb:	e8 60 fe ff ff       	call   12530 <segment_desc_set>
   126d0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   126d3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   126d7:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   126de:	7e de                	jle    126be <init_gdt+0xf>
    }

    //数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   126e0:	68 92 c0 00 00       	push   $0xc092
   126e5:	6a ff                	push   $0xffffffff
   126e7:	6a 00                	push   $0x0
   126e9:	6a 10                	push   $0x10
   126eb:	e8 40 fe ff ff       	call   12530 <segment_desc_set>
   126f0:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D | SEG_G);

    // 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   126f3:	68 9a c0 00 00       	push   $0xc09a
   126f8:	6a ff                	push   $0xffffffff
   126fa:	6a 00                	push   $0x0
   126fc:	6a 08                	push   $0x8
   126fe:	e8 2d fe ff ff       	call   12530 <segment_desc_set>
   12703:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D | SEG_G);

    // 调用门
    gate_desc_set((gate_desc_t *)(gdt_table + (SELECTOR_SYSCALL >> 3)),
   12706:	ba f8 02 01 00       	mov    $0x102f8,%edx
   1270b:	b8 f8 49 03 00       	mov    $0x349f8,%eax
   12710:	68 05 ec 00 00       	push   $0xec05
   12715:	52                   	push   %edx
   12716:	6a 08                	push   $0x8
   12718:	50                   	push   %eax
   12719:	e8 98 fe ff ff       	call   125b6 <gate_desc_set>
   1271e:	83 c4 10             	add    $0x10,%esp
            KERNEL_SELECTOR_CS,
            (uint32_t)exception_handler_syscall,
            GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);

    // 加载gdt
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   12721:	b8 e0 49 03 00       	mov    $0x349e0,%eax
   12726:	68 00 08 00 00       	push   $0x800
   1272b:	50                   	push   %eax
   1272c:	e8 bd fd ff ff       	call   124ee <lgdt>
   12731:	83 c4 08             	add    $0x8,%esp
}
   12734:	90                   	nop
   12735:	c9                   	leave  
   12736:	c3                   	ret    

00012737 <switch_to_tss>:

/**
 * 切换至TSS，即跳转实现任务切换
 */
void switch_to_tss (uint32_t tss_selector) {
   12737:	55                   	push   %ebp
   12738:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   1273a:	6a 00                	push   $0x0
   1273c:	ff 75 08             	pushl  0x8(%ebp)
   1273f:	e8 d2 fd ff ff       	call   12516 <far_jump>
   12744:	83 c4 08             	add    $0x8,%esp
}
   12747:	90                   	nop
   12748:	c9                   	leave  
   12749:	c3                   	ret    

0001274a <cpu_init>:

/**
 * CPU初始化
 */
void cpu_init (void) {
   1274a:	55                   	push   %ebp
   1274b:	89 e5                	mov    %esp,%ebp
   1274d:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   12750:	83 ec 0c             	sub    $0xc,%esp
   12753:	68 e0 51 03 00       	push   $0x351e0
   12758:	e8 de 55 00 00       	call   17d3b <mutex_init>
   1275d:	83 c4 10             	add    $0x10,%esp

    init_gdt();
   12760:	e8 4a ff ff ff       	call   126af <init_gdt>
}
   12765:	90                   	nop
   12766:	c9                   	leave  
   12767:	c3                   	ret    

00012768 <inb>:
static inline uint8_t inb(uint16_t  port) {
   12768:	55                   	push   %ebp
   12769:	89 e5                	mov    %esp,%ebp
   1276b:	83 ec 14             	sub    $0x14,%esp
   1276e:	8b 45 08             	mov    0x8(%ebp),%eax
   12771:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   12775:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12779:	89 c2                	mov    %eax,%edx
   1277b:	ec                   	in     (%dx),%al
   1277c:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   1277f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12783:	c9                   	leave  
   12784:	c3                   	ret    

00012785 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12785:	55                   	push   %ebp
   12786:	89 e5                	mov    %esp,%ebp
   12788:	83 ec 08             	sub    $0x8,%esp
   1278b:	8b 55 08             	mov    0x8(%ebp),%edx
   1278e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12791:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12795:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   12798:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1279c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   127a0:	ee                   	out    %al,(%dx)
}
   127a1:	90                   	nop
   127a2:	c9                   	leave  
   127a3:	c3                   	ret    

000127a4 <cli>:
static inline void cli() {
   127a4:	55                   	push   %ebp
   127a5:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   127a7:	fa                   	cli    
}
   127a8:	90                   	nop
   127a9:	5d                   	pop    %ebp
   127aa:	c3                   	ret    

000127ab <sti>:
static inline void sti() {
   127ab:	55                   	push   %ebp
   127ac:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   127ae:	fb                   	sti    
}
   127af:	90                   	nop
   127b0:	5d                   	pop    %ebp
   127b1:	c3                   	ret    

000127b2 <read_cr2>:
static inline uint32_t read_cr2() {
   127b2:	55                   	push   %ebp
   127b3:	89 e5                	mov    %esp,%ebp
   127b5:	83 ec 10             	sub    $0x10,%esp
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   127b8:	0f 20 d0             	mov    %cr2,%eax
   127bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   127be:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   127c1:	c9                   	leave  
   127c2:	c3                   	ret    

000127c3 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   127c3:	55                   	push   %ebp
   127c4:	89 e5                	mov    %esp,%ebp
   127c6:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   127c9:	8b 45 08             	mov    0x8(%ebp),%eax
   127cc:	c1 e8 10             	shr    $0x10,%eax
   127cf:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   127d3:	8b 45 08             	mov    0x8(%ebp),%eax
   127d6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   127da:	8b 45 0c             	mov    0xc(%ebp),%eax
   127dd:	83 e8 01             	sub    $0x1,%eax
   127e0:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   127e4:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   127e8:	90                   	nop
   127e9:	c9                   	leave  
   127ea:	c3                   	ret    

000127eb <hlt>:
static inline void hlt(void) {
   127eb:	55                   	push   %ebp
   127ec:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   127ee:	f4                   	hlt    
}
   127ef:	90                   	nop
   127f0:	5d                   	pop    %ebp
   127f1:	c3                   	ret    

000127f2 <read_eflags>:

static inline uint32_t read_eflags (void) {
   127f2:	55                   	push   %ebp
   127f3:	89 e5                	mov    %esp,%ebp
   127f5:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushfl\n\tpopl %%eax":"=a"(eflags));
   127f8:	9c                   	pushf  
   127f9:	58                   	pop    %eax
   127fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   127fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12800:	c9                   	leave  
   12801:	c3                   	ret    

00012802 <write_eflags>:

static inline void write_eflags (uint32_t eflags) {
   12802:	55                   	push   %ebp
   12803:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("pushl %%eax\n\tpopfl"::"a"(eflags));
   12805:	8b 45 08             	mov    0x8(%ebp),%eax
   12808:	50                   	push   %eax
   12809:	9d                   	popf   
}
   1280a:	90                   	nop
   1280b:	5d                   	pop    %ebp
   1280c:	c3                   	ret    

0001280d <dump_core_regs>:

#define IDT_TABLE_NR			128				// IDT表项数量

static gate_desc_t idt_table[IDT_TABLE_NR];	// 中断描述表

static void dump_core_regs (exception_frame_t * frame) {
   1280d:	55                   	push   %ebp
   1280e:	89 e5                	mov    %esp,%ebp
   12810:	57                   	push   %edi
   12811:	56                   	push   %esi
   12812:	53                   	push   %ebx
   12813:	83 ec 2c             	sub    $0x2c,%esp
    // 打印CPU寄存器相关内容
    uint32_t esp, ss;
    if (frame->cs & 0x7) {
   12816:	8b 45 08             	mov    0x8(%ebp),%eax
   12819:	8b 40 3c             	mov    0x3c(%eax),%eax
   1281c:	83 e0 07             	and    $0x7,%eax
   1281f:	85 c0                	test   %eax,%eax
   12821:	74 14                	je     12837 <dump_core_regs+0x2a>
        ss = frame->ds;
   12823:	8b 45 08             	mov    0x8(%ebp),%eax
   12826:	8b 40 0c             	mov    0xc(%eax),%eax
   12829:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   1282c:	8b 45 08             	mov    0x8(%ebp),%eax
   1282f:	8b 40 1c             	mov    0x1c(%eax),%eax
   12832:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   12835:	eb 12                	jmp    12849 <dump_core_regs+0x3c>
    } else {
        ss = frame->ss3;
   12837:	8b 45 08             	mov    0x8(%ebp),%eax
   1283a:	8b 40 48             	mov    0x48(%eax),%eax
   1283d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   12840:	8b 45 08             	mov    0x8(%ebp),%eax
   12843:	8b 40 44             	mov    0x44(%eax),%eax
   12846:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->error_code);
   12849:	8b 45 08             	mov    0x8(%ebp),%eax
   1284c:	8b 50 34             	mov    0x34(%eax),%edx
   1284f:	8b 45 08             	mov    0x8(%ebp),%eax
   12852:	8b 40 30             	mov    0x30(%eax),%eax
   12855:	83 ec 04             	sub    $0x4,%esp
   12858:	52                   	push   %edx
   12859:	50                   	push   %eax
   1285a:	68 38 90 01 00       	push   $0x19038
   1285f:	e8 cc 61 00 00       	call   18a30 <log_printf>
   12864:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS:%d\nGS:%d",
   12867:	8b 45 08             	mov    0x8(%ebp),%eax
   1286a:	8b 30                	mov    (%eax),%esi
   1286c:	8b 45 08             	mov    0x8(%ebp),%eax
   1286f:	8b 58 04             	mov    0x4(%eax),%ebx
   12872:	8b 45 08             	mov    0x8(%ebp),%eax
   12875:	8b 48 08             	mov    0x8(%eax),%ecx
   12878:	8b 45 08             	mov    0x8(%ebp),%eax
   1287b:	8b 50 0c             	mov    0xc(%eax),%edx
   1287e:	8b 45 08             	mov    0x8(%ebp),%eax
   12881:	8b 40 3c             	mov    0x3c(%eax),%eax
   12884:	83 ec 04             	sub    $0x4,%esp
   12887:	56                   	push   %esi
   12888:	53                   	push   %ebx
   12889:	ff 75 e0             	pushl  -0x20(%ebp)
   1288c:	51                   	push   %ecx
   1288d:	52                   	push   %edx
   1288e:	50                   	push   %eax
   1288f:	68 54 90 01 00       	push   $0x19054
   12894:	e8 97 61 00 00       	call   18a30 <log_printf>
   12899:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs
    );
     log_printf("EAX:0x%x\n"
   1289c:	8b 45 08             	mov    0x8(%ebp),%eax
   1289f:	8b 40 18             	mov    0x18(%eax),%eax
   128a2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   128a5:	8b 45 08             	mov    0x8(%ebp),%eax
   128a8:	8b 78 14             	mov    0x14(%eax),%edi
   128ab:	8b 45 08             	mov    0x8(%ebp),%eax
   128ae:	8b 70 10             	mov    0x10(%eax),%esi
   128b1:	8b 45 08             	mov    0x8(%ebp),%eax
   128b4:	8b 58 24             	mov    0x24(%eax),%ebx
   128b7:	8b 45 08             	mov    0x8(%ebp),%eax
   128ba:	8b 48 28             	mov    0x28(%eax),%ecx
   128bd:	8b 45 08             	mov    0x8(%ebp),%eax
   128c0:	8b 50 20             	mov    0x20(%eax),%edx
   128c3:	8b 45 08             	mov    0x8(%ebp),%eax
   128c6:	8b 40 2c             	mov    0x2c(%eax),%eax
   128c9:	83 ec 0c             	sub    $0xc,%esp
   128cc:	ff 75 e4             	pushl  -0x1c(%ebp)
   128cf:	ff 75 d4             	pushl  -0x2c(%ebp)
   128d2:	57                   	push   %edi
   128d3:	56                   	push   %esi
   128d4:	53                   	push   %ebx
   128d5:	51                   	push   %ecx
   128d6:	52                   	push   %edx
   128d7:	50                   	push   %eax
   128d8:	68 7c 90 01 00       	push   $0x1907c
   128dd:	e8 4e 61 00 00       	call   18a30 <log_printf>
   128e2:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   128e5:	8b 45 08             	mov    0x8(%ebp),%eax
   128e8:	8b 50 40             	mov    0x40(%eax),%edx
   128eb:	8b 45 08             	mov    0x8(%ebp),%eax
   128ee:	8b 40 38             	mov    0x38(%eax),%eax
   128f1:	83 ec 04             	sub    $0x4,%esp
   128f4:	52                   	push   %edx
   128f5:	50                   	push   %eax
   128f6:	68 c5 90 01 00       	push   $0x190c5
   128fb:	e8 30 61 00 00       	call   18a30 <log_printf>
   12900:	83 c4 10             	add    $0x10,%esp
}
   12903:	90                   	nop
   12904:	8d 65 f4             	lea    -0xc(%ebp),%esp
   12907:	5b                   	pop    %ebx
   12908:	5e                   	pop    %esi
   12909:	5f                   	pop    %edi
   1290a:	5d                   	pop    %ebp
   1290b:	c3                   	ret    

0001290c <do_default_handler>:

static void do_default_handler (exception_frame_t * frame, const char * message) {
   1290c:	55                   	push   %ebp
   1290d:	89 e5                	mov    %esp,%ebp
   1290f:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12912:	83 ec 0c             	sub    $0xc,%esp
   12915:	68 dc 90 01 00       	push   $0x190dc
   1291a:	e8 11 61 00 00       	call   18a30 <log_printf>
   1291f:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s.", message);
   12922:	83 ec 08             	sub    $0x8,%esp
   12925:	ff 75 0c             	pushl  0xc(%ebp)
   12928:	68 fd 90 01 00       	push   $0x190fd
   1292d:	e8 fe 60 00 00       	call   18a30 <log_printf>
   12932:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   12935:	83 ec 0c             	sub    $0xc,%esp
   12938:	ff 75 08             	pushl  0x8(%ebp)
   1293b:	e8 cd fe ff ff       	call   1280d <dump_core_regs>
   12940:	83 c4 10             	add    $0x10,%esp
    
    // todo: 留等以后补充打印任务栈的内容

    log_printf("--------------------------------");
   12943:	83 ec 0c             	sub    $0xc,%esp
   12946:	68 dc 90 01 00       	push   $0x190dc
   1294b:	e8 e0 60 00 00       	call   18a30 <log_printf>
   12950:	83 c4 10             	add    $0x10,%esp
    if (frame->cs & 0x3) {
   12953:	8b 45 08             	mov    0x8(%ebp),%eax
   12956:	8b 40 3c             	mov    0x3c(%eax),%eax
   12959:	83 e0 03             	and    $0x3,%eax
   1295c:	85 c0                	test   %eax,%eax
   1295e:	74 14                	je     12974 <do_default_handler+0x68>
        sys_exit(frame->error_code);
   12960:	8b 45 08             	mov    0x8(%ebp),%eax
   12963:	8b 40 34             	mov    0x34(%eax),%eax
   12966:	83 ec 0c             	sub    $0xc,%esp
   12969:	50                   	push   %eax
   1296a:	e8 2c fa ff ff       	call   1239b <sys_exit>
   1296f:	83 c4 10             	add    $0x10,%esp
    } else {
        for (;;) {
            hlt();
        }
    }
}
   12972:	eb 07                	jmp    1297b <do_default_handler+0x6f>
            hlt();
   12974:	e8 72 fe ff ff       	call   127eb <hlt>
   12979:	eb f9                	jmp    12974 <do_default_handler+0x68>
}
   1297b:	c9                   	leave  
   1297c:	c3                   	ret    

0001297d <do_handler_unknown>:

void do_handler_unknown (exception_frame_t * frame) {
   1297d:	55                   	push   %ebp
   1297e:	89 e5                	mov    %esp,%ebp
   12980:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Unknown exception.");
   12983:	83 ec 08             	sub    $0x8,%esp
   12986:	68 18 91 01 00       	push   $0x19118
   1298b:	ff 75 08             	pushl  0x8(%ebp)
   1298e:	e8 79 ff ff ff       	call   1290c <do_default_handler>
   12993:	83 c4 10             	add    $0x10,%esp
}
   12996:	90                   	nop
   12997:	c9                   	leave  
   12998:	c3                   	ret    

00012999 <do_handler_divider>:

void do_handler_divider(exception_frame_t * frame) {
   12999:	55                   	push   %ebp
   1299a:	89 e5                	mov    %esp,%ebp
   1299c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Divider Error.");
   1299f:	83 ec 08             	sub    $0x8,%esp
   129a2:	68 2b 91 01 00       	push   $0x1912b
   129a7:	ff 75 08             	pushl  0x8(%ebp)
   129aa:	e8 5d ff ff ff       	call   1290c <do_default_handler>
   129af:	83 c4 10             	add    $0x10,%esp
}
   129b2:	90                   	nop
   129b3:	c9                   	leave  
   129b4:	c3                   	ret    

000129b5 <do_handler_Debug>:

void do_handler_Debug(exception_frame_t * frame) {
   129b5:	55                   	push   %ebp
   129b6:	89 e5                	mov    %esp,%ebp
   129b8:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   129bb:	83 ec 08             	sub    $0x8,%esp
   129be:	68 3a 91 01 00       	push   $0x1913a
   129c3:	ff 75 08             	pushl  0x8(%ebp)
   129c6:	e8 41 ff ff ff       	call   1290c <do_default_handler>
   129cb:	83 c4 10             	add    $0x10,%esp
}
   129ce:	90                   	nop
   129cf:	c9                   	leave  
   129d0:	c3                   	ret    

000129d1 <do_handler_NMI>:

void do_handler_NMI(exception_frame_t * frame) {
   129d1:	55                   	push   %ebp
   129d2:	89 e5                	mov    %esp,%ebp
   129d4:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   129d7:	83 ec 08             	sub    $0x8,%esp
   129da:	68 4a 91 01 00       	push   $0x1914a
   129df:	ff 75 08             	pushl  0x8(%ebp)
   129e2:	e8 25 ff ff ff       	call   1290c <do_default_handler>
   129e7:	83 c4 10             	add    $0x10,%esp
}
   129ea:	90                   	nop
   129eb:	c9                   	leave  
   129ec:	c3                   	ret    

000129ed <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t * frame) {
   129ed:	55                   	push   %ebp
   129ee:	89 e5                	mov    %esp,%ebp
   129f0:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   129f3:	83 ec 08             	sub    $0x8,%esp
   129f6:	68 59 91 01 00       	push   $0x19159
   129fb:	ff 75 08             	pushl  0x8(%ebp)
   129fe:	e8 09 ff ff ff       	call   1290c <do_default_handler>
   12a03:	83 c4 10             	add    $0x10,%esp
}
   12a06:	90                   	nop
   12a07:	c9                   	leave  
   12a08:	c3                   	ret    

00012a09 <do_handler_overflow>:

void do_handler_overflow(exception_frame_t * frame) {
   12a09:	55                   	push   %ebp
   12a0a:	89 e5                	mov    %esp,%ebp
   12a0c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   12a0f:	83 ec 08             	sub    $0x8,%esp
   12a12:	68 65 91 01 00       	push   $0x19165
   12a17:	ff 75 08             	pushl  0x8(%ebp)
   12a1a:	e8 ed fe ff ff       	call   1290c <do_default_handler>
   12a1f:	83 c4 10             	add    $0x10,%esp
}
   12a22:	90                   	nop
   12a23:	c9                   	leave  
   12a24:	c3                   	ret    

00012a25 <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t * frame) {
   12a25:	55                   	push   %ebp
   12a26:	89 e5                	mov    %esp,%ebp
   12a28:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   12a2b:	83 ec 08             	sub    $0x8,%esp
   12a2e:	68 6f 91 01 00       	push   $0x1916f
   12a33:	ff 75 08             	pushl  0x8(%ebp)
   12a36:	e8 d1 fe ff ff       	call   1290c <do_default_handler>
   12a3b:	83 c4 10             	add    $0x10,%esp
}
   12a3e:	90                   	nop
   12a3f:	c9                   	leave  
   12a40:	c3                   	ret    

00012a41 <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t * frame) {
   12a41:	55                   	push   %ebp
   12a42:	89 e5                	mov    %esp,%ebp
   12a44:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   12a47:	83 ec 08             	sub    $0x8,%esp
   12a4a:	68 85 91 01 00       	push   $0x19185
   12a4f:	ff 75 08             	pushl  0x8(%ebp)
   12a52:	e8 b5 fe ff ff       	call   1290c <do_default_handler>
   12a57:	83 c4 10             	add    $0x10,%esp
}
   12a5a:	90                   	nop
   12a5b:	c9                   	leave  
   12a5c:	c3                   	ret    

00012a5d <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t * frame) {
   12a5d:	55                   	push   %ebp
   12a5e:	89 e5                	mov    %esp,%ebp
   12a60:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   12a63:	83 ec 08             	sub    $0x8,%esp
   12a66:	68 95 91 01 00       	push   $0x19195
   12a6b:	ff 75 08             	pushl  0x8(%ebp)
   12a6e:	e8 99 fe ff ff       	call   1290c <do_default_handler>
   12a73:	83 c4 10             	add    $0x10,%esp
}
   12a76:	90                   	nop
   12a77:	c9                   	leave  
   12a78:	c3                   	ret    

00012a79 <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t * frame) {
   12a79:	55                   	push   %ebp
   12a7a:	89 e5                	mov    %esp,%ebp
   12a7c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   12a7f:	83 ec 08             	sub    $0x8,%esp
   12a82:	68 ab 91 01 00       	push   $0x191ab
   12a87:	ff 75 08             	pushl  0x8(%ebp)
   12a8a:	e8 7d fe ff ff       	call   1290c <do_default_handler>
   12a8f:	83 c4 10             	add    $0x10,%esp
}
   12a92:	90                   	nop
   12a93:	c9                   	leave  
   12a94:	c3                   	ret    

00012a95 <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t * frame) {
   12a95:	55                   	push   %ebp
   12a96:	89 e5                	mov    %esp,%ebp
   12a98:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   12a9b:	83 ec 08             	sub    $0x8,%esp
   12a9e:	68 b9 91 01 00       	push   $0x191b9
   12aa3:	ff 75 08             	pushl  0x8(%ebp)
   12aa6:	e8 61 fe ff ff       	call   1290c <do_default_handler>
   12aab:	83 c4 10             	add    $0x10,%esp
}
   12aae:	90                   	nop
   12aaf:	c9                   	leave  
   12ab0:	c3                   	ret    

00012ab1 <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t * frame) {
   12ab1:	55                   	push   %ebp
   12ab2:	89 e5                	mov    %esp,%ebp
   12ab4:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   12ab7:	83 ec 08             	sub    $0x8,%esp
   12aba:	68 c5 91 01 00       	push   $0x191c5
   12abf:	ff 75 08             	pushl  0x8(%ebp)
   12ac2:	e8 45 fe ff ff       	call   1290c <do_default_handler>
   12ac7:	83 c4 10             	add    $0x10,%esp
}
   12aca:	90                   	nop
   12acb:	c9                   	leave  
   12acc:	c3                   	ret    

00012acd <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t * frame) {
   12acd:	55                   	push   %ebp
   12ace:	89 e5                	mov    %esp,%ebp
   12ad0:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   12ad3:	83 ec 08             	sub    $0x8,%esp
   12ad6:	68 da 91 01 00       	push   $0x191da
   12adb:	ff 75 08             	pushl  0x8(%ebp)
   12ade:	e8 29 fe ff ff       	call   1290c <do_default_handler>
   12ae3:	83 c4 10             	add    $0x10,%esp
}
   12ae6:	90                   	nop
   12ae7:	c9                   	leave  
   12ae8:	c3                   	ret    

00012ae9 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t * frame) {
   12ae9:	55                   	push   %ebp
   12aea:	89 e5                	mov    %esp,%ebp
   12aec:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12aef:	83 ec 0c             	sub    $0xc,%esp
   12af2:	68 dc 90 01 00       	push   $0x190dc
   12af7:	e8 34 5f 00 00       	call   18a30 <log_printf>
   12afc:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   12aff:	83 ec 0c             	sub    $0xc,%esp
   12b02:	68 f0 91 01 00       	push   $0x191f0
   12b07:	e8 24 5f 00 00       	call   18a30 <log_printf>
   12b0c:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   12b0f:	8b 45 08             	mov    0x8(%ebp),%eax
   12b12:	8b 40 34             	mov    0x34(%eax),%eax
   12b15:	83 e0 01             	and    $0x1,%eax
   12b18:	85 c0                	test   %eax,%eax
   12b1a:	74 12                	je     12b2e <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12b1c:	83 ec 0c             	sub    $0xc,%esp
   12b1f:	68 1c 92 01 00       	push   $0x1921c
   12b24:	e8 07 5f 00 00       	call   18a30 <log_printf>
   12b29:	83 c4 10             	add    $0x10,%esp
   12b2c:	eb 10                	jmp    12b3e <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   12b2e:	83 ec 0c             	sub    $0xc,%esp
   12b31:	68 98 92 01 00       	push   $0x19298
   12b36:	e8 f5 5e 00 00       	call   18a30 <log_printf>
   12b3b:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   12b3e:	8b 45 08             	mov    0x8(%ebp),%eax
   12b41:	8b 40 34             	mov    0x34(%eax),%eax
   12b44:	83 e0 02             	and    $0x2,%eax
   12b47:	85 c0                	test   %eax,%eax
   12b49:	74 12                	je     12b5d <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   12b4b:	83 ec 0c             	sub    $0xc,%esp
   12b4e:	68 f0 92 01 00       	push   $0x192f0
   12b53:	e8 d8 5e 00 00       	call   18a30 <log_printf>
   12b58:	83 c4 10             	add    $0x10,%esp
   12b5b:	eb 10                	jmp    12b6d <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   12b5d:	83 ec 0c             	sub    $0xc,%esp
   12b60:	68 3c 93 01 00       	push   $0x1933c
   12b65:	e8 c6 5e 00 00       	call   18a30 <log_printf>
   12b6a:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   12b6d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b70:	8b 40 34             	mov    0x34(%eax),%eax
   12b73:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12b78:	83 ec 08             	sub    $0x8,%esp
   12b7b:	50                   	push   %eax
   12b7c:	68 68 93 01 00       	push   $0x19368
   12b81:	e8 aa 5e 00 00       	call   18a30 <log_printf>
   12b86:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   12b89:	83 ec 0c             	sub    $0xc,%esp
   12b8c:	ff 75 08             	pushl  0x8(%ebp)
   12b8f:	e8 79 fc ff ff       	call   1280d <dump_core_regs>
   12b94:	83 c4 10             	add    $0x10,%esp
    if (frame->cs & 0x3) {
   12b97:	8b 45 08             	mov    0x8(%ebp),%eax
   12b9a:	8b 40 3c             	mov    0x3c(%eax),%eax
   12b9d:	83 e0 03             	and    $0x3,%eax
   12ba0:	85 c0                	test   %eax,%eax
   12ba2:	74 14                	je     12bb8 <do_handler_general_protection+0xcf>
        sys_exit(frame->error_code);
   12ba4:	8b 45 08             	mov    0x8(%ebp),%eax
   12ba7:	8b 40 34             	mov    0x34(%eax),%eax
   12baa:	83 ec 0c             	sub    $0xc,%esp
   12bad:	50                   	push   %eax
   12bae:	e8 e8 f7 ff ff       	call   1239b <sys_exit>
   12bb3:	83 c4 10             	add    $0x10,%esp
    } else {
        for (;;) {
            hlt();
        }
    }
}
   12bb6:	eb 07                	jmp    12bbf <do_handler_general_protection+0xd6>
            hlt();
   12bb8:	e8 2e fc ff ff       	call   127eb <hlt>
   12bbd:	eb f9                	jmp    12bb8 <do_handler_general_protection+0xcf>
}
   12bbf:	c9                   	leave  
   12bc0:	c3                   	ret    

00012bc1 <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t * frame) {
   12bc1:	55                   	push   %ebp
   12bc2:	89 e5                	mov    %esp,%ebp
   12bc4:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12bc7:	83 ec 0c             	sub    $0xc,%esp
   12bca:	68 dc 90 01 00       	push   $0x190dc
   12bcf:	e8 5c 5e 00 00       	call   18a30 <log_printf>
   12bd4:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   12bd7:	83 ec 0c             	sub    $0xc,%esp
   12bda:	68 7c 93 01 00       	push   $0x1937c
   12bdf:	e8 4c 5e 00 00       	call   18a30 <log_printf>
   12be4:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12be7:	8b 45 08             	mov    0x8(%ebp),%eax
   12bea:	8b 40 34             	mov    0x34(%eax),%eax
   12bed:	83 e0 01             	and    $0x1,%eax
   12bf0:	85 c0                	test   %eax,%eax
   12bf2:	74 18                	je     12c0c <do_handler_page_fault+0x4b>
        log_printf("\tpage-level protection violation: 0x%x.", read_cr2());
   12bf4:	e8 b9 fb ff ff       	call   127b2 <read_cr2>
   12bf9:	83 ec 08             	sub    $0x8,%esp
   12bfc:	50                   	push   %eax
   12bfd:	68 a0 93 01 00       	push   $0x193a0
   12c02:	e8 29 5e 00 00       	call   18a30 <log_printf>
   12c07:	83 c4 10             	add    $0x10,%esp
   12c0a:	eb 16                	jmp    12c22 <do_handler_page_fault+0x61>
    } else {
         log_printf("\tPage doesn't present 0x%x", read_cr2());
   12c0c:	e8 a1 fb ff ff       	call   127b2 <read_cr2>
   12c11:	83 ec 08             	sub    $0x8,%esp
   12c14:	50                   	push   %eax
   12c15:	68 c8 93 01 00       	push   $0x193c8
   12c1a:	e8 11 5e 00 00       	call   18a30 <log_printf>
   12c1f:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12c22:	8b 45 08             	mov    0x8(%ebp),%eax
   12c25:	8b 40 34             	mov    0x34(%eax),%eax
   12c28:	83 e0 02             	and    $0x2,%eax
   12c2b:	85 c0                	test   %eax,%eax
   12c2d:	74 12                	je     12c41 <do_handler_page_fault+0x80>
        log_printf("\tThe access causing the fault was a read.");
   12c2f:	83 ec 0c             	sub    $0xc,%esp
   12c32:	68 e4 93 01 00       	push   $0x193e4
   12c37:	e8 f4 5d 00 00       	call   18a30 <log_printf>
   12c3c:	83 c4 10             	add    $0x10,%esp
   12c3f:	eb 10                	jmp    12c51 <do_handler_page_fault+0x90>
    } else {
        log_printf("\tThe access causing the fault was a write.");
   12c41:	83 ec 0c             	sub    $0xc,%esp
   12c44:	68 10 94 01 00       	push   $0x19410
   12c49:	e8 e2 5d 00 00       	call   18a30 <log_printf>
   12c4e:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   12c51:	8b 45 08             	mov    0x8(%ebp),%eax
   12c54:	8b 40 34             	mov    0x34(%eax),%eax
   12c57:	83 e0 02             	and    $0x2,%eax
   12c5a:	85 c0                	test   %eax,%eax
   12c5c:	74 12                	je     12c70 <do_handler_page_fault+0xaf>
        log_printf("\tA supervisor-mode access caused the fault.");
   12c5e:	83 ec 0c             	sub    $0xc,%esp
   12c61:	68 3c 94 01 00       	push   $0x1943c
   12c66:	e8 c5 5d 00 00       	call   18a30 <log_printf>
   12c6b:	83 c4 10             	add    $0x10,%esp
   12c6e:	eb 10                	jmp    12c80 <do_handler_page_fault+0xbf>
    } else {
        log_printf("\tA user-mode access caused the fault.");
   12c70:	83 ec 0c             	sub    $0xc,%esp
   12c73:	68 68 94 01 00       	push   $0x19468
   12c78:	e8 b3 5d 00 00       	call   18a30 <log_printf>
   12c7d:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   12c80:	83 ec 0c             	sub    $0xc,%esp
   12c83:	ff 75 08             	pushl  0x8(%ebp)
   12c86:	e8 82 fb ff ff       	call   1280d <dump_core_regs>
   12c8b:	83 c4 10             	add    $0x10,%esp
    if (frame->cs & 0x3) {
   12c8e:	8b 45 08             	mov    0x8(%ebp),%eax
   12c91:	8b 40 3c             	mov    0x3c(%eax),%eax
   12c94:	83 e0 03             	and    $0x3,%eax
   12c97:	85 c0                	test   %eax,%eax
   12c99:	74 14                	je     12caf <do_handler_page_fault+0xee>
        sys_exit(frame->error_code);
   12c9b:	8b 45 08             	mov    0x8(%ebp),%eax
   12c9e:	8b 40 34             	mov    0x34(%eax),%eax
   12ca1:	83 ec 0c             	sub    $0xc,%esp
   12ca4:	50                   	push   %eax
   12ca5:	e8 f1 f6 ff ff       	call   1239b <sys_exit>
   12caa:	83 c4 10             	add    $0x10,%esp
        for (;;) {
            hlt();
        }
    }

}
   12cad:	eb 07                	jmp    12cb6 <do_handler_page_fault+0xf5>
            hlt();
   12caf:	e8 37 fb ff ff       	call   127eb <hlt>
   12cb4:	eb f9                	jmp    12caf <do_handler_page_fault+0xee>
}
   12cb6:	c9                   	leave  
   12cb7:	c3                   	ret    

00012cb8 <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t * frame) {
   12cb8:	55                   	push   %ebp
   12cb9:	89 e5                	mov    %esp,%ebp
   12cbb:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   12cbe:	83 ec 08             	sub    $0x8,%esp
   12cc1:	68 8e 94 01 00       	push   $0x1948e
   12cc6:	ff 75 08             	pushl  0x8(%ebp)
   12cc9:	e8 3e fc ff ff       	call   1290c <do_default_handler>
   12cce:	83 c4 10             	add    $0x10,%esp
}
   12cd1:	90                   	nop
   12cd2:	c9                   	leave  
   12cd3:	c3                   	ret    

00012cd4 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t * frame) {
   12cd4:	55                   	push   %ebp
   12cd5:	89 e5                	mov    %esp,%ebp
   12cd7:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   12cda:	83 ec 08             	sub    $0x8,%esp
   12cdd:	68 ac 94 01 00       	push   $0x194ac
   12ce2:	ff 75 08             	pushl  0x8(%ebp)
   12ce5:	e8 22 fc ff ff       	call   1290c <do_default_handler>
   12cea:	83 c4 10             	add    $0x10,%esp
}
   12ced:	90                   	nop
   12cee:	c9                   	leave  
   12cef:	c3                   	ret    

00012cf0 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t * frame) {
   12cf0:	55                   	push   %ebp
   12cf1:	89 e5                	mov    %esp,%ebp
   12cf3:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   12cf6:	83 ec 08             	sub    $0x8,%esp
   12cf9:	68 bd 94 01 00       	push   $0x194bd
   12cfe:	ff 75 08             	pushl  0x8(%ebp)
   12d01:	e8 06 fc ff ff       	call   1290c <do_default_handler>
   12d06:	83 c4 10             	add    $0x10,%esp
}
   12d09:	90                   	nop
   12d0a:	c9                   	leave  
   12d0b:	c3                   	ret    

00012d0c <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t * frame) {
   12d0c:	55                   	push   %ebp
   12d0d:	89 e5                	mov    %esp,%ebp
   12d0f:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   12d12:	83 ec 08             	sub    $0x8,%esp
   12d15:	68 cc 94 01 00       	push   $0x194cc
   12d1a:	ff 75 08             	pushl  0x8(%ebp)
   12d1d:	e8 ea fb ff ff       	call   1290c <do_default_handler>
   12d22:	83 c4 10             	add    $0x10,%esp
}
   12d25:	90                   	nop
   12d26:	c9                   	leave  
   12d27:	c3                   	ret    

00012d28 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t * frame) {
   12d28:	55                   	push   %ebp
   12d29:	89 e5                	mov    %esp,%ebp
   12d2b:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   12d2e:	83 ec 08             	sub    $0x8,%esp
   12d31:	68 eb 94 01 00       	push   $0x194eb
   12d36:	ff 75 08             	pushl  0x8(%ebp)
   12d39:	e8 ce fb ff ff       	call   1290c <do_default_handler>
   12d3e:	83 c4 10             	add    $0x10,%esp
}
   12d41:	90                   	nop
   12d42:	c9                   	leave  
   12d43:	c3                   	ret    

00012d44 <init_pic>:

static void init_pic(void) {
   12d44:	55                   	push   %ebp
   12d45:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   12d47:	6a 11                	push   $0x11
   12d49:	6a 20                	push   $0x20
   12d4b:	e8 35 fa ff ff       	call   12785 <outb>
   12d50:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   12d53:	6a 20                	push   $0x20
   12d55:	6a 21                	push   $0x21
   12d57:	e8 29 fa ff ff       	call   12785 <outb>
   12d5c:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   12d5f:	6a 04                	push   $0x4
   12d61:	6a 21                	push   $0x21
   12d63:	e8 1d fa ff ff       	call   12785 <outb>
   12d68:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   12d6b:	6a 01                	push   $0x1
   12d6d:	6a 21                	push   $0x21
   12d6f:	e8 11 fa ff ff       	call   12785 <outb>
   12d74:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   12d77:	6a 11                	push   $0x11
   12d79:	68 a0 00 00 00       	push   $0xa0
   12d7e:	e8 02 fa ff ff       	call   12785 <outb>
   12d83:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   12d86:	6a 28                	push   $0x28
   12d88:	68 a1 00 00 00       	push   $0xa1
   12d8d:	e8 f3 f9 ff ff       	call   12785 <outb>
   12d92:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   12d95:	6a 02                	push   $0x2
   12d97:	68 a1 00 00 00       	push   $0xa1
   12d9c:	e8 e4 f9 ff ff       	call   12785 <outb>
   12da1:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   12da4:	6a 01                	push   $0x1
   12da6:	68 a1 00 00 00       	push   $0xa1
   12dab:	e8 d5 f9 ff ff       	call   12785 <outb>
   12db0:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   12db3:	68 fb 00 00 00       	push   $0xfb
   12db8:	6a 21                	push   $0x21
   12dba:	e8 c6 f9 ff ff       	call   12785 <outb>
   12dbf:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   12dc2:	68 ff 00 00 00       	push   $0xff
   12dc7:	68 a1 00 00 00       	push   $0xa1
   12dcc:	e8 b4 f9 ff ff       	call   12785 <outb>
   12dd1:	83 c4 08             	add    $0x8,%esp
}
   12dd4:	90                   	nop
   12dd5:	c9                   	leave  
   12dd6:	c3                   	ret    

00012dd7 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   12dd7:	55                   	push   %ebp
   12dd8:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   12dda:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    // 从片也可能需要发送EOI
    if (irq_num >= 8) {
   12dde:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12de2:	7e 0f                	jle    12df3 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   12de4:	6a 20                	push   $0x20
   12de6:	68 a0 00 00 00       	push   $0xa0
   12deb:	e8 95 f9 ff ff       	call   12785 <outb>
   12df0:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   12df3:	6a 20                	push   $0x20
   12df5:	6a 20                	push   $0x20
   12df7:	e8 89 f9 ff ff       	call   12785 <outb>
   12dfc:	83 c4 08             	add    $0x8,%esp
}
   12dff:	90                   	nop
   12e00:	c9                   	leave  
   12e01:	c3                   	ret    

00012e02 <irq_init>:

/**
 * @brief 中断和异常初始化
 */
void irq_init(void) {
   12e02:	55                   	push   %ebp
   12e03:	89 e5                	mov    %esp,%ebp
   12e05:	83 ec 18             	sub    $0x18,%esp
	for (uint32_t i = 0; i < IDT_TABLE_NR; i++) {
   12e08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12e0f:	eb 25                	jmp    12e36 <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   12e11:	ba 28 00 01 00       	mov    $0x10028,%edx
   12e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e19:	c1 e0 03             	shl    $0x3,%eax
   12e1c:	05 00 52 03 00       	add    $0x35200,%eax
   12e21:	68 00 8e 00 00       	push   $0x8e00
   12e26:	52                   	push   %edx
   12e27:	6a 08                	push   $0x8
   12e29:	50                   	push   %eax
   12e2a:	e8 87 f7 ff ff       	call   125b6 <gate_desc_set>
   12e2f:	83 c4 10             	add    $0x10,%esp
	for (uint32_t i = 0; i < IDT_TABLE_NR; i++) {
   12e32:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12e36:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12e3a:	76 d5                	jbe    12e11 <irq_init+0xf>
                  GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
	}

	// 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   12e3c:	83 ec 08             	sub    $0x8,%esp
   12e3f:	68 47 00 01 00       	push   $0x10047
   12e44:	6a 00                	push   $0x0
   12e46:	e8 65 01 00 00       	call   12fb0 <irq_install>
   12e4b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   12e4e:	83 ec 08             	sub    $0x8,%esp
   12e51:	68 66 00 01 00       	push   $0x10066
   12e56:	6a 01                	push   $0x1
   12e58:	e8 53 01 00 00       	call   12fb0 <irq_install>
   12e5d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   12e60:	83 ec 08             	sub    $0x8,%esp
   12e63:	68 85 00 01 00       	push   $0x10085
   12e68:	6a 02                	push   $0x2
   12e6a:	e8 41 01 00 00       	call   12fb0 <irq_install>
   12e6f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   12e72:	83 ec 08             	sub    $0x8,%esp
   12e75:	68 a4 00 01 00       	push   $0x100a4
   12e7a:	6a 03                	push   $0x3
   12e7c:	e8 2f 01 00 00       	call   12fb0 <irq_install>
   12e81:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   12e84:	83 ec 08             	sub    $0x8,%esp
   12e87:	68 c3 00 01 00       	push   $0x100c3
   12e8c:	6a 04                	push   $0x4
   12e8e:	e8 1d 01 00 00       	call   12fb0 <irq_install>
   12e93:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   12e96:	83 ec 08             	sub    $0x8,%esp
   12e99:	68 e2 00 01 00       	push   $0x100e2
   12e9e:	6a 05                	push   $0x5
   12ea0:	e8 0b 01 00 00       	call   12fb0 <irq_install>
   12ea5:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   12ea8:	83 ec 08             	sub    $0x8,%esp
   12eab:	68 01 01 01 00       	push   $0x10101
   12eb0:	6a 06                	push   $0x6
   12eb2:	e8 f9 00 00 00       	call   12fb0 <irq_install>
   12eb7:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   12eba:	83 ec 08             	sub    $0x8,%esp
   12ebd:	68 20 01 01 00       	push   $0x10120
   12ec2:	6a 07                	push   $0x7
   12ec4:	e8 e7 00 00 00       	call   12fb0 <irq_install>
   12ec9:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   12ecc:	83 ec 08             	sub    $0x8,%esp
   12ecf:	68 3f 01 01 00       	push   $0x1013f
   12ed4:	6a 08                	push   $0x8
   12ed6:	e8 d5 00 00 00       	call   12fb0 <irq_install>
   12edb:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   12ede:	83 ec 08             	sub    $0x8,%esp
   12ee1:	68 5c 01 01 00       	push   $0x1015c
   12ee6:	6a 0a                	push   $0xa
   12ee8:	e8 c3 00 00 00       	call   12fb0 <irq_install>
   12eed:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   12ef0:	83 ec 08             	sub    $0x8,%esp
   12ef3:	68 79 01 01 00       	push   $0x10179
   12ef8:	6a 0b                	push   $0xb
   12efa:	e8 b1 00 00 00       	call   12fb0 <irq_install>
   12eff:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   12f02:	83 ec 08             	sub    $0x8,%esp
   12f05:	68 96 01 01 00       	push   $0x10196
   12f0a:	6a 0c                	push   $0xc
   12f0c:	e8 9f 00 00 00       	call   12fb0 <irq_install>
   12f11:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   12f14:	83 ec 08             	sub    $0x8,%esp
   12f17:	68 b3 01 01 00       	push   $0x101b3
   12f1c:	6a 0d                	push   $0xd
   12f1e:	e8 8d 00 00 00       	call   12fb0 <irq_install>
   12f23:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   12f26:	83 ec 08             	sub    $0x8,%esp
   12f29:	68 d0 01 01 00       	push   $0x101d0
   12f2e:	6a 0e                	push   $0xe
   12f30:	e8 7b 00 00 00       	call   12fb0 <irq_install>
   12f35:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   12f38:	83 ec 08             	sub    $0x8,%esp
   12f3b:	68 ed 01 01 00       	push   $0x101ed
   12f40:	6a 10                	push   $0x10
   12f42:	e8 69 00 00 00       	call   12fb0 <irq_install>
   12f47:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   12f4a:	83 ec 08             	sub    $0x8,%esp
   12f4d:	68 0c 02 01 00       	push   $0x1020c
   12f52:	6a 11                	push   $0x11
   12f54:	e8 57 00 00 00       	call   12fb0 <irq_install>
   12f59:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   12f5c:	83 ec 08             	sub    $0x8,%esp
   12f5f:	68 29 02 01 00       	push   $0x10229
   12f64:	6a 12                	push   $0x12
   12f66:	e8 45 00 00 00       	call   12fb0 <irq_install>
   12f6b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   12f6e:	83 ec 08             	sub    $0x8,%esp
   12f71:	68 48 02 01 00       	push   $0x10248
   12f76:	6a 13                	push   $0x13
   12f78:	e8 33 00 00 00       	call   12fb0 <irq_install>
   12f7d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   12f80:	83 ec 08             	sub    $0x8,%esp
   12f83:	68 67 02 01 00       	push   $0x10267
   12f88:	6a 14                	push   $0x14
   12f8a:	e8 21 00 00 00       	call   12fb0 <irq_install>
   12f8f:	83 c4 10             	add    $0x10,%esp


	lidt((uint32_t)idt_table, sizeof(idt_table));
   12f92:	b8 00 52 03 00       	mov    $0x35200,%eax
   12f97:	83 ec 08             	sub    $0x8,%esp
   12f9a:	68 00 04 00 00       	push   $0x400
   12f9f:	50                   	push   %eax
   12fa0:	e8 1e f8 ff ff       	call   127c3 <lidt>
   12fa5:	83 c4 10             	add    $0x10,%esp

	// 初始化pic 控制器
	init_pic();
   12fa8:	e8 97 fd ff ff       	call   12d44 <init_pic>
}
   12fad:	90                   	nop
   12fae:	c9                   	leave  
   12faf:	c3                   	ret    

00012fb0 <irq_install>:

/**
 * @brief 安装中断或异常处理程序
 */
int irq_install(int irq_num, irq_handler_t handler) {
   12fb0:	55                   	push   %ebp
   12fb1:	89 e5                	mov    %esp,%ebp
   12fb3:	83 ec 08             	sub    $0x8,%esp
	if (irq_num >= IDT_TABLE_NR) {
   12fb6:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12fba:	7e 07                	jle    12fc3 <irq_install+0x13>
		return -1;
   12fbc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12fc1:	eb 25                	jmp    12fe8 <irq_install+0x38>
	}

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t) handler,
   12fc3:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fc6:	8b 55 08             	mov    0x8(%ebp),%edx
   12fc9:	c1 e2 03             	shl    $0x3,%edx
   12fcc:	81 c2 00 52 03 00    	add    $0x35200,%edx
   12fd2:	68 00 8e 00 00       	push   $0x8e00
   12fd7:	50                   	push   %eax
   12fd8:	6a 08                	push   $0x8
   12fda:	52                   	push   %edx
   12fdb:	e8 d6 f5 ff ff       	call   125b6 <gate_desc_set>
   12fe0:	83 c4 10             	add    $0x10,%esp
                  GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
	return 0;
   12fe3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12fe8:	c9                   	leave  
   12fe9:	c3                   	ret    

00012fea <irq_enable>:

void irq_enable(int irq_num) {
   12fea:	55                   	push   %ebp
   12feb:	89 e5                	mov    %esp,%ebp
   12fed:	53                   	push   %ebx
   12fee:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   12ff1:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12ff5:	7e 78                	jle    1306f <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   12ff7:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   12ffb:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12fff:	7f 32                	jg     13033 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   13001:	6a 21                	push   $0x21
   13003:	e8 60 f7 ff ff       	call   12768 <inb>
   13008:	83 c4 04             	add    $0x4,%esp
   1300b:	89 c2                	mov    %eax,%edx
   1300d:	8b 45 08             	mov    0x8(%ebp),%eax
   13010:	bb 01 00 00 00       	mov    $0x1,%ebx
   13015:	89 c1                	mov    %eax,%ecx
   13017:	d3 e3                	shl    %cl,%ebx
   13019:	89 d8                	mov    %ebx,%eax
   1301b:	f7 d0                	not    %eax
   1301d:	21 d0                	and    %edx,%eax
   1301f:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   13022:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   13026:	50                   	push   %eax
   13027:	6a 21                	push   $0x21
   13029:	e8 57 f7 ff ff       	call   12785 <outb>
   1302e:	83 c4 08             	add    $0x8,%esp
   13031:	eb 3d                	jmp    13070 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   13033:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   13037:	68 a1 00 00 00       	push   $0xa1
   1303c:	e8 27 f7 ff ff       	call   12768 <inb>
   13041:	83 c4 04             	add    $0x4,%esp
   13044:	89 c2                	mov    %eax,%edx
   13046:	8b 45 08             	mov    0x8(%ebp),%eax
   13049:	bb 01 00 00 00       	mov    $0x1,%ebx
   1304e:	89 c1                	mov    %eax,%ecx
   13050:	d3 e3                	shl    %cl,%ebx
   13052:	89 d8                	mov    %ebx,%eax
   13054:	f7 d0                	not    %eax
   13056:	21 d0                	and    %edx,%eax
   13058:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   1305b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1305f:	50                   	push   %eax
   13060:	68 a1 00 00 00       	push   $0xa1
   13065:	e8 1b f7 ff ff       	call   12785 <outb>
   1306a:	83 c4 08             	add    $0x8,%esp
   1306d:	eb 01                	jmp    13070 <irq_enable+0x86>
        return;
   1306f:	90                   	nop
    }
}
   13070:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13073:	c9                   	leave  
   13074:	c3                   	ret    

00013075 <irq_disable>:

void irq_disable(int irq_num) {
   13075:	55                   	push   %ebp
   13076:	89 e5                	mov    %esp,%ebp
   13078:	53                   	push   %ebx
   13079:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   1307c:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   13080:	7e 74                	jle    130f6 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   13082:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   13086:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1308a:	7f 30                	jg     130bc <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1308c:	6a 21                	push   $0x21
   1308e:	e8 d5 f6 ff ff       	call   12768 <inb>
   13093:	83 c4 04             	add    $0x4,%esp
   13096:	89 c3                	mov    %eax,%ebx
   13098:	8b 45 08             	mov    0x8(%ebp),%eax
   1309b:	ba 01 00 00 00       	mov    $0x1,%edx
   130a0:	89 c1                	mov    %eax,%ecx
   130a2:	d3 e2                	shl    %cl,%edx
   130a4:	89 d0                	mov    %edx,%eax
   130a6:	09 d8                	or     %ebx,%eax
   130a8:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   130ab:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   130af:	50                   	push   %eax
   130b0:	6a 21                	push   $0x21
   130b2:	e8 ce f6 ff ff       	call   12785 <outb>
   130b7:	83 c4 08             	add    $0x8,%esp
   130ba:	eb 3b                	jmp    130f7 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   130bc:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   130c0:	68 a1 00 00 00       	push   $0xa1
   130c5:	e8 9e f6 ff ff       	call   12768 <inb>
   130ca:	83 c4 04             	add    $0x4,%esp
   130cd:	89 c3                	mov    %eax,%ebx
   130cf:	8b 45 08             	mov    0x8(%ebp),%eax
   130d2:	ba 01 00 00 00       	mov    $0x1,%edx
   130d7:	89 c1                	mov    %eax,%ecx
   130d9:	d3 e2                	shl    %cl,%edx
   130db:	89 d0                	mov    %edx,%eax
   130dd:	09 d8                	or     %ebx,%eax
   130df:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   130e2:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   130e6:	50                   	push   %eax
   130e7:	68 a1 00 00 00       	push   $0xa1
   130ec:	e8 94 f6 ff ff       	call   12785 <outb>
   130f1:	83 c4 08             	add    $0x8,%esp
   130f4:	eb 01                	jmp    130f7 <irq_disable+0x82>
        return;
   130f6:	90                   	nop
    }
}
   130f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   130fa:	c9                   	leave  
   130fb:	c3                   	ret    

000130fc <irq_disable_global>:

void irq_disable_global(void) {
   130fc:	55                   	push   %ebp
   130fd:	89 e5                	mov    %esp,%ebp
    cli();
   130ff:	e8 a0 f6 ff ff       	call   127a4 <cli>
}
   13104:	90                   	nop
   13105:	5d                   	pop    %ebp
   13106:	c3                   	ret    

00013107 <irq_enable_global>:

void irq_enable_global(void) {
   13107:	55                   	push   %ebp
   13108:	89 e5                	mov    %esp,%ebp
    sti();
   1310a:	e8 9c f6 ff ff       	call   127ab <sti>
}
   1310f:	90                   	nop
   13110:	5d                   	pop    %ebp
   13111:	c3                   	ret    

00013112 <irq_enter_protection>:

/**
 * @brief 进入中断保护
 */
irq_state_t irq_enter_protection (void) {
   13112:	55                   	push   %ebp
   13113:	89 e5                	mov    %esp,%ebp
   13115:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   13118:	e8 d5 f6 ff ff       	call   127f2 <read_eflags>
   1311d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   13120:	e8 d7 ff ff ff       	call   130fc <irq_disable_global>
    return state;
   13125:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13128:	c9                   	leave  
   13129:	c3                   	ret    

0001312a <irq_leave_protection>:

/**
 * @brief 退出中断保护
 */
void irq_leave_protection (irq_state_t state) {
   1312a:	55                   	push   %ebp
   1312b:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   1312d:	ff 75 08             	pushl  0x8(%ebp)
   13130:	e8 cd f6 ff ff       	call   12802 <write_eflags>
   13135:	83 c4 04             	add    $0x4,%esp
}
   13138:	90                   	nop
   13139:	c9                   	leave  
   1313a:	c3                   	ret    

0001313b <inb>:
static inline uint8_t inb(uint16_t  port) {
   1313b:	55                   	push   %ebp
   1313c:	89 e5                	mov    %esp,%ebp
   1313e:	83 ec 14             	sub    $0x14,%esp
   13141:	8b 45 08             	mov    0x8(%ebp),%eax
   13144:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   13148:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1314c:	89 c2                	mov    %eax,%edx
   1314e:	ec                   	in     (%dx),%al
   1314f:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   13152:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13156:	c9                   	leave  
   13157:	c3                   	ret    

00013158 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   13158:	55                   	push   %ebp
   13159:	89 e5                	mov    %esp,%ebp
   1315b:	83 ec 08             	sub    $0x8,%esp
   1315e:	8b 55 08             	mov    0x8(%ebp),%edx
   13161:	8b 45 0c             	mov    0xc(%ebp),%eax
   13164:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   13168:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1316b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1316f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13173:	ee                   	out    %al,(%dx)
}
   13174:	90                   	nop
   13175:	c9                   	leave  
   13176:	c3                   	ret    

00013177 <read_cursor_pos>:
static console_t console_buf[CONSOLE_NR];

/**
 * @brief 读取当前光标的位置
 */
static int read_cursor_pos (void) {
   13177:	55                   	push   %ebp
   13178:	89 e5                	mov    %esp,%ebp
   1317a:	83 ec 18             	sub    $0x18,%esp
    int pos;

    irq_state_t state = irq_enter_protection();
   1317d:	e8 90 ff ff ff       	call   13112 <irq_enter_protection>
   13182:	89 45 f4             	mov    %eax,-0xc(%ebp)
 	outb(0x3D4, 0x0F);		// 写低地址
   13185:	83 ec 08             	sub    $0x8,%esp
   13188:	6a 0f                	push   $0xf
   1318a:	68 d4 03 00 00       	push   $0x3d4
   1318f:	e8 c4 ff ff ff       	call   13158 <outb>
   13194:	83 c4 10             	add    $0x10,%esp
	pos = inb(0x3D5);
   13197:	83 ec 0c             	sub    $0xc,%esp
   1319a:	68 d5 03 00 00       	push   $0x3d5
   1319f:	e8 97 ff ff ff       	call   1313b <inb>
   131a4:	83 c4 10             	add    $0x10,%esp
   131a7:	0f b6 c0             	movzbl %al,%eax
   131aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(0x3D4, 0x0E);		// 写高地址
   131ad:	83 ec 08             	sub    $0x8,%esp
   131b0:	6a 0e                	push   $0xe
   131b2:	68 d4 03 00 00       	push   $0x3d4
   131b7:	e8 9c ff ff ff       	call   13158 <outb>
   131bc:	83 c4 10             	add    $0x10,%esp
	pos |= inb(0x3D5) << 8;   
   131bf:	83 ec 0c             	sub    $0xc,%esp
   131c2:	68 d5 03 00 00       	push   $0x3d5
   131c7:	e8 6f ff ff ff       	call   1313b <inb>
   131cc:	83 c4 10             	add    $0x10,%esp
   131cf:	0f b6 c0             	movzbl %al,%eax
   131d2:	c1 e0 08             	shl    $0x8,%eax
   131d5:	09 45 f0             	or     %eax,-0x10(%ebp)
    irq_leave_protection(state);
   131d8:	83 ec 0c             	sub    $0xc,%esp
   131db:	ff 75 f4             	pushl  -0xc(%ebp)
   131de:	e8 47 ff ff ff       	call   1312a <irq_leave_protection>
   131e3:	83 c4 10             	add    $0x10,%esp
    return pos;
   131e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   131e9:	c9                   	leave  
   131ea:	c3                   	ret    

000131eb <update_cursor_pos>:

/**
 * @brief 更新鼠标的位置
 */
static void update_cursor_pos (console_t * console) {
   131eb:	55                   	push   %ebp
   131ec:	89 e5                	mov    %esp,%ebp
   131ee:	83 ec 18             	sub    $0x18,%esp
	uint16_t pos = (console - console_buf) * (console->display_cols * console->display_rows);
   131f1:	8b 45 08             	mov    0x8(%ebp),%eax
   131f4:	ba 00 56 03 00       	mov    $0x35600,%edx
   131f9:	29 d0                	sub    %edx,%eax
   131fb:	c1 f8 03             	sar    $0x3,%eax
   131fe:	69 c0 c5 4e ec c4    	imul   $0xc4ec4ec5,%eax,%eax
   13204:	89 c2                	mov    %eax,%edx
   13206:	8b 45 08             	mov    0x8(%ebp),%eax
   13209:	8b 40 14             	mov    0x14(%eax),%eax
   1320c:	89 c1                	mov    %eax,%ecx
   1320e:	8b 45 08             	mov    0x8(%ebp),%eax
   13211:	8b 40 10             	mov    0x10(%eax),%eax
   13214:	0f af c1             	imul   %ecx,%eax
   13217:	0f af c2             	imul   %edx,%eax
   1321a:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    pos += console->cursor_row *  console->display_cols + console->cursor_col;
   1321e:	8b 45 08             	mov    0x8(%ebp),%eax
   13221:	8b 40 08             	mov    0x8(%eax),%eax
   13224:	89 c2                	mov    %eax,%edx
   13226:	8b 45 08             	mov    0x8(%ebp),%eax
   13229:	8b 40 14             	mov    0x14(%eax),%eax
   1322c:	0f af d0             	imul   %eax,%edx
   1322f:	8b 45 08             	mov    0x8(%ebp),%eax
   13232:	8b 40 0c             	mov    0xc(%eax),%eax
   13235:	01 d0                	add    %edx,%eax
   13237:	66 01 45 f6          	add    %ax,-0xa(%ebp)

    irq_state_t state = irq_enter_protection();
   1323b:	e8 d2 fe ff ff       	call   13112 <irq_enter_protection>
   13240:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(0x3D4, 0x0F);		// 写低地址
   13243:	83 ec 08             	sub    $0x8,%esp
   13246:	6a 0f                	push   $0xf
   13248:	68 d4 03 00 00       	push   $0x3d4
   1324d:	e8 06 ff ff ff       	call   13158 <outb>
   13252:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) (pos & 0xFF));
   13255:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   13259:	0f b6 c0             	movzbl %al,%eax
   1325c:	83 ec 08             	sub    $0x8,%esp
   1325f:	50                   	push   %eax
   13260:	68 d5 03 00 00       	push   $0x3d5
   13265:	e8 ee fe ff ff       	call   13158 <outb>
   1326a:	83 c4 10             	add    $0x10,%esp
	outb(0x3D4, 0x0E);		// 写高地址
   1326d:	83 ec 08             	sub    $0x8,%esp
   13270:	6a 0e                	push   $0xe
   13272:	68 d4 03 00 00       	push   $0x3d4
   13277:	e8 dc fe ff ff       	call   13158 <outb>
   1327c:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
   1327f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   13283:	66 c1 e8 08          	shr    $0x8,%ax
   13287:	0f b6 c0             	movzbl %al,%eax
   1328a:	83 ec 08             	sub    $0x8,%esp
   1328d:	50                   	push   %eax
   1328e:	68 d5 03 00 00       	push   $0x3d5
   13293:	e8 c0 fe ff ff       	call   13158 <outb>
   13298:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   1329b:	83 ec 0c             	sub    $0xc,%esp
   1329e:	ff 75 f0             	pushl  -0x10(%ebp)
   132a1:	e8 84 fe ff ff       	call   1312a <irq_leave_protection>
   132a6:	83 c4 10             	add    $0x10,%esp
}
   132a9:	90                   	nop
   132aa:	c9                   	leave  
   132ab:	c3                   	ret    

000132ac <console_set_cursor>:

void console_set_cursor(int idx, int visiable) {
   132ac:	55                   	push   %ebp
   132ad:	89 e5                	mov    %esp,%ebp
   132af:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   132b2:	8b 45 08             	mov    0x8(%ebp),%eax
   132b5:	6b c0 68             	imul   $0x68,%eax,%eax
   132b8:	05 00 56 03 00       	add    $0x35600,%eax
   132bd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    irq_state_t state = irq_enter_protection();
   132c0:	e8 4d fe ff ff       	call   13112 <irq_enter_protection>
   132c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (visiable) {
   132c8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   132cc:	74 79                	je     13347 <console_set_cursor+0x9b>
        outb(0x3D4, 0x0A);
   132ce:	83 ec 08             	sub    $0x8,%esp
   132d1:	6a 0a                	push   $0xa
   132d3:	68 d4 03 00 00       	push   $0x3d4
   132d8:	e8 7b fe ff ff       	call   13158 <outb>
   132dd:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, (inb(0x3D5) & 0xC0) | 0);
   132e0:	83 ec 0c             	sub    $0xc,%esp
   132e3:	68 d5 03 00 00       	push   $0x3d5
   132e8:	e8 4e fe ff ff       	call   1313b <inb>
   132ed:	83 c4 10             	add    $0x10,%esp
   132f0:	0f b6 c0             	movzbl %al,%eax
   132f3:	25 c0 00 00 00       	and    $0xc0,%eax
   132f8:	83 ec 08             	sub    $0x8,%esp
   132fb:	50                   	push   %eax
   132fc:	68 d5 03 00 00       	push   $0x3d5
   13301:	e8 52 fe ff ff       	call   13158 <outb>
   13306:	83 c4 10             	add    $0x10,%esp
        outb(0x3D4, 0x0B);
   13309:	83 ec 08             	sub    $0x8,%esp
   1330c:	6a 0b                	push   $0xb
   1330e:	68 d4 03 00 00       	push   $0x3d4
   13313:	e8 40 fe ff ff       	call   13158 <outb>
   13318:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, (inb(0x3D5) & 0xE0) | 15);
   1331b:	83 ec 0c             	sub    $0xc,%esp
   1331e:	68 d5 03 00 00       	push   $0x3d5
   13323:	e8 13 fe ff ff       	call   1313b <inb>
   13328:	83 c4 10             	add    $0x10,%esp
   1332b:	83 e0 e0             	and    $0xffffffe0,%eax
   1332e:	83 c8 0f             	or     $0xf,%eax
   13331:	0f b6 c0             	movzbl %al,%eax
   13334:	83 ec 08             	sub    $0x8,%esp
   13337:	50                   	push   %eax
   13338:	68 d5 03 00 00       	push   $0x3d5
   1333d:	e8 16 fe ff ff       	call   13158 <outb>
   13342:	83 c4 10             	add    $0x10,%esp
   13345:	eb 24                	jmp    1336b <console_set_cursor+0xbf>
    } else {
        outb(0x3D4, 0x0A);
   13347:	83 ec 08             	sub    $0x8,%esp
   1334a:	6a 0a                	push   $0xa
   1334c:	68 d4 03 00 00       	push   $0x3d4
   13351:	e8 02 fe ff ff       	call   13158 <outb>
   13356:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, 0x20);
   13359:	83 ec 08             	sub    $0x8,%esp
   1335c:	6a 20                	push   $0x20
   1335e:	68 d5 03 00 00       	push   $0x3d5
   13363:	e8 f0 fd ff ff       	call   13158 <outb>
   13368:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   1336b:	83 ec 0c             	sub    $0xc,%esp
   1336e:	ff 75 f0             	pushl  -0x10(%ebp)
   13371:	e8 b4 fd ff ff       	call   1312a <irq_leave_protection>
   13376:	83 c4 10             	add    $0x10,%esp
}
   13379:	90                   	nop
   1337a:	c9                   	leave  
   1337b:	c3                   	ret    

0001337c <console_select>:


void console_select(int idx) {
   1337c:	55                   	push   %ebp
   1337d:	89 e5                	mov    %esp,%ebp
   1337f:	83 ec 18             	sub    $0x18,%esp
    console_t * console = console_buf + idx;
   13382:	8b 45 08             	mov    0x8(%ebp),%eax
   13385:	6b c0 68             	imul   $0x68,%eax,%eax
   13388:	05 00 56 03 00       	add    $0x35600,%eax
   1338d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0) {
   13390:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13393:	8b 00                	mov    (%eax),%eax
   13395:	85 c0                	test   %eax,%eax
   13397:	75 0e                	jne    133a7 <console_select+0x2b>
        // 可能没有初始化，先初始化一下
        console_init(idx);
   13399:	83 ec 0c             	sub    $0xc,%esp
   1339c:	ff 75 08             	pushl  0x8(%ebp)
   1339f:	e8 9e 04 00 00       	call   13842 <console_init>
   133a4:	83 c4 10             	add    $0x10,%esp
    }

	uint16_t pos = idx * console->display_cols * console->display_rows;
   133a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   133aa:	8b 40 14             	mov    0x14(%eax),%eax
   133ad:	89 c2                	mov    %eax,%edx
   133af:	8b 45 08             	mov    0x8(%ebp),%eax
   133b2:	0f af d0             	imul   %eax,%edx
   133b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   133b8:	8b 40 10             	mov    0x10(%eax),%eax
   133bb:	0f af c2             	imul   %edx,%eax
   133be:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

	outb(0x3D4, 0xC);		// 写高地址
   133c2:	83 ec 08             	sub    $0x8,%esp
   133c5:	6a 0c                	push   $0xc
   133c7:	68 d4 03 00 00       	push   $0x3d4
   133cc:	e8 87 fd ff ff       	call   13158 <outb>
   133d1:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
   133d4:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   133d8:	66 c1 e8 08          	shr    $0x8,%ax
   133dc:	0f b6 c0             	movzbl %al,%eax
   133df:	83 ec 08             	sub    $0x8,%esp
   133e2:	50                   	push   %eax
   133e3:	68 d5 03 00 00       	push   $0x3d5
   133e8:	e8 6b fd ff ff       	call   13158 <outb>
   133ed:	83 c4 10             	add    $0x10,%esp
	outb(0x3D4, 0xD);		// 写低地址
   133f0:	83 ec 08             	sub    $0x8,%esp
   133f3:	6a 0d                	push   $0xd
   133f5:	68 d4 03 00 00       	push   $0x3d4
   133fa:	e8 59 fd ff ff       	call   13158 <outb>
   133ff:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) (pos & 0xFF));
   13402:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13406:	0f b6 c0             	movzbl %al,%eax
   13409:	83 ec 08             	sub    $0x8,%esp
   1340c:	50                   	push   %eax
   1340d:	68 d5 03 00 00       	push   $0x3d5
   13412:	e8 41 fd ff ff       	call   13158 <outb>
   13417:	83 c4 10             	add    $0x10,%esp

    // 更新光标到当前屏幕
    update_cursor_pos(console);
   1341a:	83 ec 0c             	sub    $0xc,%esp
   1341d:	ff 75 f4             	pushl  -0xc(%ebp)
   13420:	e8 c6 fd ff ff       	call   131eb <update_cursor_pos>
   13425:	83 c4 10             	add    $0x10,%esp
}
   13428:	90                   	nop
   13429:	c9                   	leave  
   1342a:	c3                   	ret    

0001342b <erase_rows>:
/**
 * @brief 擦除从start到end的行
 */
static void erase_rows (console_t * console, int start, int end) {
   1342b:	55                   	push   %ebp
   1342c:	89 e5                	mov    %esp,%ebp
   1342e:	83 ec 10             	sub    $0x10,%esp
    volatile disp_char_t * disp_start = console->disp_base + console->display_cols * start;
   13431:	8b 45 08             	mov    0x8(%ebp),%eax
   13434:	8b 10                	mov    (%eax),%edx
   13436:	8b 45 08             	mov    0x8(%ebp),%eax
   13439:	8b 40 14             	mov    0x14(%eax),%eax
   1343c:	0f af 45 0c          	imul   0xc(%ebp),%eax
   13440:	01 c0                	add    %eax,%eax
   13442:	01 d0                	add    %edx,%eax
   13444:	89 45 fc             	mov    %eax,-0x4(%ebp)
    volatile disp_char_t * disp_end = console->disp_base + console->display_cols * (end + 1);
   13447:	8b 45 08             	mov    0x8(%ebp),%eax
   1344a:	8b 10                	mov    (%eax),%edx
   1344c:	8b 45 08             	mov    0x8(%ebp),%eax
   1344f:	8b 40 14             	mov    0x14(%eax),%eax
   13452:	8b 4d 10             	mov    0x10(%ebp),%ecx
   13455:	83 c1 01             	add    $0x1,%ecx
   13458:	0f af c1             	imul   %ecx,%eax
   1345b:	01 c0                	add    %eax,%eax
   1345d:	01 d0                	add    %edx,%eax
   1345f:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (disp_start < disp_end) {
   13462:	eb 4d                	jmp    134b1 <erase_rows+0x86>
        disp_start->c = ' ';
   13464:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13467:	c6 00 20             	movb   $0x20,(%eax)
        disp_start->foreground = console->foreground;
   1346a:	8b 45 08             	mov    0x8(%ebp),%eax
   1346d:	8b 40 20             	mov    0x20(%eax),%eax
   13470:	c1 e0 04             	shl    $0x4,%eax
   13473:	c0 f8 04             	sar    $0x4,%al
   13476:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13479:	83 e0 0f             	and    $0xf,%eax
   1347c:	89 c1                	mov    %eax,%ecx
   1347e:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13482:	83 e0 f0             	and    $0xfffffff0,%eax
   13485:	09 c8                	or     %ecx,%eax
   13487:	88 42 01             	mov    %al,0x1(%edx)
        disp_start->background = console->background;
   1348a:	8b 45 08             	mov    0x8(%ebp),%eax
   1348d:	8b 40 24             	mov    0x24(%eax),%eax
   13490:	c1 e0 05             	shl    $0x5,%eax
   13493:	c0 f8 05             	sar    $0x5,%al
   13496:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13499:	83 e0 07             	and    $0x7,%eax
   1349c:	c1 e0 04             	shl    $0x4,%eax
   1349f:	89 c1                	mov    %eax,%ecx
   134a1:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   134a5:	83 e0 8f             	and    $0xffffff8f,%eax
   134a8:	09 c8                	or     %ecx,%eax
   134aa:	88 42 01             	mov    %al,0x1(%edx)

        disp_start++;
   134ad:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
    while (disp_start < disp_end) {
   134b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   134b4:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   134b7:	72 ab                	jb     13464 <erase_rows+0x39>
    }
}
   134b9:	90                   	nop
   134ba:	c9                   	leave  
   134bb:	c3                   	ret    

000134bc <scroll_up>:

/**
 * 整体屏幕上移若干行
 */
static void scroll_up(console_t * console, int lines) {
   134bc:	55                   	push   %ebp
   134bd:	89 e5                	mov    %esp,%ebp
   134bf:	83 ec 18             	sub    $0x18,%esp
    // 整体上移
    disp_char_t * dest = console->disp_base;
   134c2:	8b 45 08             	mov    0x8(%ebp),%eax
   134c5:	8b 00                	mov    (%eax),%eax
   134c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t * src = console->disp_base + console->display_cols * lines;
   134ca:	8b 45 08             	mov    0x8(%ebp),%eax
   134cd:	8b 10                	mov    (%eax),%edx
   134cf:	8b 45 08             	mov    0x8(%ebp),%eax
   134d2:	8b 40 14             	mov    0x14(%eax),%eax
   134d5:	0f af 45 0c          	imul   0xc(%ebp),%eax
   134d9:	01 c0                	add    %eax,%eax
   134db:	01 d0                	add    %edx,%eax
   134dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t size = (console->display_rows - lines) * console->display_cols * sizeof(disp_char_t);
   134e0:	8b 45 08             	mov    0x8(%ebp),%eax
   134e3:	8b 40 10             	mov    0x10(%eax),%eax
   134e6:	2b 45 0c             	sub    0xc(%ebp),%eax
   134e9:	89 c2                	mov    %eax,%edx
   134eb:	8b 45 08             	mov    0x8(%ebp),%eax
   134ee:	8b 40 14             	mov    0x14(%eax),%eax
   134f1:	0f af c2             	imul   %edx,%eax
   134f4:	01 c0                	add    %eax,%eax
   134f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    kernel_memcpy(dest, src, size);
   134f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   134fc:	83 ec 04             	sub    $0x4,%esp
   134ff:	50                   	push   %eax
   13500:	ff 75 f0             	pushl  -0x10(%ebp)
   13503:	ff 75 f4             	pushl  -0xc(%ebp)
   13506:	e8 2c 4f 00 00       	call   18437 <kernel_memcpy>
   1350b:	83 c4 10             	add    $0x10,%esp

    // 擦除最后一行
    erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   1350e:	8b 45 08             	mov    0x8(%ebp),%eax
   13511:	8b 40 10             	mov    0x10(%eax),%eax
   13514:	8d 50 ff             	lea    -0x1(%eax),%edx
   13517:	8b 45 08             	mov    0x8(%ebp),%eax
   1351a:	8b 40 10             	mov    0x10(%eax),%eax
   1351d:	2b 45 0c             	sub    0xc(%ebp),%eax
   13520:	83 ec 04             	sub    $0x4,%esp
   13523:	52                   	push   %edx
   13524:	50                   	push   %eax
   13525:	ff 75 08             	pushl  0x8(%ebp)
   13528:	e8 fe fe ff ff       	call   1342b <erase_rows>
   1352d:	83 c4 10             	add    $0x10,%esp

    console->cursor_row -= lines;
   13530:	8b 45 08             	mov    0x8(%ebp),%eax
   13533:	8b 40 08             	mov    0x8(%eax),%eax
   13536:	2b 45 0c             	sub    0xc(%ebp),%eax
   13539:	89 c2                	mov    %eax,%edx
   1353b:	8b 45 08             	mov    0x8(%ebp),%eax
   1353e:	89 50 08             	mov    %edx,0x8(%eax)
}
   13541:	90                   	nop
   13542:	c9                   	leave  
   13543:	c3                   	ret    

00013544 <move_to_col0>:

static void move_to_col0 (console_t * console) {
   13544:	55                   	push   %ebp
   13545:	89 e5                	mov    %esp,%ebp
	console->cursor_col = 0;
   13547:	8b 45 08             	mov    0x8(%ebp),%eax
   1354a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
}
   13551:	90                   	nop
   13552:	5d                   	pop    %ebp
   13553:	c3                   	ret    

00013554 <move_next_line>:

/**
 * 换至下一行
 */
static void move_next_line (console_t * console) {
   13554:	55                   	push   %ebp
   13555:	89 e5                	mov    %esp,%ebp
   13557:	83 ec 08             	sub    $0x8,%esp
	console->cursor_row++;
   1355a:	8b 45 08             	mov    0x8(%ebp),%eax
   1355d:	8b 40 08             	mov    0x8(%eax),%eax
   13560:	8d 50 01             	lea    0x1(%eax),%edx
   13563:	8b 45 08             	mov    0x8(%ebp),%eax
   13566:	89 50 08             	mov    %edx,0x8(%eax)

	// 超出当前屏幕显示的所有行，上移一行
	if (console->cursor_row >= console->display_rows) {
   13569:	8b 45 08             	mov    0x8(%ebp),%eax
   1356c:	8b 50 08             	mov    0x8(%eax),%edx
   1356f:	8b 45 08             	mov    0x8(%ebp),%eax
   13572:	8b 40 10             	mov    0x10(%eax),%eax
   13575:	39 c2                	cmp    %eax,%edx
   13577:	7c 10                	jl     13589 <move_next_line+0x35>
		scroll_up(console, 1);
   13579:	83 ec 08             	sub    $0x8,%esp
   1357c:	6a 01                	push   $0x1
   1357e:	ff 75 08             	pushl  0x8(%ebp)
   13581:	e8 36 ff ff ff       	call   134bc <scroll_up>
   13586:	83 c4 10             	add    $0x10,%esp
	}
}
   13589:	90                   	nop
   1358a:	c9                   	leave  
   1358b:	c3                   	ret    

0001358c <move_forward>:

/**
 * 将光标往前移一个字符
 */
static void move_forward (console_t * console, int n) {
   1358c:	55                   	push   %ebp
   1358d:	89 e5                	mov    %esp,%ebp
   1358f:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < n; i++) {
   13592:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13599:	eb 5c                	jmp    135f7 <move_forward+0x6b>
		if (++console->cursor_col >= console->display_cols) {
   1359b:	8b 45 08             	mov    0x8(%ebp),%eax
   1359e:	8b 40 0c             	mov    0xc(%eax),%eax
   135a1:	8d 50 01             	lea    0x1(%eax),%edx
   135a4:	8b 45 08             	mov    0x8(%ebp),%eax
   135a7:	89 50 0c             	mov    %edx,0xc(%eax)
   135aa:	8b 45 08             	mov    0x8(%ebp),%eax
   135ad:	8b 50 0c             	mov    0xc(%eax),%edx
   135b0:	8b 45 08             	mov    0x8(%ebp),%eax
   135b3:	8b 40 14             	mov    0x14(%eax),%eax
   135b6:	39 c2                	cmp    %eax,%edx
   135b8:	7c 39                	jl     135f3 <move_forward+0x67>
			console->cursor_col = 0;
   135ba:	8b 45 08             	mov    0x8(%ebp),%eax
   135bd:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            console->cursor_row++;
   135c4:	8b 45 08             	mov    0x8(%ebp),%eax
   135c7:	8b 40 08             	mov    0x8(%eax),%eax
   135ca:	8d 50 01             	lea    0x1(%eax),%edx
   135cd:	8b 45 08             	mov    0x8(%ebp),%eax
   135d0:	89 50 08             	mov    %edx,0x8(%eax)
            if (console->cursor_row >= console->display_rows) {
   135d3:	8b 45 08             	mov    0x8(%ebp),%eax
   135d6:	8b 50 08             	mov    0x8(%eax),%edx
   135d9:	8b 45 08             	mov    0x8(%ebp),%eax
   135dc:	8b 40 10             	mov    0x10(%eax),%eax
   135df:	39 c2                	cmp    %eax,%edx
   135e1:	7c 10                	jl     135f3 <move_forward+0x67>
                // 超出末端，上移
                scroll_up(console, 1);
   135e3:	83 ec 08             	sub    $0x8,%esp
   135e6:	6a 01                	push   $0x1
   135e8:	ff 75 08             	pushl  0x8(%ebp)
   135eb:	e8 cc fe ff ff       	call   134bc <scroll_up>
   135f0:	83 c4 10             	add    $0x10,%esp
	for (int i = 0; i < n; i++) {
   135f3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   135f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135fa:	3b 45 0c             	cmp    0xc(%ebp),%eax
   135fd:	7c 9c                	jl     1359b <move_forward+0xf>
            }
        }
	}
}
   135ff:	90                   	nop
   13600:	c9                   	leave  
   13601:	c3                   	ret    

00013602 <show_char>:

/**
 * 在当前位置显示一个字符
 */
static void show_char(console_t * console, char c) {
   13602:	55                   	push   %ebp
   13603:	89 e5                	mov    %esp,%ebp
   13605:	83 ec 28             	sub    $0x28,%esp
   13608:	8b 45 0c             	mov    0xc(%ebp),%eax
   1360b:	88 45 e4             	mov    %al,-0x1c(%ebp)
    // 每显示一个字符，都进行计算，效率有点低。不过这样直观简单
    int offset = console->cursor_col + console->cursor_row * console->display_cols;
   1360e:	8b 45 08             	mov    0x8(%ebp),%eax
   13611:	8b 50 0c             	mov    0xc(%eax),%edx
   13614:	8b 45 08             	mov    0x8(%ebp),%eax
   13617:	8b 48 08             	mov    0x8(%eax),%ecx
   1361a:	8b 45 08             	mov    0x8(%ebp),%eax
   1361d:	8b 40 14             	mov    0x14(%eax),%eax
   13620:	0f af c1             	imul   %ecx,%eax
   13623:	01 d0                	add    %edx,%eax
   13625:	89 45 f4             	mov    %eax,-0xc(%ebp)

    disp_char_t * p = console->disp_base + offset;
   13628:	8b 45 08             	mov    0x8(%ebp),%eax
   1362b:	8b 00                	mov    (%eax),%eax
   1362d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13630:	01 d2                	add    %edx,%edx
   13632:	01 d0                	add    %edx,%eax
   13634:	89 45 f0             	mov    %eax,-0x10(%ebp)
    p->c = c;
   13637:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1363a:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   1363e:	88 10                	mov    %dl,(%eax)
    p->foreground = console->foreground;
   13640:	8b 45 08             	mov    0x8(%ebp),%eax
   13643:	8b 40 20             	mov    0x20(%eax),%eax
   13646:	c1 e0 04             	shl    $0x4,%eax
   13649:	c0 f8 04             	sar    $0x4,%al
   1364c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1364f:	83 e0 0f             	and    $0xf,%eax
   13652:	89 c1                	mov    %eax,%ecx
   13654:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13658:	83 e0 f0             	and    $0xfffffff0,%eax
   1365b:	09 c8                	or     %ecx,%eax
   1365d:	88 42 01             	mov    %al,0x1(%edx)
    p->background = console->background;
   13660:	8b 45 08             	mov    0x8(%ebp),%eax
   13663:	8b 40 24             	mov    0x24(%eax),%eax
   13666:	c1 e0 05             	shl    $0x5,%eax
   13669:	c0 f8 05             	sar    $0x5,%al
   1366c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1366f:	83 e0 07             	and    $0x7,%eax
   13672:	c1 e0 04             	shl    $0x4,%eax
   13675:	89 c1                	mov    %eax,%ecx
   13677:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1367b:	83 e0 8f             	and    $0xffffff8f,%eax
   1367e:	09 c8                	or     %ecx,%eax
   13680:	88 42 01             	mov    %al,0x1(%edx)
    move_forward(console, 1);
   13683:	83 ec 08             	sub    $0x8,%esp
   13686:	6a 01                	push   $0x1
   13688:	ff 75 08             	pushl  0x8(%ebp)
   1368b:	e8 fc fe ff ff       	call   1358c <move_forward>
   13690:	83 c4 10             	add    $0x10,%esp
}
   13693:	90                   	nop
   13694:	c9                   	leave  
   13695:	c3                   	ret    

00013696 <move_backword>:

/**
 * 光标左移
 * 如果左移成功，返回0；否则返回-1
 */
static int move_backword (console_t * console, int n) {
   13696:	55                   	push   %ebp
   13697:	89 e5                	mov    %esp,%ebp
   13699:	83 ec 10             	sub    $0x10,%esp
    int status = -1;
   1369c:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)

    for (int i = 0; i < n; i++) {
   136a3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   136aa:	eb 55                	jmp    13701 <move_backword+0x6b>
        if (console->cursor_col > 0) {
   136ac:	8b 45 08             	mov    0x8(%ebp),%eax
   136af:	8b 40 0c             	mov    0xc(%eax),%eax
   136b2:	85 c0                	test   %eax,%eax
   136b4:	7e 18                	jle    136ce <move_backword+0x38>
            // 非列超始处,可回退
            console->cursor_col--;
   136b6:	8b 45 08             	mov    0x8(%ebp),%eax
   136b9:	8b 40 0c             	mov    0xc(%eax),%eax
   136bc:	8d 50 ff             	lea    -0x1(%eax),%edx
   136bf:	8b 45 08             	mov    0x8(%ebp),%eax
   136c2:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   136c5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   136cc:	eb 2f                	jmp    136fd <move_backword+0x67>
        } else if (console->cursor_row > 0) {
   136ce:	8b 45 08             	mov    0x8(%ebp),%eax
   136d1:	8b 40 08             	mov    0x8(%eax),%eax
   136d4:	85 c0                	test   %eax,%eax
   136d6:	7e 25                	jle    136fd <move_backword+0x67>
            // 列起始处，但非首行，可回腿
            console->cursor_row--;
   136d8:	8b 45 08             	mov    0x8(%ebp),%eax
   136db:	8b 40 08             	mov    0x8(%eax),%eax
   136de:	8d 50 ff             	lea    -0x1(%eax),%edx
   136e1:	8b 45 08             	mov    0x8(%ebp),%eax
   136e4:	89 50 08             	mov    %edx,0x8(%eax)
            console->cursor_col = console->display_cols - 1;
   136e7:	8b 45 08             	mov    0x8(%ebp),%eax
   136ea:	8b 40 14             	mov    0x14(%eax),%eax
   136ed:	8d 50 ff             	lea    -0x1(%eax),%edx
   136f0:	8b 45 08             	mov    0x8(%ebp),%eax
   136f3:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   136f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < n; i++) {
   136fd:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   13701:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13704:	3b 45 0c             	cmp    0xc(%ebp),%eax
   13707:	7c a3                	jl     136ac <move_backword+0x16>
        }
    }

    return status;
   13709:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1370c:	c9                   	leave  
   1370d:	c3                   	ret    

0001370e <clear_display>:

static void clear_display (console_t * console) {
   1370e:	55                   	push   %ebp
   1370f:	89 e5                	mov    %esp,%ebp
   13711:	83 ec 10             	sub    $0x10,%esp
    int size = console->display_cols * console->display_rows;
   13714:	8b 45 08             	mov    0x8(%ebp),%eax
   13717:	8b 50 14             	mov    0x14(%eax),%edx
   1371a:	8b 45 08             	mov    0x8(%ebp),%eax
   1371d:	8b 40 10             	mov    0x10(%eax),%eax
   13720:	0f af c2             	imul   %edx,%eax
   13723:	89 45 f4             	mov    %eax,-0xc(%ebp)

    disp_char_t * start = console->disp_base;
   13726:	8b 45 08             	mov    0x8(%ebp),%eax
   13729:	8b 00                	mov    (%eax),%eax
   1372b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < size; i++, start++) {
   1372e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   13735:	eb 51                	jmp    13788 <clear_display+0x7a>
        // 为便于理解，以下分开三步写一个字符，速度慢一些
        start->c = ' ';
   13737:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1373a:	c6 00 20             	movb   $0x20,(%eax)
        start->background = console->background;
   1373d:	8b 45 08             	mov    0x8(%ebp),%eax
   13740:	8b 40 24             	mov    0x24(%eax),%eax
   13743:	c1 e0 05             	shl    $0x5,%eax
   13746:	c0 f8 05             	sar    $0x5,%al
   13749:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1374c:	83 e0 07             	and    $0x7,%eax
   1374f:	c1 e0 04             	shl    $0x4,%eax
   13752:	89 c1                	mov    %eax,%ecx
   13754:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13758:	83 e0 8f             	and    $0xffffff8f,%eax
   1375b:	09 c8                	or     %ecx,%eax
   1375d:	88 42 01             	mov    %al,0x1(%edx)
        start->foreground = console->foreground;
   13760:	8b 45 08             	mov    0x8(%ebp),%eax
   13763:	8b 40 20             	mov    0x20(%eax),%eax
   13766:	c1 e0 04             	shl    $0x4,%eax
   13769:	c0 f8 04             	sar    $0x4,%al
   1376c:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1376f:	83 e0 0f             	and    $0xf,%eax
   13772:	89 c1                	mov    %eax,%ecx
   13774:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13778:	83 e0 f0             	and    $0xfffffff0,%eax
   1377b:	09 c8                	or     %ecx,%eax
   1377d:	88 42 01             	mov    %al,0x1(%edx)
    for (int i = 0; i < size; i++, start++) {
   13780:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   13784:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   13788:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1378b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   1378e:	7c a7                	jl     13737 <clear_display+0x29>
    }
}
   13790:	90                   	nop
   13791:	c9                   	leave  
   13792:	c3                   	ret    

00013793 <move_next_tab>:

/**
 * 将光标对齐到8的倍数位置上
 */
static void move_next_tab(console_t * console) {
   13793:	55                   	push   %ebp
   13794:	89 e5                	mov    %esp,%ebp
   13796:	83 ec 18             	sub    $0x18,%esp
    int col = console->cursor_col;
   13799:	8b 45 08             	mov    0x8(%ebp),%eax
   1379c:	8b 40 0c             	mov    0xc(%eax),%eax
   1379f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    col = (col + 7) / 8 * 8;		// 下一显示位置
   137a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137a5:	83 c0 07             	add    $0x7,%eax
   137a8:	8d 50 07             	lea    0x7(%eax),%edx
   137ab:	85 c0                	test   %eax,%eax
   137ad:	0f 48 c2             	cmovs  %edx,%eax
   137b0:	c1 f8 03             	sar    $0x3,%eax
   137b3:	c1 e0 03             	shl    $0x3,%eax
   137b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (col >= console->display_cols) {
   137b9:	8b 45 08             	mov    0x8(%ebp),%eax
   137bc:	8b 40 14             	mov    0x14(%eax),%eax
   137bf:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   137c2:	7c 36                	jl     137fa <move_next_tab+0x67>
        col = 0;
   137c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        console->cursor_row++;
   137cb:	8b 45 08             	mov    0x8(%ebp),%eax
   137ce:	8b 40 08             	mov    0x8(%eax),%eax
   137d1:	8d 50 01             	lea    0x1(%eax),%edx
   137d4:	8b 45 08             	mov    0x8(%ebp),%eax
   137d7:	89 50 08             	mov    %edx,0x8(%eax)
        if (console->cursor_row >= console->display_rows) {
   137da:	8b 45 08             	mov    0x8(%ebp),%eax
   137dd:	8b 50 08             	mov    0x8(%eax),%edx
   137e0:	8b 45 08             	mov    0x8(%ebp),%eax
   137e3:	8b 40 10             	mov    0x10(%eax),%eax
   137e6:	39 c2                	cmp    %eax,%edx
   137e8:	7c 10                	jl     137fa <move_next_tab+0x67>
            // 超出末端，上移
            scroll_up(console, 1);
   137ea:	83 ec 08             	sub    $0x8,%esp
   137ed:	6a 01                	push   $0x1
   137ef:	ff 75 08             	pushl  0x8(%ebp)
   137f2:	e8 c5 fc ff ff       	call   134bc <scroll_up>
   137f7:	83 c4 10             	add    $0x10,%esp
        }
    }
    console->cursor_col = col;
   137fa:	8b 45 08             	mov    0x8(%ebp),%eax
   137fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13800:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13803:	90                   	nop
   13804:	c9                   	leave  
   13805:	c3                   	ret    

00013806 <save_cursor>:

/**
 * 只支持保存光标
 */
void save_cursor(console_t * console) {
   13806:	55                   	push   %ebp
   13807:	89 e5                	mov    %esp,%ebp
    console->old_cursor_col = console->cursor_col;
   13809:	8b 45 08             	mov    0x8(%ebp),%eax
   1380c:	8b 50 0c             	mov    0xc(%eax),%edx
   1380f:	8b 45 08             	mov    0x8(%ebp),%eax
   13812:	89 50 18             	mov    %edx,0x18(%eax)
    console->old_cursor_row = console->cursor_row;
   13815:	8b 45 08             	mov    0x8(%ebp),%eax
   13818:	8b 50 08             	mov    0x8(%eax),%edx
   1381b:	8b 45 08             	mov    0x8(%ebp),%eax
   1381e:	89 50 1c             	mov    %edx,0x1c(%eax)
}
   13821:	90                   	nop
   13822:	5d                   	pop    %ebp
   13823:	c3                   	ret    

00013824 <restore_cursor>:

void restore_cursor(console_t * console) {
   13824:	55                   	push   %ebp
   13825:	89 e5                	mov    %esp,%ebp
    console->cursor_col = console->old_cursor_col;
   13827:	8b 45 08             	mov    0x8(%ebp),%eax
   1382a:	8b 50 18             	mov    0x18(%eax),%edx
   1382d:	8b 45 08             	mov    0x8(%ebp),%eax
   13830:	89 50 0c             	mov    %edx,0xc(%eax)
    console->cursor_row = console->old_cursor_row;
   13833:	8b 45 08             	mov    0x8(%ebp),%eax
   13836:	8b 50 1c             	mov    0x1c(%eax),%edx
   13839:	8b 45 08             	mov    0x8(%ebp),%eax
   1383c:	89 50 08             	mov    %edx,0x8(%eax)
}
   1383f:	90                   	nop
   13840:	5d                   	pop    %ebp
   13841:	c3                   	ret    

00013842 <console_init>:

/**
 * 初始化控制台及键盘
 */
int console_init (int idx) {
   13842:	55                   	push   %ebp
   13843:	89 e5                	mov    %esp,%ebp
   13845:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   13848:	8b 45 08             	mov    0x8(%ebp),%eax
   1384b:	6b c0 68             	imul   $0x68,%eax,%eax
   1384e:	05 00 56 03 00       	add    $0x35600,%eax
   13853:	89 45 f4             	mov    %eax,-0xc(%ebp)

    console->display_cols = CONSOLE_COL_MAX;
   13856:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13859:	c7 40 14 50 00 00 00 	movl   $0x50,0x14(%eax)
    console->display_rows = CONSOLE_ROW_MAX;
   13860:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13863:	c7 40 10 19 00 00 00 	movl   $0x19,0x10(%eax)
    console->disp_base = (disp_char_t *) CONSOLE_DISP_ADDR + idx * console->display_cols * console->display_rows;
   1386a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1386d:	8b 40 14             	mov    0x14(%eax),%eax
   13870:	0f af 45 08          	imul   0x8(%ebp),%eax
   13874:	89 c2                	mov    %eax,%edx
   13876:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13879:	8b 40 10             	mov    0x10(%eax),%eax
   1387c:	0f af c2             	imul   %edx,%eax
   1387f:	01 c0                	add    %eax,%eax
   13881:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   13887:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1388a:	89 10                	mov    %edx,(%eax)

    console->foreground = COLOR_White;
   1388c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1388f:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
    console->background = COLOR_Black;
   13896:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13899:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    if (idx == 0) {
   138a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   138a4:	75 30                	jne    138d6 <console_init+0x94>
        int cursor_pos = read_cursor_pos();
   138a6:	e8 cc f8 ff ff       	call   13177 <read_cursor_pos>
   138ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
        console->cursor_row = cursor_pos / console->display_cols;
   138ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138b1:	8b 48 14             	mov    0x14(%eax),%ecx
   138b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   138b7:	99                   	cltd   
   138b8:	f7 f9                	idiv   %ecx
   138ba:	89 c2                	mov    %eax,%edx
   138bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138bf:	89 50 08             	mov    %edx,0x8(%eax)
        console->cursor_col = cursor_pos % console->display_cols;
   138c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138c5:	8b 48 14             	mov    0x14(%eax),%ecx
   138c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   138cb:	99                   	cltd   
   138cc:	f7 f9                	idiv   %ecx
   138ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138d1:	89 50 0c             	mov    %edx,0xc(%eax)
   138d4:	eb 22                	jmp    138f8 <console_init+0xb6>
    } else {
        console->cursor_row = 0;
   138d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138d9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        console->cursor_col = 0;
   138e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138e3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        clear_display(console);
   138ea:	83 ec 0c             	sub    $0xc,%esp
   138ed:	ff 75 f4             	pushl  -0xc(%ebp)
   138f0:	e8 19 fe ff ff       	call   1370e <clear_display>
   138f5:	83 c4 10             	add    $0x10,%esp
    }

    console->old_cursor_row = console->cursor_row;
   138f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138fb:	8b 50 08             	mov    0x8(%eax),%edx
   138fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13901:	89 50 1c             	mov    %edx,0x1c(%eax)
    console->old_cursor_col = console->cursor_col;
   13904:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13907:	8b 50 0c             	mov    0xc(%eax),%edx
   1390a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1390d:	89 50 18             	mov    %edx,0x18(%eax)

    mutex_init(&console->mutex);
   13910:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13913:	83 c0 54             	add    $0x54,%eax
   13916:	83 ec 0c             	sub    $0xc,%esp
   13919:	50                   	push   %eax
   1391a:	e8 1c 44 00 00       	call   17d3b <mutex_init>
   1391f:	83 c4 10             	add    $0x10,%esp
	return 0;
   13922:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13927:	c9                   	leave  
   13928:	c3                   	ret    

00013929 <erase_backword>:

/**
 * 擦除前一字符
 * @param console
 */
static void erase_backword (console_t * console) {
   13929:	55                   	push   %ebp
   1392a:	89 e5                	mov    %esp,%ebp
   1392c:	83 ec 08             	sub    $0x8,%esp
    if (move_backword(console, 1) == 0) {
   1392f:	6a 01                	push   $0x1
   13931:	ff 75 08             	pushl  0x8(%ebp)
   13934:	e8 5d fd ff ff       	call   13696 <move_backword>
   13939:	83 c4 08             	add    $0x8,%esp
   1393c:	85 c0                	test   %eax,%eax
   1393e:	75 20                	jne    13960 <erase_backword+0x37>
        show_char(console, ' ');
   13940:	83 ec 08             	sub    $0x8,%esp
   13943:	6a 20                	push   $0x20
   13945:	ff 75 08             	pushl  0x8(%ebp)
   13948:	e8 b5 fc ff ff       	call   13602 <show_char>
   1394d:	83 c4 10             	add    $0x10,%esp
        move_backword(console, 1);
   13950:	83 ec 08             	sub    $0x8,%esp
   13953:	6a 01                	push   $0x1
   13955:	ff 75 08             	pushl  0x8(%ebp)
   13958:	e8 39 fd ff ff       	call   13696 <move_backword>
   1395d:	83 c4 10             	add    $0x10,%esp
    }
}
   13960:	90                   	nop
   13961:	c9                   	leave  
   13962:	c3                   	ret    

00013963 <write_normal>:

/**
 * 普通状态下的字符的写入处理
 */
static void write_normal (console_t * console, char c) {
   13963:	55                   	push   %ebp
   13964:	89 e5                	mov    %esp,%ebp
   13966:	83 ec 18             	sub    $0x18,%esp
   13969:	8b 45 0c             	mov    0xc(%ebp),%eax
   1396c:	88 45 f4             	mov    %al,-0xc(%ebp)
    switch (c) {
   1396f:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13973:	83 f8 0a             	cmp    $0xa,%eax
   13976:	74 70                	je     139e8 <write_normal+0x85>
   13978:	83 f8 0a             	cmp    $0xa,%eax
   1397b:	7f 0c                	jg     13989 <write_normal+0x26>
   1397d:	83 f8 08             	cmp    $0x8,%eax
   13980:	74 34                	je     139b6 <write_normal+0x53>
   13982:	83 f8 09             	cmp    $0x9,%eax
   13985:	74 41                	je     139c8 <write_normal+0x65>
   13987:	eb 6f                	jmp    139f8 <write_normal+0x95>
   13989:	83 f8 1b             	cmp    $0x1b,%eax
   1398c:	74 0c                	je     1399a <write_normal+0x37>
   1398e:	83 f8 7f             	cmp    $0x7f,%eax
   13991:	74 13                	je     139a6 <write_normal+0x43>
   13993:	83 f8 0d             	cmp    $0xd,%eax
   13996:	74 40                	je     139d8 <write_normal+0x75>
   13998:	eb 5e                	jmp    139f8 <write_normal+0x95>
        case ASCII_ESC:
            console->write_state = CONSOLE_WRITE_ESC;
   1399a:	8b 45 08             	mov    0x8(%ebp),%eax
   1399d:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
            break;
   139a4:	eb 72                	jmp    13a18 <write_normal+0xb5>
        case 0x7F:
            erase_backword(console);
   139a6:	83 ec 0c             	sub    $0xc,%esp
   139a9:	ff 75 08             	pushl  0x8(%ebp)
   139ac:	e8 78 ff ff ff       	call   13929 <erase_backword>
   139b1:	83 c4 10             	add    $0x10,%esp
            break;
   139b4:	eb 62                	jmp    13a18 <write_normal+0xb5>
        case '\b':		// 左移一个字符
            move_backword(console, 1);
   139b6:	83 ec 08             	sub    $0x8,%esp
   139b9:	6a 01                	push   $0x1
   139bb:	ff 75 08             	pushl  0x8(%ebp)
   139be:	e8 d3 fc ff ff       	call   13696 <move_backword>
   139c3:	83 c4 10             	add    $0x10,%esp
            break;
   139c6:	eb 50                	jmp    13a18 <write_normal+0xb5>
            // 换行处理
        case '\t':		// 对齐的下一制表符
            move_next_tab(console);
   139c8:	83 ec 0c             	sub    $0xc,%esp
   139cb:	ff 75 08             	pushl  0x8(%ebp)
   139ce:	e8 c0 fd ff ff       	call   13793 <move_next_tab>
   139d3:	83 c4 10             	add    $0x10,%esp
            break;
   139d6:	eb 40                	jmp    13a18 <write_normal+0xb5>
        case '\r':
            move_to_col0(console);
   139d8:	83 ec 0c             	sub    $0xc,%esp
   139db:	ff 75 08             	pushl  0x8(%ebp)
   139de:	e8 61 fb ff ff       	call   13544 <move_to_col0>
   139e3:	83 c4 10             	add    $0x10,%esp
            break;
   139e6:	eb 30                	jmp    13a18 <write_normal+0xb5>
        case '\n':  // 暂时这样处理
            //move_to_col0(console);
            move_next_line(console);
   139e8:	83 ec 0c             	sub    $0xc,%esp
   139eb:	ff 75 08             	pushl  0x8(%ebp)
   139ee:	e8 61 fb ff ff       	call   13554 <move_next_line>
   139f3:	83 c4 10             	add    $0x10,%esp
            break;
   139f6:	eb 20                	jmp    13a18 <write_normal+0xb5>
            // 普通字符显示
        default: {
            if ((c >= ' ') && (c <= '~')) {
   139f8:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   139fc:	7e 19                	jle    13a17 <write_normal+0xb4>
   139fe:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   13a02:	74 13                	je     13a17 <write_normal+0xb4>
                show_char(console, c);
   13a04:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13a08:	83 ec 08             	sub    $0x8,%esp
   13a0b:	50                   	push   %eax
   13a0c:	ff 75 08             	pushl  0x8(%ebp)
   13a0f:	e8 ee fb ff ff       	call   13602 <show_char>
   13a14:	83 c4 10             	add    $0x10,%esp
            }
            break;
   13a17:	90                   	nop
        }
    }
}
   13a18:	90                   	nop
   13a19:	c9                   	leave  
   13a1a:	c3                   	ret    

00013a1b <clear_esc_param>:

/**
 * 清空参数表
 */
static void clear_esc_param (console_t * console) {
   13a1b:	55                   	push   %ebp
   13a1c:	89 e5                	mov    %esp,%ebp
   13a1e:	83 ec 08             	sub    $0x8,%esp
	kernel_memset(console->esc_param, 0, sizeof(console->esc_param));
   13a21:	8b 45 08             	mov    0x8(%ebp),%eax
   13a24:	83 c0 28             	add    $0x28,%eax
   13a27:	83 ec 04             	sub    $0x4,%esp
   13a2a:	6a 28                	push   $0x28
   13a2c:	6a 00                	push   $0x0
   13a2e:	50                   	push   %eax
   13a2f:	e8 52 4a 00 00       	call   18486 <kernel_memset>
   13a34:	83 c4 10             	add    $0x10,%esp
	console->curr_param_index = 0;
   13a37:	8b 45 08             	mov    0x8(%ebp),%eax
   13a3a:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   13a41:	90                   	nop
   13a42:	c9                   	leave  
   13a43:	c3                   	ret    

00013a44 <write_esc>:

/**
 * 写入以ESC开头的序列
 */
static void write_esc (console_t * console, char c) {
   13a44:	55                   	push   %ebp
   13a45:	89 e5                	mov    %esp,%ebp
   13a47:	83 ec 18             	sub    $0x18,%esp
   13a4a:	8b 45 0c             	mov    0xc(%ebp),%eax
   13a4d:	88 45 f4             	mov    %al,-0xc(%ebp)
    // https://blog.csdn.net/ScilogyHunter/article/details/106874395
    // ESC状态处理, 转义序列模式 ESC 0x20-0x27(0或多个) 0x30-0x7e
    switch (c) {
   13a50:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13a54:	83 f8 38             	cmp    $0x38,%eax
   13a57:	74 21                	je     13a7a <write_esc+0x36>
   13a59:	83 f8 5b             	cmp    $0x5b,%eax
   13a5c:	74 33                	je     13a91 <write_esc+0x4d>
   13a5e:	83 f8 37             	cmp    $0x37,%eax
   13a61:	75 48                	jne    13aab <write_esc+0x67>
        case '7':		// ESC 7 保存光标
            save_cursor(console);
   13a63:	ff 75 08             	pushl  0x8(%ebp)
   13a66:	e8 9b fd ff ff       	call   13806 <save_cursor>
   13a6b:	83 c4 04             	add    $0x4,%esp
            console->write_state = CONSOLE_WRITE_NORMAL;
   13a6e:	8b 45 08             	mov    0x8(%ebp),%eax
   13a71:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
   13a78:	eb 3c                	jmp    13ab6 <write_esc+0x72>
        case '8':		// ESC 8 恢复光标
            restore_cursor(console);
   13a7a:	ff 75 08             	pushl  0x8(%ebp)
   13a7d:	e8 a2 fd ff ff       	call   13824 <restore_cursor>
   13a82:	83 c4 04             	add    $0x4,%esp
            console->write_state = CONSOLE_WRITE_NORMAL;
   13a85:	8b 45 08             	mov    0x8(%ebp),%eax
   13a88:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
   13a8f:	eb 25                	jmp    13ab6 <write_esc+0x72>
        case '[':
            clear_esc_param(console);
   13a91:	83 ec 0c             	sub    $0xc,%esp
   13a94:	ff 75 08             	pushl  0x8(%ebp)
   13a97:	e8 7f ff ff ff       	call   13a1b <clear_esc_param>
   13a9c:	83 c4 10             	add    $0x10,%esp
            console->write_state = CONSOLE_WRITE_SQUARE;
   13a9f:	8b 45 08             	mov    0x8(%ebp),%eax
   13aa2:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
            break;
   13aa9:	eb 0b                	jmp    13ab6 <write_esc+0x72>
        default:
            console->write_state = CONSOLE_WRITE_NORMAL;
   13aab:	8b 45 08             	mov    0x8(%ebp),%eax
   13aae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
   13ab5:	90                   	nop
    }
}
   13ab6:	90                   	nop
   13ab7:	c9                   	leave  
   13ab8:	c3                   	ret    

00013ab9 <set_font_style>:

/**
 * 设置字符属性
 */
static void set_font_style (console_t * console) {
   13ab9:	55                   	push   %ebp
   13aba:	89 e5                	mov    %esp,%ebp
   13abc:	83 ec 10             	sub    $0x10,%esp
	static const cclor_t color_table[] = {
			COLOR_Black, COLOR_Red, COLOR_Green, COLOR_Yellow, // 0-3
			COLOR_Blue, COLOR_Magenta, COLOR_Cyan, COLOR_White, // 4-7
	};

	for (int i = 0; i < console->curr_param_index; i++) {
   13abf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13ac6:	eb 78                	jmp    13b40 <set_font_style+0x87>
		int param = console->esc_param[i];
   13ac8:	8b 45 08             	mov    0x8(%ebp),%eax
   13acb:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13ace:	83 c2 08             	add    $0x8,%edx
   13ad1:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   13ad5:	89 45 f8             	mov    %eax,-0x8(%ebp)
		if ((param >= 30) && (param <= 37)) {  // 前景色：30-37
   13ad8:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   13adc:	7e 1b                	jle    13af9 <set_font_style+0x40>
   13ade:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   13ae2:	7f 15                	jg     13af9 <set_font_style+0x40>
			console->foreground = color_table[param - 30];
   13ae4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13ae7:	83 e8 1e             	sub    $0x1e,%eax
   13aea:	8b 14 85 e0 95 01 00 	mov    0x195e0(,%eax,4),%edx
   13af1:	8b 45 08             	mov    0x8(%ebp),%eax
   13af4:	89 50 20             	mov    %edx,0x20(%eax)
   13af7:	eb 43                	jmp    13b3c <set_font_style+0x83>
		} else if ((param >= 40) && (param <= 47)) {
   13af9:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13afd:	7e 1b                	jle    13b1a <set_font_style+0x61>
   13aff:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   13b03:	7f 15                	jg     13b1a <set_font_style+0x61>
			console->background = color_table[param - 40];
   13b05:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13b08:	83 e8 28             	sub    $0x28,%eax
   13b0b:	8b 14 85 e0 95 01 00 	mov    0x195e0(,%eax,4),%edx
   13b12:	8b 45 08             	mov    0x8(%ebp),%eax
   13b15:	89 50 24             	mov    %edx,0x24(%eax)
   13b18:	eb 22                	jmp    13b3c <set_font_style+0x83>
		} else if (param == 39) { // 39=默认前景色
   13b1a:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13b1e:	75 0c                	jne    13b2c <set_font_style+0x73>
			console->foreground = COLOR_White;
   13b20:	8b 45 08             	mov    0x8(%ebp),%eax
   13b23:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
   13b2a:	eb 10                	jmp    13b3c <set_font_style+0x83>
		} else if (param == 49) { // 49=默认背景色
   13b2c:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13b30:	75 0a                	jne    13b3c <set_font_style+0x83>
			console->background = COLOR_Black;
   13b32:	8b 45 08             	mov    0x8(%ebp),%eax
   13b35:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
	for (int i = 0; i < console->curr_param_index; i++) {
   13b3c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13b40:	8b 45 08             	mov    0x8(%ebp),%eax
   13b43:	8b 40 50             	mov    0x50(%eax),%eax
   13b46:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13b49:	0f 8c 79 ff ff ff    	jl     13ac8 <set_font_style+0xf>
		}
	}
}
   13b4f:	90                   	nop
   13b50:	c9                   	leave  
   13b51:	c3                   	ret    

00013b52 <move_left>:

/**
 * @brief 光标左移，但不起始左边界，也不往上移
 */
static void move_left (console_t * console, int n) {
   13b52:	55                   	push   %ebp
   13b53:	89 e5                	mov    %esp,%ebp
   13b55:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0) {
   13b58:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13b5c:	75 07                	jne    13b65 <move_left+0x13>
        n = 1;
   13b5e:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col - n;
   13b65:	8b 45 08             	mov    0x8(%ebp),%eax
   13b68:	8b 40 0c             	mov    0xc(%eax),%eax
   13b6b:	2b 45 0c             	sub    0xc(%ebp),%eax
   13b6e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    console->cursor_col = (col >= 0) ? col : 0;
   13b71:	b8 00 00 00 00       	mov    $0x0,%eax
   13b76:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   13b7a:	0f 49 45 fc          	cmovns -0x4(%ebp),%eax
   13b7e:	89 c2                	mov    %eax,%edx
   13b80:	8b 45 08             	mov    0x8(%ebp),%eax
   13b83:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13b86:	90                   	nop
   13b87:	c9                   	leave  
   13b88:	c3                   	ret    

00013b89 <move_right>:

/**
 * @brief 光标右移，但不起始右边界，也不往下移
 */
static void move_right (console_t * console, int n) {
   13b89:	55                   	push   %ebp
   13b8a:	89 e5                	mov    %esp,%ebp
   13b8c:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0) {
   13b8f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13b93:	75 07                	jne    13b9c <move_right+0x13>
        n = 1;
   13b95:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col + n;
   13b9c:	8b 45 08             	mov    0x8(%ebp),%eax
   13b9f:	8b 50 0c             	mov    0xc(%eax),%edx
   13ba2:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ba5:	01 d0                	add    %edx,%eax
   13ba7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (col >= console->display_cols) {
   13baa:	8b 45 08             	mov    0x8(%ebp),%eax
   13bad:	8b 40 14             	mov    0x14(%eax),%eax
   13bb0:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13bb3:	7c 11                	jl     13bc6 <move_right+0x3d>
        console->cursor_col = console->display_cols - 1;
   13bb5:	8b 45 08             	mov    0x8(%ebp),%eax
   13bb8:	8b 40 14             	mov    0x14(%eax),%eax
   13bbb:	8d 50 ff             	lea    -0x1(%eax),%edx
   13bbe:	8b 45 08             	mov    0x8(%ebp),%eax
   13bc1:	89 50 0c             	mov    %edx,0xc(%eax)
    } else {
        console->cursor_col = col;
    }
}
   13bc4:	eb 09                	jmp    13bcf <move_right+0x46>
        console->cursor_col = col;
   13bc6:	8b 45 08             	mov    0x8(%ebp),%eax
   13bc9:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13bcc:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13bcf:	90                   	nop
   13bd0:	c9                   	leave  
   13bd1:	c3                   	ret    

00013bd2 <move_cursor>:

/**
 * 移动光标
 */
static void move_cursor(console_t * console) {
   13bd2:	55                   	push   %ebp
   13bd3:	89 e5                	mov    %esp,%ebp
	if (console->curr_param_index >= 1) {
   13bd5:	8b 45 08             	mov    0x8(%ebp),%eax
   13bd8:	8b 40 50             	mov    0x50(%eax),%eax
   13bdb:	85 c0                	test   %eax,%eax
   13bdd:	7e 0c                	jle    13beb <move_cursor+0x19>
		console->cursor_row = console->esc_param[0];
   13bdf:	8b 45 08             	mov    0x8(%ebp),%eax
   13be2:	8b 50 28             	mov    0x28(%eax),%edx
   13be5:	8b 45 08             	mov    0x8(%ebp),%eax
   13be8:	89 50 08             	mov    %edx,0x8(%eax)
	}

	if (console->curr_param_index >= 2) {
   13beb:	8b 45 08             	mov    0x8(%ebp),%eax
   13bee:	8b 40 50             	mov    0x50(%eax),%eax
   13bf1:	83 f8 01             	cmp    $0x1,%eax
   13bf4:	7e 0c                	jle    13c02 <move_cursor+0x30>
		console->cursor_col = console->esc_param[1];
   13bf6:	8b 45 08             	mov    0x8(%ebp),%eax
   13bf9:	8b 50 2c             	mov    0x2c(%eax),%edx
   13bfc:	8b 45 08             	mov    0x8(%ebp),%eax
   13bff:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
   13c02:	90                   	nop
   13c03:	5d                   	pop    %ebp
   13c04:	c3                   	ret    

00013c05 <erase_in_display>:

/**
 * 擦除字符操作
 */
static void erase_in_display(console_t * console) {
   13c05:	55                   	push   %ebp
   13c06:	89 e5                	mov    %esp,%ebp
   13c08:	83 ec 10             	sub    $0x10,%esp
	if (console->curr_param_index <= 0) {
   13c0b:	8b 45 08             	mov    0x8(%ebp),%eax
   13c0e:	8b 40 50             	mov    0x50(%eax),%eax
   13c11:	85 c0                	test   %eax,%eax
   13c13:	7e 3e                	jle    13c53 <erase_in_display+0x4e>
		return;
	}

	int param = console->esc_param[0];
   13c15:	8b 45 08             	mov    0x8(%ebp),%eax
   13c18:	8b 40 28             	mov    0x28(%eax),%eax
   13c1b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (param == 2) {
   13c1e:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   13c22:	75 30                	jne    13c54 <erase_in_display+0x4f>
		// 擦除整个屏幕
		erase_rows(console, 0, console->display_rows - 1);
   13c24:	8b 45 08             	mov    0x8(%ebp),%eax
   13c27:	8b 40 10             	mov    0x10(%eax),%eax
   13c2a:	83 e8 01             	sub    $0x1,%eax
   13c2d:	50                   	push   %eax
   13c2e:	6a 00                	push   $0x0
   13c30:	ff 75 08             	pushl  0x8(%ebp)
   13c33:	e8 f3 f7 ff ff       	call   1342b <erase_rows>
   13c38:	83 c4 0c             	add    $0xc,%esp
        console->cursor_col = console->cursor_row = 0;
   13c3b:	8b 45 08             	mov    0x8(%ebp),%eax
   13c3e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   13c45:	8b 45 08             	mov    0x8(%ebp),%eax
   13c48:	8b 50 08             	mov    0x8(%eax),%edx
   13c4b:	8b 45 08             	mov    0x8(%ebp),%eax
   13c4e:	89 50 0c             	mov    %edx,0xc(%eax)
   13c51:	eb 01                	jmp    13c54 <erase_in_display+0x4f>
		return;
   13c53:	90                   	nop
	}
}
   13c54:	c9                   	leave  
   13c55:	c3                   	ret    

00013c56 <write_esc_square>:

/**
 * @brief 处理ESC [Pn;Pn 开头的字符串
 */
static void write_esc_square (console_t * console, char c) {
   13c56:	55                   	push   %ebp
   13c57:	89 e5                	mov    %esp,%ebp
   13c59:	83 ec 14             	sub    $0x14,%esp
   13c5c:	8b 45 0c             	mov    0xc(%ebp),%eax
   13c5f:	88 45 ec             	mov    %al,-0x14(%ebp)
    // 接收参数
    if ((c >= '0') && (c <= '9')) {
   13c62:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13c66:	7e 44                	jle    13cac <write_esc_square+0x56>
   13c68:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   13c6c:	7f 3e                	jg     13cac <write_esc_square+0x56>
        // 解析当前参数
        int * param = &console->esc_param[console->curr_param_index];
   13c6e:	8b 45 08             	mov    0x8(%ebp),%eax
   13c71:	8b 40 50             	mov    0x50(%eax),%eax
   13c74:	83 c0 08             	add    $0x8,%eax
   13c77:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13c7e:	8b 45 08             	mov    0x8(%ebp),%eax
   13c81:	01 d0                	add    %edx,%eax
   13c83:	83 c0 08             	add    $0x8,%eax
   13c86:	89 45 fc             	mov    %eax,-0x4(%ebp)
        *param = *param * 10 + c - '0';
   13c89:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13c8c:	8b 10                	mov    (%eax),%edx
   13c8e:	89 d0                	mov    %edx,%eax
   13c90:	c1 e0 02             	shl    $0x2,%eax
   13c93:	01 d0                	add    %edx,%eax
   13c95:	01 c0                	add    %eax,%eax
   13c97:	89 c2                	mov    %eax,%edx
   13c99:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13c9d:	01 d0                	add    %edx,%eax
   13c9f:	8d 50 d0             	lea    -0x30(%eax),%edx
   13ca2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13ca5:	89 10                	mov    %edx,(%eax)
    if ((c >= '0') && (c <= '9')) {
   13ca7:	e9 9e 00 00 00       	jmp    13d4a <write_esc_square+0xf4>
    } else if ((c == ';') && console->curr_param_index < ESC_PARAM_MAX) {
   13cac:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13cb0:	75 1c                	jne    13cce <write_esc_square+0x78>
   13cb2:	8b 45 08             	mov    0x8(%ebp),%eax
   13cb5:	8b 40 50             	mov    0x50(%eax),%eax
   13cb8:	83 f8 09             	cmp    $0x9,%eax
   13cbb:	7f 11                	jg     13cce <write_esc_square+0x78>
        // 参数结束，继续处理下一个参数
        console->curr_param_index++;
   13cbd:	8b 45 08             	mov    0x8(%ebp),%eax
   13cc0:	8b 40 50             	mov    0x50(%eax),%eax
   13cc3:	8d 50 01             	lea    0x1(%eax),%edx
   13cc6:	8b 45 08             	mov    0x8(%ebp),%eax
   13cc9:	89 50 50             	mov    %edx,0x50(%eax)
   13ccc:	eb 7c                	jmp    13d4a <write_esc_square+0xf4>
    } else {
        // 结束上一字符的处理
        console->curr_param_index++;
   13cce:	8b 45 08             	mov    0x8(%ebp),%eax
   13cd1:	8b 40 50             	mov    0x50(%eax),%eax
   13cd4:	8d 50 01             	lea    0x1(%eax),%edx
   13cd7:	8b 45 08             	mov    0x8(%ebp),%eax
   13cda:	89 50 50             	mov    %edx,0x50(%eax)

        // 已经接收到所有的字符，继续处理
        switch (c) {
   13cdd:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13ce1:	83 e8 43             	sub    $0x43,%eax
   13ce4:	83 f8 2a             	cmp    $0x2a,%eax
   13ce7:	77 57                	ja     13d40 <write_esc_square+0xea>
   13ce9:	8b 04 85 20 95 01 00 	mov    0x19520(,%eax,4),%eax
   13cf0:	ff e0                	jmp    *%eax
        case 'm': // 设置字符属性
            set_font_style(console);
   13cf2:	ff 75 08             	pushl  0x8(%ebp)
   13cf5:	e8 bf fd ff ff       	call   13ab9 <set_font_style>
   13cfa:	83 c4 04             	add    $0x4,%esp
            break;
   13cfd:	eb 41                	jmp    13d40 <write_esc_square+0xea>
        case 'D':	// 光标左移n个位置 ESC [Pn D
            move_left(console, console->esc_param[0]);
   13cff:	8b 45 08             	mov    0x8(%ebp),%eax
   13d02:	8b 40 28             	mov    0x28(%eax),%eax
   13d05:	50                   	push   %eax
   13d06:	ff 75 08             	pushl  0x8(%ebp)
   13d09:	e8 44 fe ff ff       	call   13b52 <move_left>
   13d0e:	83 c4 08             	add    $0x8,%esp
            break;
   13d11:	eb 2d                	jmp    13d40 <write_esc_square+0xea>
        case 'C':
            move_right(console, console->esc_param[0]);
   13d13:	8b 45 08             	mov    0x8(%ebp),%eax
   13d16:	8b 40 28             	mov    0x28(%eax),%eax
   13d19:	50                   	push   %eax
   13d1a:	ff 75 08             	pushl  0x8(%ebp)
   13d1d:	e8 67 fe ff ff       	call   13b89 <move_right>
   13d22:	83 c4 08             	add    $0x8,%esp
            break;
   13d25:	eb 19                	jmp    13d40 <write_esc_square+0xea>
        case 'H':
        case 'f':
            move_cursor(console);
   13d27:	ff 75 08             	pushl  0x8(%ebp)
   13d2a:	e8 a3 fe ff ff       	call   13bd2 <move_cursor>
   13d2f:	83 c4 04             	add    $0x4,%esp
            break;
   13d32:	eb 0c                	jmp    13d40 <write_esc_square+0xea>
        case 'J':
            erase_in_display(console);
   13d34:	ff 75 08             	pushl  0x8(%ebp)
   13d37:	e8 c9 fe ff ff       	call   13c05 <erase_in_display>
   13d3c:	83 c4 04             	add    $0x4,%esp
            break;
   13d3f:	90                   	nop
        }
        console->write_state = CONSOLE_WRITE_NORMAL;
   13d40:	8b 45 08             	mov    0x8(%ebp),%eax
   13d43:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }
}
   13d4a:	90                   	nop
   13d4b:	c9                   	leave  
   13d4c:	c3                   	ret    

00013d4d <console_write>:

/**
 * 实现pwdget作为tty的输出
 * 可能有多个进程在写，注意保护
 */
int console_write (tty_t * tty) {
   13d4d:	55                   	push   %ebp
   13d4e:	89 e5                	mov    %esp,%ebp
   13d50:	83 ec 18             	sub    $0x18,%esp
	console_t * console = console_buf + tty->console_idx;
   13d53:	8b 45 08             	mov    0x8(%ebp),%eax
   13d56:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   13d5c:	6b c0 68             	imul   $0x68,%eax,%eax
   13d5f:	05 00 56 03 00       	add    $0x35600,%eax
   13d64:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 下面的写序列涉及到状态机，还有多进程同时写，因此加上锁
    mutex_lock(&console->mutex);
   13d67:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13d6a:	83 c0 54             	add    $0x54,%eax
   13d6d:	83 ec 0c             	sub    $0xc,%esp
   13d70:	50                   	push   %eax
   13d71:	e8 f3 3f 00 00       	call   17d69 <mutex_lock>
   13d76:	83 c4 10             	add    $0x10,%esp

    int len = 0;
   13d79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    do {
        char c;

        // 取字节数据
        int err = tty_fifo_get(&tty->ofifo, &c);
   13d80:	8b 45 08             	mov    0x8(%ebp),%eax
   13d83:	8d 90 00 02 00 00    	lea    0x200(%eax),%edx
   13d89:	83 ec 08             	sub    $0x8,%esp
   13d8c:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13d8f:	50                   	push   %eax
   13d90:	52                   	push   %edx
   13d91:	e8 17 14 00 00       	call   151ad <tty_fifo_get>
   13d96:	83 c4 10             	add    $0x10,%esp
   13d99:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (err < 0) {
   13d9c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13da0:	79 25                	jns    13dc7 <console_write+0x7a>
                break;
        }
        len++;
    }while (1);

    mutex_unlock(&console->mutex);
   13da2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13da5:	83 c0 54             	add    $0x54,%eax
   13da8:	83 ec 0c             	sub    $0xc,%esp
   13dab:	50                   	push   %eax
   13dac:	e8 4f 40 00 00       	call   17e00 <mutex_unlock>
   13db1:	83 c4 10             	add    $0x10,%esp

    update_cursor_pos(console);
   13db4:	83 ec 0c             	sub    $0xc,%esp
   13db7:	ff 75 f0             	pushl  -0x10(%ebp)
   13dba:	e8 2c f4 ff ff       	call   131eb <update_cursor_pos>
   13dbf:	83 c4 10             	add    $0x10,%esp
    return len;
   13dc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13dc5:	eb 7b                	jmp    13e42 <console_write+0xf5>
        sem_notify(&tty->osem);
   13dc7:	8b 45 08             	mov    0x8(%ebp),%eax
   13dca:	05 14 02 00 00       	add    $0x214,%eax
   13dcf:	83 ec 0c             	sub    $0xc,%esp
   13dd2:	50                   	push   %eax
   13dd3:	e8 83 41 00 00       	call   17f5b <sem_notify>
   13dd8:	83 c4 10             	add    $0x10,%esp
        switch (console->write_state) {
   13ddb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13dde:	8b 40 04             	mov    0x4(%eax),%eax
   13de1:	83 f8 01             	cmp    $0x1,%eax
   13de4:	74 24                	je     13e0a <console_write+0xbd>
   13de6:	83 f8 01             	cmp    $0x1,%eax
   13de9:	72 07                	jb     13df2 <console_write+0xa5>
   13deb:	83 f8 02             	cmp    $0x2,%eax
   13dee:	74 32                	je     13e22 <console_write+0xd5>
   13df0:	eb 47                	jmp    13e39 <console_write+0xec>
                write_normal(console, c);
   13df2:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13df6:	0f be c0             	movsbl %al,%eax
   13df9:	83 ec 08             	sub    $0x8,%esp
   13dfc:	50                   	push   %eax
   13dfd:	ff 75 f0             	pushl  -0x10(%ebp)
   13e00:	e8 5e fb ff ff       	call   13963 <write_normal>
   13e05:	83 c4 10             	add    $0x10,%esp
                break;
   13e08:	eb 2f                	jmp    13e39 <console_write+0xec>
                write_esc(console, c);
   13e0a:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13e0e:	0f be c0             	movsbl %al,%eax
   13e11:	83 ec 08             	sub    $0x8,%esp
   13e14:	50                   	push   %eax
   13e15:	ff 75 f0             	pushl  -0x10(%ebp)
   13e18:	e8 27 fc ff ff       	call   13a44 <write_esc>
   13e1d:	83 c4 10             	add    $0x10,%esp
                break;
   13e20:	eb 17                	jmp    13e39 <console_write+0xec>
                write_esc_square(console, c);
   13e22:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13e26:	0f be c0             	movsbl %al,%eax
   13e29:	83 ec 08             	sub    $0x8,%esp
   13e2c:	50                   	push   %eax
   13e2d:	ff 75 f0             	pushl  -0x10(%ebp)
   13e30:	e8 21 fe ff ff       	call   13c56 <write_esc_square>
   13e35:	83 c4 10             	add    $0x10,%esp
                break;
   13e38:	90                   	nop
        len++;
   13e39:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    do {
   13e3d:	e9 3e ff ff ff       	jmp    13d80 <console_write+0x33>
}
   13e42:	c9                   	leave  
   13e43:	c3                   	ret    

00013e44 <console_close>:

/**
 * @brief 关闭控制台及键盘
 */
void console_close (int dev) {
   13e44:	55                   	push   %ebp
   13e45:	89 e5                	mov    %esp,%ebp
	// 似乎不太需要做点什么
}
   13e47:	90                   	nop
   13e48:	5d                   	pop    %ebp
   13e49:	c3                   	ret    

00013e4a <is_devid_bad>:
};

// 设备表
static device_t dev_tbl[DEV_TABLE_SIZE];

static int is_devid_bad (int dev_id) {
   13e4a:	55                   	push   %ebp
   13e4b:	89 e5                	mov    %esp,%ebp
    if ((dev_id < 0) || (dev_id >=  sizeof(dev_tbl) / sizeof(dev_tbl[0]))) {
   13e4d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13e51:	78 08                	js     13e5b <is_devid_bad+0x11>
   13e53:	8b 45 08             	mov    0x8(%ebp),%eax
   13e56:	83 f8 7f             	cmp    $0x7f,%eax
   13e59:	76 07                	jbe    13e62 <is_devid_bad+0x18>
        return 1;
   13e5b:	b8 01 00 00 00       	mov    $0x1,%eax
   13e60:	eb 24                	jmp    13e86 <is_devid_bad+0x3c>
    }

    if (dev_tbl[dev_id].desc == (dev_desc_t *)0) {
   13e62:	8b 55 08             	mov    0x8(%ebp),%edx
   13e65:	89 d0                	mov    %edx,%eax
   13e67:	c1 e0 02             	shl    $0x2,%eax
   13e6a:	01 d0                	add    %edx,%eax
   13e6c:	c1 e0 02             	shl    $0x2,%eax
   13e6f:	05 40 59 03 00       	add    $0x35940,%eax
   13e74:	8b 00                	mov    (%eax),%eax
   13e76:	85 c0                	test   %eax,%eax
   13e78:	75 07                	jne    13e81 <is_devid_bad+0x37>
        return 1;
   13e7a:	b8 01 00 00 00       	mov    $0x1,%eax
   13e7f:	eb 05                	jmp    13e86 <is_devid_bad+0x3c>
    }

    return 0;
   13e81:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13e86:	5d                   	pop    %ebp
   13e87:	c3                   	ret    

00013e88 <dev_open>:

/**
 * @brief 打开指定的设备
 */
int dev_open (int major, int minor, void * data) {
   13e88:	55                   	push   %ebp
   13e89:	89 e5                	mov    %esp,%ebp
   13e8b:	83 ec 28             	sub    $0x28,%esp
    irq_state_t state = irq_enter_protection();
   13e8e:	e8 7f f2 ff ff       	call   13112 <irq_enter_protection>
   13e93:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 遍历：遇到已经打开的直接返回；否则找一个空闲项
    device_t * free_dev = (device_t *)0;
   13e96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++) {
   13e9d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   13ea4:	eb 68                	jmp    13f0e <dev_open+0x86>
        device_t * dev = dev_tbl + i;
   13ea6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13ea9:	89 d0                	mov    %edx,%eax
   13eab:	c1 e0 02             	shl    $0x2,%eax
   13eae:	01 d0                	add    %edx,%eax
   13eb0:	c1 e0 02             	shl    $0x2,%eax
   13eb3:	05 40 59 03 00       	add    $0x35940,%eax
   13eb8:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (dev->open_count == 0) {
   13ebb:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ebe:	8b 40 10             	mov    0x10(%eax),%eax
   13ec1:	85 c0                	test   %eax,%eax
   13ec3:	75 08                	jne    13ecd <dev_open+0x45>
            // 纪录空闲值
            free_dev = dev;
   13ec5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ec8:	89 45 f4             	mov    %eax,-0xc(%ebp)
   13ecb:	eb 3d                	jmp    13f0a <dev_open+0x82>
        } else if ((dev->desc->major == major) && (dev->minor == minor)) {
   13ecd:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ed0:	8b 00                	mov    (%eax),%eax
   13ed2:	8b 40 20             	mov    0x20(%eax),%eax
   13ed5:	39 45 08             	cmp    %eax,0x8(%ebp)
   13ed8:	75 30                	jne    13f0a <dev_open+0x82>
   13eda:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13edd:	8b 40 08             	mov    0x8(%eax),%eax
   13ee0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13ee3:	75 25                	jne    13f0a <dev_open+0x82>
            // 找到了已经打开的？直接返回就好
            dev->open_count++;
   13ee5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ee8:	8b 40 10             	mov    0x10(%eax),%eax
   13eeb:	8d 50 01             	lea    0x1(%eax),%edx
   13eee:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ef1:	89 50 10             	mov    %edx,0x10(%eax)
            irq_leave_protection(state);
   13ef4:	83 ec 0c             	sub    $0xc,%esp
   13ef7:	ff 75 e4             	pushl  -0x1c(%ebp)
   13efa:	e8 2b f2 ff ff       	call   1312a <irq_leave_protection>
   13eff:	83 c4 10             	add    $0x10,%esp
            return i;
   13f02:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f05:	e9 c8 00 00 00       	jmp    13fd2 <dev_open+0x14a>
    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++) {
   13f0a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   13f0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f11:	83 f8 7f             	cmp    $0x7f,%eax
   13f14:	76 90                	jbe    13ea6 <dev_open+0x1e>
        }
    }

    // 新打开设备？查找设备类型描述符, 看看是不是支持的类型
    dev_desc_t * desc = (dev_desc_t *)0;
   13f16:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++) {
   13f1d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   13f24:	eb 24                	jmp    13f4a <dev_open+0xc2>
        dev_desc_t * d = dev_desc_tbl[i];
   13f26:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13f29:	8b 04 85 50 a0 01 00 	mov    0x1a050(,%eax,4),%eax
   13f30:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (d->major == major) {
   13f33:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13f36:	8b 40 20             	mov    0x20(%eax),%eax
   13f39:	39 45 08             	cmp    %eax,0x8(%ebp)
   13f3c:	75 08                	jne    13f46 <dev_open+0xbe>
            desc = d;
   13f3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13f41:	89 45 ec             	mov    %eax,-0x14(%ebp)
            break;
   13f44:	eb 0c                	jmp    13f52 <dev_open+0xca>
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++) {
   13f46:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   13f4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13f4d:	83 f8 01             	cmp    $0x1,%eax
   13f50:	76 d4                	jbe    13f26 <dev_open+0x9e>
        }
    }

    // 有空闲且有对应的描述项
    if (desc && free_dev) {
   13f52:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13f56:	74 67                	je     13fbf <dev_open+0x137>
   13f58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13f5c:	74 61                	je     13fbf <dev_open+0x137>
        free_dev->minor = minor;
   13f5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f61:	8b 55 0c             	mov    0xc(%ebp),%edx
   13f64:	89 50 08             	mov    %edx,0x8(%eax)
        free_dev->data = data;
   13f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f6a:	8b 55 10             	mov    0x10(%ebp),%edx
   13f6d:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->desc = desc;
   13f70:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f73:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13f76:	89 10                	mov    %edx,(%eax)

        int err = desc->open(free_dev);
   13f78:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13f7b:	8b 40 24             	mov    0x24(%eax),%eax
   13f7e:	83 ec 0c             	sub    $0xc,%esp
   13f81:	ff 75 f4             	pushl  -0xc(%ebp)
   13f84:	ff d0                	call   *%eax
   13f86:	83 c4 10             	add    $0x10,%esp
   13f89:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (err == 0) {
   13f8c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   13f90:	75 2d                	jne    13fbf <dev_open+0x137>
            free_dev->open_count = 1;
   13f92:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f95:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            irq_leave_protection(state);
   13f9c:	83 ec 0c             	sub    $0xc,%esp
   13f9f:	ff 75 e4             	pushl  -0x1c(%ebp)
   13fa2:	e8 83 f1 ff ff       	call   1312a <irq_leave_protection>
   13fa7:	83 c4 10             	add    $0x10,%esp
            return free_dev - dev_tbl;
   13faa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fad:	ba 40 59 03 00       	mov    $0x35940,%edx
   13fb2:	29 d0                	sub    %edx,%eax
   13fb4:	c1 f8 02             	sar    $0x2,%eax
   13fb7:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
   13fbd:	eb 13                	jmp    13fd2 <dev_open+0x14a>
        }
    }

    irq_leave_protection(state);
   13fbf:	83 ec 0c             	sub    $0xc,%esp
   13fc2:	ff 75 e4             	pushl  -0x1c(%ebp)
   13fc5:	e8 60 f1 ff ff       	call   1312a <irq_leave_protection>
   13fca:	83 c4 10             	add    $0x10,%esp
    return -1;
   13fcd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13fd2:	c9                   	leave  
   13fd3:	c3                   	ret    

00013fd4 <dev_read>:

/**
 * @brief 读取指定字节的数据
 */
int dev_read (int dev_id, int addr, char * buf, int size) {
   13fd4:	55                   	push   %ebp
   13fd5:	89 e5                	mov    %esp,%ebp
   13fd7:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   13fda:	ff 75 08             	pushl  0x8(%ebp)
   13fdd:	e8 68 fe ff ff       	call   13e4a <is_devid_bad>
   13fe2:	83 c4 04             	add    $0x4,%esp
   13fe5:	85 c0                	test   %eax,%eax
   13fe7:	74 07                	je     13ff0 <dev_read+0x1c>
        return -1;
   13fe9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13fee:	eb 2e                	jmp    1401e <dev_read+0x4a>
    }

    device_t * dev = dev_tbl + dev_id;
   13ff0:	8b 55 08             	mov    0x8(%ebp),%edx
   13ff3:	89 d0                	mov    %edx,%eax
   13ff5:	c1 e0 02             	shl    $0x2,%eax
   13ff8:	01 d0                	add    %edx,%eax
   13ffa:	c1 e0 02             	shl    $0x2,%eax
   13ffd:	05 40 59 03 00       	add    $0x35940,%eax
   14002:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   14005:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14008:	8b 00                	mov    (%eax),%eax
   1400a:	8b 40 28             	mov    0x28(%eax),%eax
   1400d:	ff 75 14             	pushl  0x14(%ebp)
   14010:	ff 75 10             	pushl  0x10(%ebp)
   14013:	ff 75 0c             	pushl  0xc(%ebp)
   14016:	ff 75 f4             	pushl  -0xc(%ebp)
   14019:	ff d0                	call   *%eax
   1401b:	83 c4 10             	add    $0x10,%esp
}
   1401e:	c9                   	leave  
   1401f:	c3                   	ret    

00014020 <dev_write>:

/**
 * @brief 写指定字节的数据
 */
int dev_write (int dev_id, int addr, char * buf, int size) {
   14020:	55                   	push   %ebp
   14021:	89 e5                	mov    %esp,%ebp
   14023:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   14026:	ff 75 08             	pushl  0x8(%ebp)
   14029:	e8 1c fe ff ff       	call   13e4a <is_devid_bad>
   1402e:	83 c4 04             	add    $0x4,%esp
   14031:	85 c0                	test   %eax,%eax
   14033:	74 07                	je     1403c <dev_write+0x1c>
        return -1;
   14035:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1403a:	eb 2e                	jmp    1406a <dev_write+0x4a>
    }

    device_t * dev = dev_tbl + dev_id;
   1403c:	8b 55 08             	mov    0x8(%ebp),%edx
   1403f:	89 d0                	mov    %edx,%eax
   14041:	c1 e0 02             	shl    $0x2,%eax
   14044:	01 d0                	add    %edx,%eax
   14046:	c1 e0 02             	shl    $0x2,%eax
   14049:	05 40 59 03 00       	add    $0x35940,%eax
   1404e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   14051:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14054:	8b 00                	mov    (%eax),%eax
   14056:	8b 40 2c             	mov    0x2c(%eax),%eax
   14059:	ff 75 14             	pushl  0x14(%ebp)
   1405c:	ff 75 10             	pushl  0x10(%ebp)
   1405f:	ff 75 0c             	pushl  0xc(%ebp)
   14062:	ff 75 f4             	pushl  -0xc(%ebp)
   14065:	ff d0                	call   *%eax
   14067:	83 c4 10             	add    $0x10,%esp
}
   1406a:	c9                   	leave  
   1406b:	c3                   	ret    

0001406c <dev_control>:

/**
 * @brief 发送控制命令
 */

int dev_control (int dev_id, int cmd, int arg0, int arg1) {
   1406c:	55                   	push   %ebp
   1406d:	89 e5                	mov    %esp,%ebp
   1406f:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   14072:	ff 75 08             	pushl  0x8(%ebp)
   14075:	e8 d0 fd ff ff       	call   13e4a <is_devid_bad>
   1407a:	83 c4 04             	add    $0x4,%esp
   1407d:	85 c0                	test   %eax,%eax
   1407f:	74 07                	je     14088 <dev_control+0x1c>
        return -1;
   14081:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14086:	eb 2e                	jmp    140b6 <dev_control+0x4a>
    }

    device_t * dev = dev_tbl + dev_id;
   14088:	8b 55 08             	mov    0x8(%ebp),%edx
   1408b:	89 d0                	mov    %edx,%eax
   1408d:	c1 e0 02             	shl    $0x2,%eax
   14090:	01 d0                	add    %edx,%eax
   14092:	c1 e0 02             	shl    $0x2,%eax
   14095:	05 40 59 03 00       	add    $0x35940,%eax
   1409a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   1409d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140a0:	8b 00                	mov    (%eax),%eax
   140a2:	8b 40 30             	mov    0x30(%eax),%eax
   140a5:	ff 75 14             	pushl  0x14(%ebp)
   140a8:	ff 75 10             	pushl  0x10(%ebp)
   140ab:	ff 75 0c             	pushl  0xc(%ebp)
   140ae:	ff 75 f4             	pushl  -0xc(%ebp)
   140b1:	ff d0                	call   *%eax
   140b3:	83 c4 10             	add    $0x10,%esp
}
   140b6:	c9                   	leave  
   140b7:	c3                   	ret    

000140b8 <dev_close>:

/**
 * @brief 关闭设备
 */
void dev_close (int dev_id) {
   140b8:	55                   	push   %ebp
   140b9:	89 e5                	mov    %esp,%ebp
   140bb:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   140be:	ff 75 08             	pushl  0x8(%ebp)
   140c1:	e8 84 fd ff ff       	call   13e4a <is_devid_bad>
   140c6:	83 c4 04             	add    $0x4,%esp
   140c9:	85 c0                	test   %eax,%eax
   140cb:	75 6b                	jne    14138 <dev_close+0x80>
        return;
    }

    device_t * dev = dev_tbl + dev_id;
   140cd:	8b 55 08             	mov    0x8(%ebp),%edx
   140d0:	89 d0                	mov    %edx,%eax
   140d2:	c1 e0 02             	shl    $0x2,%eax
   140d5:	01 d0                	add    %edx,%eax
   140d7:	c1 e0 02             	shl    $0x2,%eax
   140da:	05 40 59 03 00       	add    $0x35940,%eax
   140df:	89 45 f4             	mov    %eax,-0xc(%ebp)

    irq_state_t state = irq_enter_protection();
   140e2:	e8 2b f0 ff ff       	call   13112 <irq_enter_protection>
   140e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0) {
   140ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140ed:	8b 40 10             	mov    0x10(%eax),%eax
   140f0:	8d 50 ff             	lea    -0x1(%eax),%edx
   140f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140f6:	89 50 10             	mov    %edx,0x10(%eax)
   140f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140fc:	8b 40 10             	mov    0x10(%eax),%eax
   140ff:	85 c0                	test   %eax,%eax
   14101:	75 25                	jne    14128 <dev_close+0x70>
        dev->desc->close(dev);
   14103:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14106:	8b 00                	mov    (%eax),%eax
   14108:	8b 40 34             	mov    0x34(%eax),%eax
   1410b:	83 ec 0c             	sub    $0xc,%esp
   1410e:	ff 75 f4             	pushl  -0xc(%ebp)
   14111:	ff d0                	call   *%eax
   14113:	83 c4 10             	add    $0x10,%esp
        kernel_memset(dev, 0, sizeof(device_t));
   14116:	83 ec 04             	sub    $0x4,%esp
   14119:	6a 14                	push   $0x14
   1411b:	6a 00                	push   $0x0
   1411d:	ff 75 f4             	pushl  -0xc(%ebp)
   14120:	e8 61 43 00 00       	call   18486 <kernel_memset>
   14125:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   14128:	83 ec 0c             	sub    $0xc,%esp
   1412b:	ff 75 f0             	pushl  -0x10(%ebp)
   1412e:	e8 f7 ef ff ff       	call   1312a <irq_leave_protection>
   14133:	83 c4 10             	add    $0x10,%esp
   14136:	eb 01                	jmp    14139 <dev_close+0x81>
        return;
   14138:	90                   	nop
   14139:	c9                   	leave  
   1413a:	c3                   	ret    

0001413b <inb>:
static inline uint8_t inb(uint16_t  port) {
   1413b:	55                   	push   %ebp
   1413c:	89 e5                	mov    %esp,%ebp
   1413e:	83 ec 14             	sub    $0x14,%esp
   14141:	8b 45 08             	mov    0x8(%ebp),%eax
   14144:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   14148:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1414c:	89 c2                	mov    %eax,%edx
   1414e:	ec                   	in     (%dx),%al
   1414f:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   14152:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14156:	c9                   	leave  
   14157:	c3                   	ret    

00014158 <inw>:
static inline uint16_t inw(uint16_t  port) {
   14158:	55                   	push   %ebp
   14159:	89 e5                	mov    %esp,%ebp
   1415b:	83 ec 14             	sub    $0x14,%esp
   1415e:	8b 45 08             	mov    0x8(%ebp),%eax
   14161:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
   14165:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14169:	89 c2                	mov    %eax,%edx
   1416b:	66 ed                	in     (%dx),%ax
   1416d:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	return rv;
   14171:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   14175:	c9                   	leave  
   14176:	c3                   	ret    

00014177 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14177:	55                   	push   %ebp
   14178:	89 e5                	mov    %esp,%ebp
   1417a:	83 ec 08             	sub    $0x8,%esp
   1417d:	8b 55 08             	mov    0x8(%ebp),%edx
   14180:	8b 45 0c             	mov    0xc(%ebp),%eax
   14183:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   14187:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1418a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1418e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14192:	ee                   	out    %al,(%dx)
}
   14193:	90                   	nop
   14194:	c9                   	leave  
   14195:	c3                   	ret    

00014196 <outw>:
static inline void outw(uint16_t port, uint16_t data) {
   14196:	55                   	push   %ebp
   14197:	89 e5                	mov    %esp,%ebp
   14199:	83 ec 08             	sub    $0x8,%esp
   1419c:	8b 55 08             	mov    0x8(%ebp),%edx
   1419f:	8b 45 0c             	mov    0xc(%ebp),%eax
   141a2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   141a6:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	__asm__ __volatile__("out %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   141aa:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   141ae:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
   141b2:	66 ef                	out    %ax,(%dx)
}
   141b4:	90                   	nop
   141b5:	c9                   	leave  
   141b6:	c3                   	ret    

000141b7 <ata_send_cmd>:
static int task_on_op;

/**
 * 发送ata命令，支持多达16位的扇区，对我们目前的程序来书够用了。
 */
static void ata_send_cmd (disk_t * disk, uint32_t start_sector, uint32_t sector_count, int cmd) {
   141b7:	55                   	push   %ebp
   141b8:	89 e5                	mov    %esp,%ebp
    outb(DISK_DRIVE(disk), DISK_DRIVE_BASE | disk->drive);		// 使用LBA寻址，并设置驱动器
   141ba:	8b 45 08             	mov    0x8(%ebp),%eax
   141bd:	8b 40 20             	mov    0x20(%eax),%eax
   141c0:	83 c8 e0             	or     $0xffffffe0,%eax
   141c3:	0f b6 d0             	movzbl %al,%edx
   141c6:	8b 45 08             	mov    0x8(%ebp),%eax
   141c9:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   141cd:	83 c0 06             	add    $0x6,%eax
   141d0:	0f b7 c0             	movzwl %ax,%eax
   141d3:	52                   	push   %edx
   141d4:	50                   	push   %eax
   141d5:	e8 9d ff ff ff       	call   14177 <outb>
   141da:	83 c4 08             	add    $0x8,%esp

	// 必须先写高字节
	outb(DISK_SECTOR_COUNT(disk), (uint8_t) (sector_count >> 8));	// 扇区数高8位
   141dd:	8b 45 10             	mov    0x10(%ebp),%eax
   141e0:	c1 e8 08             	shr    $0x8,%eax
   141e3:	0f b6 d0             	movzbl %al,%edx
   141e6:	8b 45 08             	mov    0x8(%ebp),%eax
   141e9:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   141ed:	83 c0 02             	add    $0x2,%eax
   141f0:	0f b7 c0             	movzwl %ax,%eax
   141f3:	52                   	push   %edx
   141f4:	50                   	push   %eax
   141f5:	e8 7d ff ff ff       	call   14177 <outb>
   141fa:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_LO(disk), (uint8_t) (start_sector >> 24));		// LBA参数的24~31位
   141fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   14200:	c1 e8 18             	shr    $0x18,%eax
   14203:	0f b6 d0             	movzbl %al,%edx
   14206:	8b 45 08             	mov    0x8(%ebp),%eax
   14209:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1420d:	83 c0 03             	add    $0x3,%eax
   14210:	0f b7 c0             	movzwl %ax,%eax
   14213:	52                   	push   %edx
   14214:	50                   	push   %eax
   14215:	e8 5d ff ff ff       	call   14177 <outb>
   1421a:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_MID(disk), 0);									// 高于32位不支持
   1421d:	8b 45 08             	mov    0x8(%ebp),%eax
   14220:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14224:	83 c0 04             	add    $0x4,%eax
   14227:	0f b7 c0             	movzwl %ax,%eax
   1422a:	6a 00                	push   $0x0
   1422c:	50                   	push   %eax
   1422d:	e8 45 ff ff ff       	call   14177 <outb>
   14232:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_HI(disk), 0);										// 高于32位不支持
   14235:	8b 45 08             	mov    0x8(%ebp),%eax
   14238:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1423c:	83 c0 05             	add    $0x5,%eax
   1423f:	0f b7 c0             	movzwl %ax,%eax
   14242:	6a 00                	push   $0x0
   14244:	50                   	push   %eax
   14245:	e8 2d ff ff ff       	call   14177 <outb>
   1424a:	83 c4 08             	add    $0x8,%esp
	outb(DISK_SECTOR_COUNT(disk), (uint8_t) (sector_count));		// 扇区数量低8位
   1424d:	8b 45 10             	mov    0x10(%ebp),%eax
   14250:	0f b6 d0             	movzbl %al,%edx
   14253:	8b 45 08             	mov    0x8(%ebp),%eax
   14256:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1425a:	83 c0 02             	add    $0x2,%eax
   1425d:	0f b7 c0             	movzwl %ax,%eax
   14260:	52                   	push   %edx
   14261:	50                   	push   %eax
   14262:	e8 10 ff ff ff       	call   14177 <outb>
   14267:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_LO(disk), (uint8_t) (start_sector >> 0));			// LBA参数的0-7
   1426a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1426d:	0f b6 d0             	movzbl %al,%edx
   14270:	8b 45 08             	mov    0x8(%ebp),%eax
   14273:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14277:	83 c0 03             	add    $0x3,%eax
   1427a:	0f b7 c0             	movzwl %ax,%eax
   1427d:	52                   	push   %edx
   1427e:	50                   	push   %eax
   1427f:	e8 f3 fe ff ff       	call   14177 <outb>
   14284:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_MID(disk), (uint8_t) (start_sector >> 8));		// LBA参数的8-15位
   14287:	8b 45 0c             	mov    0xc(%ebp),%eax
   1428a:	c1 e8 08             	shr    $0x8,%eax
   1428d:	0f b6 d0             	movzbl %al,%edx
   14290:	8b 45 08             	mov    0x8(%ebp),%eax
   14293:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14297:	83 c0 04             	add    $0x4,%eax
   1429a:	0f b7 c0             	movzwl %ax,%eax
   1429d:	52                   	push   %edx
   1429e:	50                   	push   %eax
   1429f:	e8 d3 fe ff ff       	call   14177 <outb>
   142a4:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_HI(disk), (uint8_t) (start_sector >> 16));		// LBA参数的16-23位
   142a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   142aa:	c1 e8 10             	shr    $0x10,%eax
   142ad:	0f b6 d0             	movzbl %al,%edx
   142b0:	8b 45 08             	mov    0x8(%ebp),%eax
   142b3:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   142b7:	83 c0 05             	add    $0x5,%eax
   142ba:	0f b7 c0             	movzwl %ax,%eax
   142bd:	52                   	push   %edx
   142be:	50                   	push   %eax
   142bf:	e8 b3 fe ff ff       	call   14177 <outb>
   142c4:	83 c4 08             	add    $0x8,%esp

	// 选择对应的主-从磁盘
	outb(DISK_CMD(disk), (uint8_t)cmd);
   142c7:	8b 45 14             	mov    0x14(%ebp),%eax
   142ca:	0f b6 d0             	movzbl %al,%edx
   142cd:	8b 45 08             	mov    0x8(%ebp),%eax
   142d0:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   142d4:	83 c0 07             	add    $0x7,%eax
   142d7:	0f b7 c0             	movzwl %ax,%eax
   142da:	52                   	push   %edx
   142db:	50                   	push   %eax
   142dc:	e8 96 fe ff ff       	call   14177 <outb>
   142e1:	83 c4 08             	add    $0x8,%esp
}
   142e4:	90                   	nop
   142e5:	c9                   	leave  
   142e6:	c3                   	ret    

000142e7 <ata_read_data>:

/**
 * 读取ATA数据端口
 */
static inline void ata_read_data (disk_t * disk, void * buf, int size) {
   142e7:	55                   	push   %ebp
   142e8:	89 e5                	mov    %esp,%ebp
   142ea:	53                   	push   %ebx
   142eb:	83 ec 10             	sub    $0x10,%esp
    uint16_t * c = (uint16_t *)buf;
   142ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   142f1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (int i = 0; i < size / 2; i++) {
   142f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   142fb:	eb 23                	jmp    14320 <ata_read_data+0x39>
        *c++ = inw(DISK_DATA(disk));
   142fd:	8b 45 08             	mov    0x8(%ebp),%eax
   14300:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14304:	0f b7 c0             	movzwl %ax,%eax
   14307:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   1430a:	8d 53 02             	lea    0x2(%ebx),%edx
   1430d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   14310:	50                   	push   %eax
   14311:	e8 42 fe ff ff       	call   14158 <inw>
   14316:	83 c4 04             	add    $0x4,%esp
   14319:	66 89 03             	mov    %ax,(%ebx)
    for (int i = 0; i < size / 2; i++) {
   1431c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14320:	8b 45 10             	mov    0x10(%ebp),%eax
   14323:	89 c2                	mov    %eax,%edx
   14325:	c1 ea 1f             	shr    $0x1f,%edx
   14328:	01 d0                	add    %edx,%eax
   1432a:	d1 f8                	sar    %eax
   1432c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1432f:	7c cc                	jl     142fd <ata_read_data+0x16>
    }
}
   14331:	90                   	nop
   14332:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14335:	c9                   	leave  
   14336:	c3                   	ret    

00014337 <ata_write_data>:

/**
 * 读取ATA数据端口
 */
static inline void ata_write_data (disk_t * disk, void * buf, int size) {
   14337:	55                   	push   %ebp
   14338:	89 e5                	mov    %esp,%ebp
   1433a:	83 ec 10             	sub    $0x10,%esp
    uint16_t * c = (uint16_t *)buf;
   1433d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14340:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < size / 2; i++) {
   14343:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1434a:	eb 27                	jmp    14373 <ata_write_data+0x3c>
        outw(DISK_DATA(disk), *c++);
   1434c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1434f:	8d 50 02             	lea    0x2(%eax),%edx
   14352:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14355:	0f b7 00             	movzwl (%eax),%eax
   14358:	0f b7 d0             	movzwl %ax,%edx
   1435b:	8b 45 08             	mov    0x8(%ebp),%eax
   1435e:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14362:	0f b7 c0             	movzwl %ax,%eax
   14365:	52                   	push   %edx
   14366:	50                   	push   %eax
   14367:	e8 2a fe ff ff       	call   14196 <outw>
   1436c:	83 c4 08             	add    $0x8,%esp
    for (int i = 0; i < size / 2; i++) {
   1436f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   14373:	8b 45 10             	mov    0x10(%ebp),%eax
   14376:	89 c2                	mov    %eax,%edx
   14378:	c1 ea 1f             	shr    $0x1f,%edx
   1437b:	01 d0                	add    %edx,%eax
   1437d:	d1 f8                	sar    %eax
   1437f:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   14382:	7c c8                	jl     1434c <ata_write_data+0x15>
    }
}
   14384:	90                   	nop
   14385:	c9                   	leave  
   14386:	c3                   	ret    

00014387 <ata_wait_data>:

/**
 * @brief 等待磁盘有数据到达
 */
static inline int ata_wait_data (disk_t * disk) {
   14387:	55                   	push   %ebp
   14388:	89 e5                	mov    %esp,%ebp
   1438a:	83 ec 10             	sub    $0x10,%esp
    uint8_t status;
	do {
        // 等待数据或者有错误
        status = inb(DISK_STATUS(disk));
   1438d:	8b 45 08             	mov    0x8(%ebp),%eax
   14390:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14394:	83 c0 07             	add    $0x7,%eax
   14397:	0f b7 c0             	movzwl %ax,%eax
   1439a:	50                   	push   %eax
   1439b:	e8 9b fd ff ff       	call   1413b <inb>
   143a0:	83 c4 04             	add    $0x4,%esp
   143a3:	88 45 ff             	mov    %al,-0x1(%ebp)
        if ((status & (DISK_STATUS_BUSY | DISK_STATUS_DRQ | DISK_STATUS_ERR))
   143a6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   143aa:	25 89 00 00 00       	and    $0x89,%eax
   143af:	3d 80 00 00 00       	cmp    $0x80,%eax
   143b4:	75 02                	jne    143b8 <ata_wait_data+0x31>
        status = inb(DISK_STATUS(disk));
   143b6:	eb d5                	jmp    1438d <ata_wait_data+0x6>
                        != DISK_STATUS_BUSY) {
            break;
   143b8:	90                   	nop
        }
    }while (1);

    // 检查是否有错误
    return (status & DISK_STATUS_ERR) ? -1 : 0;
   143b9:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   143bd:	83 e0 01             	and    $0x1,%eax
   143c0:	85 c0                	test   %eax,%eax
   143c2:	74 07                	je     143cb <ata_wait_data+0x44>
   143c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   143c9:	eb 05                	jmp    143d0 <ata_wait_data+0x49>
   143cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   143d0:	c9                   	leave  
   143d1:	c3                   	ret    

000143d2 <print_disk_info>:

/**
 * @brief 打印磁盘信息
 */
static void print_disk_info (disk_t * disk) {
   143d2:	55                   	push   %ebp
   143d3:	89 e5                	mov    %esp,%ebp
   143d5:	53                   	push   %ebx
   143d6:	83 ec 14             	sub    $0x14,%esp
    log_printf("%s:", disk->name);
   143d9:	8b 45 08             	mov    0x8(%ebp),%eax
   143dc:	83 ec 08             	sub    $0x8,%esp
   143df:	50                   	push   %eax
   143e0:	68 00 96 01 00       	push   $0x19600
   143e5:	e8 46 46 00 00       	call   18a30 <log_printf>
   143ea:	83 c4 10             	add    $0x10,%esp
    log_printf("  port_base: %x", disk->port_base);
   143ed:	8b 45 08             	mov    0x8(%ebp),%eax
   143f0:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   143f4:	0f b7 c0             	movzwl %ax,%eax
   143f7:	83 ec 08             	sub    $0x8,%esp
   143fa:	50                   	push   %eax
   143fb:	68 04 96 01 00       	push   $0x19604
   14400:	e8 2b 46 00 00       	call   18a30 <log_printf>
   14405:	83 c4 10             	add    $0x10,%esp
    log_printf("  total_size: %d m", disk->sector_count * disk->sector_size / 1024 /1024);
   14408:	8b 45 08             	mov    0x8(%ebp),%eax
   1440b:	8b 50 2c             	mov    0x2c(%eax),%edx
   1440e:	8b 45 08             	mov    0x8(%ebp),%eax
   14411:	8b 40 28             	mov    0x28(%eax),%eax
   14414:	0f af c2             	imul   %edx,%eax
   14417:	8d 90 ff ff 0f 00    	lea    0xfffff(%eax),%edx
   1441d:	85 c0                	test   %eax,%eax
   1441f:	0f 48 c2             	cmovs  %edx,%eax
   14422:	c1 f8 14             	sar    $0x14,%eax
   14425:	83 ec 08             	sub    $0x8,%esp
   14428:	50                   	push   %eax
   14429:	68 14 96 01 00       	push   $0x19614
   1442e:	e8 fd 45 00 00       	call   18a30 <log_printf>
   14433:	83 c4 10             	add    $0x10,%esp
    log_printf("  drive: %s", disk->drive == DISK_DISK_MASTER ? "Master" : "Slave");
   14436:	8b 45 08             	mov    0x8(%ebp),%eax
   14439:	8b 40 20             	mov    0x20(%eax),%eax
   1443c:	85 c0                	test   %eax,%eax
   1443e:	75 07                	jne    14447 <print_disk_info+0x75>
   14440:	b8 27 96 01 00       	mov    $0x19627,%eax
   14445:	eb 05                	jmp    1444c <print_disk_info+0x7a>
   14447:	b8 2e 96 01 00       	mov    $0x1962e,%eax
   1444c:	83 ec 08             	sub    $0x8,%esp
   1444f:	50                   	push   %eax
   14450:	68 34 96 01 00       	push   $0x19634
   14455:	e8 d6 45 00 00       	call   18a30 <log_printf>
   1445a:	83 c4 10             	add    $0x10,%esp

    // 显示分区信息
    log_printf("  Part info:");
   1445d:	83 ec 0c             	sub    $0xc,%esp
   14460:	68 40 96 01 00       	push   $0x19640
   14465:	e8 c6 45 00 00       	call   18a30 <log_printf>
   1446a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; i++) {
   1446d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14474:	eb 4e                	jmp    144c4 <print_disk_info+0xf2>
        partinfo_t * part_info = disk->partinfo + i;
   14476:	8b 45 08             	mov    0x8(%ebp),%eax
   14479:	8d 48 30             	lea    0x30(%eax),%ecx
   1447c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1447f:	89 d0                	mov    %edx,%eax
   14481:	01 c0                	add    %eax,%eax
   14483:	01 d0                	add    %edx,%eax
   14485:	c1 e0 04             	shl    $0x4,%eax
   14488:	01 c8                	add    %ecx,%eax
   1448a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (part_info->type != FS_INVALID) {
   1448d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14490:	8b 40 24             	mov    0x24(%eax),%eax
   14493:	85 c0                	test   %eax,%eax
   14495:	74 29                	je     144c0 <print_disk_info+0xee>
            log_printf("    %s: type: %x, start sector: %d, count %d",
   14497:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1449a:	8b 58 2c             	mov    0x2c(%eax),%ebx
   1449d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144a0:	8b 48 28             	mov    0x28(%eax),%ecx
                    part_info->name, part_info->type,
   144a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144a6:	8b 50 24             	mov    0x24(%eax),%edx
   144a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
            log_printf("    %s: type: %x, start sector: %d, count %d",
   144ac:	83 ec 0c             	sub    $0xc,%esp
   144af:	53                   	push   %ebx
   144b0:	51                   	push   %ecx
   144b1:	52                   	push   %edx
   144b2:	50                   	push   %eax
   144b3:	68 50 96 01 00       	push   $0x19650
   144b8:	e8 73 45 00 00       	call   18a30 <log_printf>
   144bd:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; i++) {
   144c0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   144c4:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   144c8:	7e ac                	jle    14476 <print_disk_info+0xa4>
                    part_info->start_sector, part_info->total_sector);
        }
    }
}
   144ca:	90                   	nop
   144cb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   144ce:	c9                   	leave  
   144cf:	c3                   	ret    

000144d0 <detect_part_info>:

/**
 * 获取指定序号的分区信息
 * 注意，该操作依赖物理分区分配，如果设备的分区结构有变化，则序号也会改变，得到的结果不同
 */
static int detect_part_info(disk_t * disk) {
   144d0:	55                   	push   %ebp
   144d1:	89 e5                	mov    %esp,%ebp
   144d3:	81 ec 18 02 00 00    	sub    $0x218,%esp
    mbr_t mbr;

    // 读取mbr区
    ata_send_cmd(disk, 0, 1, DISK_CMD_READ);
   144d9:	6a 24                	push   $0x24
   144db:	6a 01                	push   $0x1
   144dd:	6a 00                	push   $0x0
   144df:	ff 75 08             	pushl  0x8(%ebp)
   144e2:	e8 d0 fc ff ff       	call   141b7 <ata_send_cmd>
   144e7:	83 c4 10             	add    $0x10,%esp
    int err = ata_wait_data(disk);
   144ea:	ff 75 08             	pushl  0x8(%ebp)
   144ed:	e8 95 fe ff ff       	call   14387 <ata_wait_data>
   144f2:	83 c4 04             	add    $0x4,%esp
   144f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   144f8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   144fc:	79 18                	jns    14516 <detect_part_info+0x46>
        log_printf("read mbr failed");
   144fe:	83 ec 0c             	sub    $0xc,%esp
   14501:	68 7d 96 01 00       	push   $0x1967d
   14506:	e8 25 45 00 00       	call   18a30 <log_printf>
   1450b:	83 c4 10             	add    $0x10,%esp
        return err;
   1450e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14511:	e9 d1 00 00 00       	jmp    145e7 <detect_part_info+0x117>
    }
    ata_read_data(disk, &mbr, sizeof(mbr));
   14516:	83 ec 04             	sub    $0x4,%esp
   14519:	68 00 02 00 00       	push   $0x200
   1451e:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   14524:	50                   	push   %eax
   14525:	ff 75 08             	pushl  0x8(%ebp)
   14528:	e8 ba fd ff ff       	call   142e7 <ata_read_data>
   1452d:	83 c4 10             	add    $0x10,%esp

	// 遍历4个主分区描述，不考虑支持扩展分区
	part_item_t * item = mbr.part_item;
   14530:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   14536:	05 be 01 00 00       	add    $0x1be,%eax
   1453b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    partinfo_t * part_info = disk->partinfo + 1;
   1453e:	8b 45 08             	mov    0x8(%ebp),%eax
   14541:	83 c0 30             	add    $0x30,%eax
   14544:	83 c0 30             	add    $0x30,%eax
   14547:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (int i = 0; i < MBR_PRIMARY_PART_NR; i++, item++, part_info++) {
   1454a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   14551:	e9 87 00 00 00       	jmp    145dd <detect_part_info+0x10d>
		part_info->type = item->system_id;
   14556:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14559:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   1455d:	0f b6 d0             	movzbl %al,%edx
   14560:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14563:	89 50 24             	mov    %edx,0x24(%eax)

        // 没有分区，清空part_info
		if (part_info->type == FS_INVALID) {
   14566:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14569:	8b 40 24             	mov    0x24(%eax),%eax
   1456c:	85 c0                	test   %eax,%eax
   1456e:	75 20                	jne    14590 <detect_part_info+0xc0>
			part_info->total_sector = 0;
   14570:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14573:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
            part_info->start_sector = 0;
   1457a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1457d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
            part_info->disk = (disk_t *)0;
   14584:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14587:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
   1458e:	eb 41                	jmp    145d1 <detect_part_info+0x101>
        } else {
            // 在主分区中找到，复制信息
            kernel_sprintf(part_info->name, "%s%d", disk->name, i + 1);
   14590:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14593:	8d 48 01             	lea    0x1(%eax),%ecx
   14596:	8b 55 08             	mov    0x8(%ebp),%edx
   14599:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1459c:	51                   	push   %ecx
   1459d:	52                   	push   %edx
   1459e:	68 8d 96 01 00       	push   $0x1968d
   145a3:	50                   	push   %eax
   145a4:	e8 bb 40 00 00       	call   18664 <kernel_sprintf>
   145a9:	83 c4 10             	add    $0x10,%esp
            part_info->start_sector = item->relative_sectors;
   145ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   145af:	8b 40 08             	mov    0x8(%eax),%eax
   145b2:	89 c2                	mov    %eax,%edx
   145b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145b7:	89 50 28             	mov    %edx,0x28(%eax)
            part_info->total_sector = item->total_sectors;
   145ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   145bd:	8b 40 0c             	mov    0xc(%eax),%eax
   145c0:	89 c2                	mov    %eax,%edx
   145c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145c5:	89 50 2c             	mov    %edx,0x2c(%eax)
            part_info->disk = disk;
   145c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145cb:	8b 55 08             	mov    0x8(%ebp),%edx
   145ce:	89 50 20             	mov    %edx,0x20(%eax)
	for (int i = 0; i < MBR_PRIMARY_PART_NR; i++, item++, part_info++) {
   145d1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   145d5:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
   145d9:	83 45 f0 30          	addl   $0x30,-0x10(%ebp)
   145dd:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   145e1:	0f 8e 6f ff ff ff    	jle    14556 <detect_part_info+0x86>
        }
	}
}
   145e7:	c9                   	leave  
   145e8:	c3                   	ret    

000145e9 <identify_disk>:

/**
 * @brief 检测磁盘相关的信息
 */
static int identify_disk (disk_t * disk) {
   145e9:	55                   	push   %ebp
   145ea:	89 e5                	mov    %esp,%ebp
   145ec:	81 ec 18 02 00 00    	sub    $0x218,%esp
    ata_send_cmd(disk, 0, 0, DISK_CMD_IDENTIFY);
   145f2:	68 ec 00 00 00       	push   $0xec
   145f7:	6a 00                	push   $0x0
   145f9:	6a 00                	push   $0x0
   145fb:	ff 75 08             	pushl  0x8(%ebp)
   145fe:	e8 b4 fb ff ff       	call   141b7 <ata_send_cmd>
   14603:	83 c4 10             	add    $0x10,%esp

    // 检测状态，如果为0，则控制器不存在
    int err = inb(DISK_STATUS(disk));
   14606:	8b 45 08             	mov    0x8(%ebp),%eax
   14609:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1460d:	83 c0 07             	add    $0x7,%eax
   14610:	0f b7 c0             	movzwl %ax,%eax
   14613:	50                   	push   %eax
   14614:	e8 22 fb ff ff       	call   1413b <inb>
   14619:	83 c4 04             	add    $0x4,%esp
   1461c:	0f b6 c0             	movzbl %al,%eax
   1461f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == 0) {
   14622:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14626:	75 1e                	jne    14646 <identify_disk+0x5d>
        log_printf("%s doesn't exist\n", disk->name);
   14628:	8b 45 08             	mov    0x8(%ebp),%eax
   1462b:	83 ec 08             	sub    $0x8,%esp
   1462e:	50                   	push   %eax
   1462f:	68 92 96 01 00       	push   $0x19692
   14634:	e8 f7 43 00 00       	call   18a30 <log_printf>
   14639:	83 c4 10             	add    $0x10,%esp
        return -1;
   1463c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14641:	e9 c8 00 00 00       	jmp    1470e <identify_disk+0x125>
    }

    // 等待数据就绪, 此时中断还未开启，因此暂时可以使用查询模式
    err = ata_wait_data(disk);
   14646:	83 ec 0c             	sub    $0xc,%esp
   14649:	ff 75 08             	pushl  0x8(%ebp)
   1464c:	e8 36 fd ff ff       	call   14387 <ata_wait_data>
   14651:	83 c4 10             	add    $0x10,%esp
   14654:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0) {
   14657:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1465b:	79 1c                	jns    14679 <identify_disk+0x90>
        log_printf("disk[%s]: read failed!\n", disk->name);
   1465d:	8b 45 08             	mov    0x8(%ebp),%eax
   14660:	83 ec 08             	sub    $0x8,%esp
   14663:	50                   	push   %eax
   14664:	68 a4 96 01 00       	push   $0x196a4
   14669:	e8 c2 43 00 00       	call   18a30 <log_printf>
   1466e:	83 c4 10             	add    $0x10,%esp
        return err;
   14671:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14674:	e9 95 00 00 00       	jmp    1470e <identify_disk+0x125>
    }

    // 读取返回的数据，特别是uint16_t 100 through 103
    // 测试用的盘： 总共102400 = 0x19000， 实测会多一个扇区，为vhd磁盘格式增加的一个扇区
    uint16_t buf[256];
    ata_read_data(disk, buf, sizeof(buf));
   14679:	83 ec 04             	sub    $0x4,%esp
   1467c:	68 00 02 00 00       	push   $0x200
   14681:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   14687:	50                   	push   %eax
   14688:	ff 75 08             	pushl  0x8(%ebp)
   1468b:	e8 57 fc ff ff       	call   142e7 <ata_read_data>
   14690:	83 c4 10             	add    $0x10,%esp
    disk->sector_count = *(uint32_t *)(buf + 100);
   14693:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   14699:	05 c8 00 00 00       	add    $0xc8,%eax
   1469e:	8b 00                	mov    (%eax),%eax
   146a0:	89 c2                	mov    %eax,%edx
   146a2:	8b 45 08             	mov    0x8(%ebp),%eax
   146a5:	89 50 2c             	mov    %edx,0x2c(%eax)
    disk->sector_size = SECTOR_SIZE;            // 固定为512字节大小
   146a8:	8b 45 08             	mov    0x8(%ebp),%eax
   146ab:	c7 40 28 00 02 00 00 	movl   $0x200,0x28(%eax)

    // 分区0保存了整个磁盘的信息
    partinfo_t * part = disk->partinfo + 0;
   146b2:	8b 45 08             	mov    0x8(%ebp),%eax
   146b5:	83 c0 30             	add    $0x30,%eax
   146b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    part->disk = disk;
   146bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146be:	8b 55 08             	mov    0x8(%ebp),%edx
   146c1:	89 50 20             	mov    %edx,0x20(%eax)
    kernel_sprintf(part->name, "%s%d", disk->name, 0);
   146c4:	8b 55 08             	mov    0x8(%ebp),%edx
   146c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146ca:	6a 00                	push   $0x0
   146cc:	52                   	push   %edx
   146cd:	68 8d 96 01 00       	push   $0x1968d
   146d2:	50                   	push   %eax
   146d3:	e8 8c 3f 00 00       	call   18664 <kernel_sprintf>
   146d8:	83 c4 10             	add    $0x10,%esp
    part->start_sector = 0;
   146db:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146de:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    part->total_sector = disk->sector_count;
   146e5:	8b 45 08             	mov    0x8(%ebp),%eax
   146e8:	8b 50 2c             	mov    0x2c(%eax),%edx
   146eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146ee:	89 50 2c             	mov    %edx,0x2c(%eax)
    part->type = FS_INVALID;
   146f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146f4:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

    // 接下来识别硬盘上的分区信息
    detect_part_info(disk);
   146fb:	83 ec 0c             	sub    $0xc,%esp
   146fe:	ff 75 08             	pushl  0x8(%ebp)
   14701:	e8 ca fd ff ff       	call   144d0 <detect_part_info>
   14706:	83 c4 10             	add    $0x10,%esp
    return 0;
   14709:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1470e:	c9                   	leave  
   1470f:	c3                   	ret    

00014710 <disk_init>:

/**
 * @brief 磁盘初始化及检测
 * 以下只是将相关磁盘相关的信息给读取到内存中
 */
void disk_init (void) {
   14710:	55                   	push   %ebp
   14711:	89 e5                	mov    %esp,%ebp
   14713:	83 ec 18             	sub    $0x18,%esp
    log_printf("Checking disk...");
   14716:	83 ec 0c             	sub    $0xc,%esp
   14719:	68 bc 96 01 00       	push   $0x196bc
   1471e:	e8 0d 43 00 00       	call   18a30 <log_printf>
   14723:	83 c4 10             	add    $0x10,%esp

    // 清空所有disk，以免数据错乱。不过引导程序应该有清0的，这里为安全再清一遍
    kernel_memset(disk_buf, 0, sizeof(disk_buf));
   14726:	83 ec 04             	sub    $0x4,%esp
   14729:	68 50 02 00 00       	push   $0x250
   1472e:	6a 00                	push   $0x0
   14730:	68 40 63 03 00       	push   $0x36340
   14735:	e8 4c 3d 00 00       	call   18486 <kernel_memset>
   1473a:	83 c4 10             	add    $0x10,%esp

    // 信号量和锁
    mutex_init(&mutex);
   1473d:	83 ec 0c             	sub    $0xc,%esp
   14740:	68 90 65 03 00       	push   $0x36590
   14745:	e8 f1 35 00 00       	call   17d3b <mutex_init>
   1474a:	83 c4 10             	add    $0x10,%esp
    sem_init(&op_sem, 0);       // 没有操作完成
   1474d:	83 ec 08             	sub    $0x8,%esp
   14750:	6a 00                	push   $0x0
   14752:	68 a4 65 03 00       	push   $0x365a4
   14757:	e8 6e 37 00 00       	call   17eca <sem_init>
   1475c:	83 c4 10             	add    $0x10,%esp

    // 检测各个硬盘, 读取硬件是否存在，有其相关信息
    for (int i = 0; i < DISK_PER_CHANNEL; i++) {
   1475f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14766:	e9 90 00 00 00       	jmp    147fb <disk_init+0xeb>
        disk_t * disk = disk_buf + i;
   1476b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1476e:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   14774:	05 40 63 03 00       	add    $0x36340,%eax
   14779:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 先初始化各字段
        kernel_sprintf(disk->name, "sd%c", i + 'a');
   1477c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1477f:	8d 50 61             	lea    0x61(%eax),%edx
   14782:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14785:	83 ec 04             	sub    $0x4,%esp
   14788:	52                   	push   %edx
   14789:	68 cd 96 01 00       	push   $0x196cd
   1478e:	50                   	push   %eax
   1478f:	e8 d0 3e 00 00       	call   18664 <kernel_sprintf>
   14794:	83 c4 10             	add    $0x10,%esp
        disk->drive = (i == 0) ? DISK_DISK_MASTER : DISK_DISK_SLAVE;
   14797:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1479b:	75 07                	jne    147a4 <disk_init+0x94>
   1479d:	ba 00 00 00 00       	mov    $0x0,%edx
   147a2:	eb 05                	jmp    147a9 <disk_init+0x99>
   147a4:	ba 10 00 00 00       	mov    $0x10,%edx
   147a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147ac:	89 50 20             	mov    %edx,0x20(%eax)
        disk->port_base = IOBASE_PRIMARY;
   147af:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147b2:	66 c7 40 24 f0 01    	movw   $0x1f0,0x24(%eax)
        disk->mutex = &mutex;
   147b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147bb:	c7 80 20 01 00 00 90 	movl   $0x36590,0x120(%eax)
   147c2:	65 03 00 
        disk->op_sem = &op_sem;
   147c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147c8:	c7 80 24 01 00 00 a4 	movl   $0x365a4,0x124(%eax)
   147cf:	65 03 00 

        // 识别磁盘，有错不处理，直接跳过
        int err = identify_disk(disk);
   147d2:	83 ec 0c             	sub    $0xc,%esp
   147d5:	ff 75 f0             	pushl  -0x10(%ebp)
   147d8:	e8 0c fe ff ff       	call   145e9 <identify_disk>
   147dd:	83 c4 10             	add    $0x10,%esp
   147e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (err == 0) {
   147e3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   147e7:	75 0e                	jne    147f7 <disk_init+0xe7>
            print_disk_info(disk);
   147e9:	83 ec 0c             	sub    $0xc,%esp
   147ec:	ff 75 f0             	pushl  -0x10(%ebp)
   147ef:	e8 de fb ff ff       	call   143d2 <print_disk_info>
   147f4:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < DISK_PER_CHANNEL; i++) {
   147f7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   147fb:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   147ff:	0f 8e 66 ff ff ff    	jle    1476b <disk_init+0x5b>
        }
    }
}
   14805:	90                   	nop
   14806:	c9                   	leave  
   14807:	c3                   	ret    

00014808 <disk_open>:


/**
 * @brief 打开磁盘设备
 */
int disk_open (device_t * dev) {
   14808:	55                   	push   %ebp
   14809:	89 e5                	mov    %esp,%ebp
   1480b:	83 ec 18             	sub    $0x18,%esp
    int disk_idx = (dev->minor >> 4) - 0xa;
   1480e:	8b 45 08             	mov    0x8(%ebp),%eax
   14811:	8b 40 08             	mov    0x8(%eax),%eax
   14814:	c1 f8 04             	sar    $0x4,%eax
   14817:	83 e8 0a             	sub    $0xa,%eax
   1481a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int part_idx = dev->minor & 0xF;
   1481d:	8b 45 08             	mov    0x8(%ebp),%eax
   14820:	8b 40 08             	mov    0x8(%eax),%eax
   14823:	83 e0 0f             	and    $0xf,%eax
   14826:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if ((disk_idx >= DISK_CNT) || (part_idx >= DISK_PRIMARY_PART_CNT)) {
   14829:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   1482d:	7f 06                	jg     14835 <disk_open+0x2d>
   1482f:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   14833:	7e 21                	jle    14856 <disk_open+0x4e>
        log_printf("device minor error: %d", dev->minor);
   14835:	8b 45 08             	mov    0x8(%ebp),%eax
   14838:	8b 40 08             	mov    0x8(%eax),%eax
   1483b:	83 ec 08             	sub    $0x8,%esp
   1483e:	50                   	push   %eax
   1483f:	68 d2 96 01 00       	push   $0x196d2
   14844:	e8 e7 41 00 00       	call   18a30 <log_printf>
   14849:	83 c4 10             	add    $0x10,%esp
        return -1;
   1484c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14851:	e9 a5 00 00 00       	jmp    148fb <disk_open+0xf3>
    }

    disk_t * disk = disk_buf + disk_idx;
   14856:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14859:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   1485f:	05 40 63 03 00       	add    $0x36340,%eax
   14864:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk->sector_size == 0) {
   14867:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1486a:	8b 40 28             	mov    0x28(%eax),%eax
   1486d:	85 c0                	test   %eax,%eax
   1486f:	75 1e                	jne    1488f <disk_open+0x87>
        log_printf("disk not exist. device:sd%x", dev->minor);
   14871:	8b 45 08             	mov    0x8(%ebp),%eax
   14874:	8b 40 08             	mov    0x8(%eax),%eax
   14877:	83 ec 08             	sub    $0x8,%esp
   1487a:	50                   	push   %eax
   1487b:	68 e9 96 01 00       	push   $0x196e9
   14880:	e8 ab 41 00 00       	call   18a30 <log_printf>
   14885:	83 c4 10             	add    $0x10,%esp
        return -1;
   14888:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1488d:	eb 6c                	jmp    148fb <disk_open+0xf3>
    }

    partinfo_t * part_info = disk->partinfo + part_idx;
   1488f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14892:	8d 48 30             	lea    0x30(%eax),%ecx
   14895:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14898:	89 d0                	mov    %edx,%eax
   1489a:	01 c0                	add    %eax,%eax
   1489c:	01 d0                	add    %edx,%eax
   1489e:	c1 e0 04             	shl    $0x4,%eax
   148a1:	01 c8                	add    %ecx,%eax
   148a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (part_info->total_sector == 0) {
   148a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   148a9:	8b 40 2c             	mov    0x2c(%eax),%eax
   148ac:	85 c0                	test   %eax,%eax
   148ae:	75 1e                	jne    148ce <disk_open+0xc6>
        log_printf("part not exist. device:sd%x", dev->minor);
   148b0:	8b 45 08             	mov    0x8(%ebp),%eax
   148b3:	8b 40 08             	mov    0x8(%eax),%eax
   148b6:	83 ec 08             	sub    $0x8,%esp
   148b9:	50                   	push   %eax
   148ba:	68 05 97 01 00       	push   $0x19705
   148bf:	e8 6c 41 00 00       	call   18a30 <log_printf>
   148c4:	83 c4 10             	add    $0x10,%esp
        return -1;
   148c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   148cc:	eb 2d                	jmp    148fb <disk_open+0xf3>
    }

    // 磁盘存在，建立关联
    dev->data = part_info;
   148ce:	8b 45 08             	mov    0x8(%ebp),%eax
   148d1:	8b 55 e8             	mov    -0x18(%ebp),%edx
   148d4:	89 50 0c             	mov    %edx,0xc(%eax)
    irq_install(IRQ14_HARDDISK_PRIMARY, exception_handler_ide_primary);
   148d7:	83 ec 08             	sub    $0x8,%esp
   148da:	68 c4 02 01 00       	push   $0x102c4
   148df:	6a 2e                	push   $0x2e
   148e1:	e8 ca e6 ff ff       	call   12fb0 <irq_install>
   148e6:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ14_HARDDISK_PRIMARY);
   148e9:	83 ec 0c             	sub    $0xc,%esp
   148ec:	6a 2e                	push   $0x2e
   148ee:	e8 f7 e6 ff ff       	call   12fea <irq_enable>
   148f3:	83 c4 10             	add    $0x10,%esp
    return 0;
   148f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   148fb:	c9                   	leave  
   148fc:	c3                   	ret    

000148fd <disk_read>:

/**
 * @brief 读磁盘
 */
int disk_read (device_t * dev, int start_sector, char * buf, int count) {
   148fd:	55                   	push   %ebp
   148fe:	89 e5                	mov    %esp,%ebp
   14900:	83 ec 18             	sub    $0x18,%esp
    // 取分区信息
    partinfo_t * part_info = (partinfo_t *)dev->data;
   14903:	8b 45 08             	mov    0x8(%ebp),%eax
   14906:	8b 40 0c             	mov    0xc(%eax),%eax
   14909:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!part_info) {
   1490c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14910:	75 21                	jne    14933 <disk_read+0x36>
        log_printf("Get part info failed! device = %d", dev->minor);
   14912:	8b 45 08             	mov    0x8(%ebp),%eax
   14915:	8b 40 08             	mov    0x8(%eax),%eax
   14918:	83 ec 08             	sub    $0x8,%esp
   1491b:	50                   	push   %eax
   1491c:	68 24 97 01 00       	push   $0x19724
   14921:	e8 0a 41 00 00       	call   18a30 <log_printf>
   14926:	83 c4 10             	add    $0x10,%esp
        return -1;
   14929:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1492e:	e9 08 01 00 00       	jmp    14a3b <disk_read+0x13e>
    }

    disk_t * disk = part_info->disk;
   14933:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14936:	8b 40 20             	mov    0x20(%eax),%eax
   14939:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk == (disk_t *)0) {
   1493c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14940:	75 21                	jne    14963 <disk_read+0x66>
        log_printf("No disk for device %d", dev->minor);
   14942:	8b 45 08             	mov    0x8(%ebp),%eax
   14945:	8b 40 08             	mov    0x8(%eax),%eax
   14948:	83 ec 08             	sub    $0x8,%esp
   1494b:	50                   	push   %eax
   1494c:	68 46 97 01 00       	push   $0x19746
   14951:	e8 da 40 00 00       	call   18a30 <log_printf>
   14956:	83 c4 10             	add    $0x10,%esp
        return -1;
   14959:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1495e:	e9 d8 00 00 00       	jmp    14a3b <disk_read+0x13e>
    }

    mutex_lock(disk->mutex);
   14963:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14966:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   1496c:	83 ec 0c             	sub    $0xc,%esp
   1496f:	50                   	push   %eax
   14970:	e8 f4 33 00 00       	call   17d69 <mutex_lock>
   14975:	83 c4 10             	add    $0x10,%esp
    task_on_op = 1;
   14978:	c7 05 b4 65 03 00 01 	movl   $0x1,0x365b4
   1497f:	00 00 00 

    int cnt;
    ata_send_cmd(disk, part_info->start_sector + start_sector, count, DISK_CMD_READ);
   14982:	8b 45 14             	mov    0x14(%ebp),%eax
   14985:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14988:	8b 4a 28             	mov    0x28(%edx),%ecx
   1498b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1498e:	01 ca                	add    %ecx,%edx
   14990:	6a 24                	push   $0x24
   14992:	50                   	push   %eax
   14993:	52                   	push   %edx
   14994:	ff 75 ec             	pushl  -0x14(%ebp)
   14997:	e8 1b f8 ff ff       	call   141b7 <ata_send_cmd>
   1499c:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   1499f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   149a6:	eb 73                	jmp    14a1b <disk_read+0x11e>
        // 利用信号量等待中断通知，然后再读取数据
        if (task_current()) {
   149a8:	e8 60 cd ff ff       	call   1170d <task_current>
   149ad:	85 c0                	test   %eax,%eax
   149af:	74 15                	je     149c6 <disk_read+0xc9>
            sem_wait(disk->op_sem);
   149b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   149b4:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   149ba:	83 ec 0c             	sub    $0xc,%esp
   149bd:	50                   	push   %eax
   149be:	e8 2a 35 00 00       	call   17eed <sem_wait>
   149c3:	83 c4 10             	add    $0x10,%esp
        }

        // 这里虽然有调用等待，但是由于已经是操作完毕，所以并不会等
        int err = ata_wait_data(disk);
   149c6:	83 ec 0c             	sub    $0xc,%esp
   149c9:	ff 75 ec             	pushl  -0x14(%ebp)
   149cc:	e8 b6 f9 ff ff       	call   14387 <ata_wait_data>
   149d1:	83 c4 10             	add    $0x10,%esp
   149d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (err < 0) {
   149d7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   149db:	79 19                	jns    149f6 <disk_read+0xf9>
            log_printf("disk(%s) read error: start sect %d, count %d", disk->name, start_sector, count);
   149dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   149e0:	ff 75 14             	pushl  0x14(%ebp)
   149e3:	ff 75 0c             	pushl  0xc(%ebp)
   149e6:	50                   	push   %eax
   149e7:	68 5c 97 01 00       	push   $0x1975c
   149ec:	e8 3f 40 00 00       	call   18a30 <log_printf>
   149f1:	83 c4 10             	add    $0x10,%esp
            break;
   149f4:	eb 2d                	jmp    14a23 <disk_read+0x126>
        }

        // 此处再读取数据
        ata_read_data(disk, buf, disk->sector_size);
   149f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   149f9:	8b 40 28             	mov    0x28(%eax),%eax
   149fc:	83 ec 04             	sub    $0x4,%esp
   149ff:	50                   	push   %eax
   14a00:	ff 75 10             	pushl  0x10(%ebp)
   14a03:	ff 75 ec             	pushl  -0x14(%ebp)
   14a06:	e8 dc f8 ff ff       	call   142e7 <ata_read_data>
   14a0b:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   14a0e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14a12:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a15:	8b 40 28             	mov    0x28(%eax),%eax
   14a18:	01 45 10             	add    %eax,0x10(%ebp)
   14a1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14a1e:	3b 45 14             	cmp    0x14(%ebp),%eax
   14a21:	7c 85                	jl     149a8 <disk_read+0xab>
    }

    mutex_unlock(disk->mutex);
   14a23:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a26:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14a2c:	83 ec 0c             	sub    $0xc,%esp
   14a2f:	50                   	push   %eax
   14a30:	e8 cb 33 00 00       	call   17e00 <mutex_unlock>
   14a35:	83 c4 10             	add    $0x10,%esp
    return cnt;
   14a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14a3b:	c9                   	leave  
   14a3c:	c3                   	ret    

00014a3d <disk_write>:

/**
 * @brief 写扇区
 */
int disk_write (device_t * dev, int start_sector, char * buf, int count) {
   14a3d:	55                   	push   %ebp
   14a3e:	89 e5                	mov    %esp,%ebp
   14a40:	83 ec 18             	sub    $0x18,%esp
    // 取分区信息
    partinfo_t * part_info = (partinfo_t *)dev->data;
   14a43:	8b 45 08             	mov    0x8(%ebp),%eax
   14a46:	8b 40 0c             	mov    0xc(%eax),%eax
   14a49:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!part_info) {
   14a4c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14a50:	75 21                	jne    14a73 <disk_write+0x36>
        log_printf("Get part info failed! device = %d", dev->minor);
   14a52:	8b 45 08             	mov    0x8(%ebp),%eax
   14a55:	8b 40 08             	mov    0x8(%eax),%eax
   14a58:	83 ec 08             	sub    $0x8,%esp
   14a5b:	50                   	push   %eax
   14a5c:	68 24 97 01 00       	push   $0x19724
   14a61:	e8 ca 3f 00 00       	call   18a30 <log_printf>
   14a66:	83 c4 10             	add    $0x10,%esp
        return -1;
   14a69:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a6e:	e9 08 01 00 00       	jmp    14b7b <disk_write+0x13e>
    }

    disk_t * disk = part_info->disk;
   14a73:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a76:	8b 40 20             	mov    0x20(%eax),%eax
   14a79:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk == (disk_t *)0) {
   14a7c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14a80:	75 21                	jne    14aa3 <disk_write+0x66>
        log_printf("No disk for device %d", dev->minor);
   14a82:	8b 45 08             	mov    0x8(%ebp),%eax
   14a85:	8b 40 08             	mov    0x8(%eax),%eax
   14a88:	83 ec 08             	sub    $0x8,%esp
   14a8b:	50                   	push   %eax
   14a8c:	68 46 97 01 00       	push   $0x19746
   14a91:	e8 9a 3f 00 00       	call   18a30 <log_printf>
   14a96:	83 c4 10             	add    $0x10,%esp
        return -1;
   14a99:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a9e:	e9 d8 00 00 00       	jmp    14b7b <disk_write+0x13e>
    }

    mutex_lock(disk->mutex);
   14aa3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14aa6:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14aac:	83 ec 0c             	sub    $0xc,%esp
   14aaf:	50                   	push   %eax
   14ab0:	e8 b4 32 00 00       	call   17d69 <mutex_lock>
   14ab5:	83 c4 10             	add    $0x10,%esp
    task_on_op = 1;
   14ab8:	c7 05 b4 65 03 00 01 	movl   $0x1,0x365b4
   14abf:	00 00 00 

    int cnt;
    ata_send_cmd(disk, part_info->start_sector + start_sector, count, DISK_CMD_WRITE);
   14ac2:	8b 45 14             	mov    0x14(%ebp),%eax
   14ac5:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14ac8:	8b 4a 28             	mov    0x28(%edx),%ecx
   14acb:	8b 55 0c             	mov    0xc(%ebp),%edx
   14ace:	01 ca                	add    %ecx,%edx
   14ad0:	6a 34                	push   $0x34
   14ad2:	50                   	push   %eax
   14ad3:	52                   	push   %edx
   14ad4:	ff 75 ec             	pushl  -0x14(%ebp)
   14ad7:	e8 db f6 ff ff       	call   141b7 <ata_send_cmd>
   14adc:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   14adf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14ae6:	eb 73                	jmp    14b5b <disk_write+0x11e>
        // 先写数据
        ata_write_data(disk, buf, disk->sector_size);
   14ae8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14aeb:	8b 40 28             	mov    0x28(%eax),%eax
   14aee:	83 ec 04             	sub    $0x4,%esp
   14af1:	50                   	push   %eax
   14af2:	ff 75 10             	pushl  0x10(%ebp)
   14af5:	ff 75 ec             	pushl  -0x14(%ebp)
   14af8:	e8 3a f8 ff ff       	call   14337 <ata_write_data>
   14afd:	83 c4 10             	add    $0x10,%esp

        // 利用信号量等待中断通知，等待写完成
        if (task_current()) {
   14b00:	e8 08 cc ff ff       	call   1170d <task_current>
   14b05:	85 c0                	test   %eax,%eax
   14b07:	74 15                	je     14b1e <disk_write+0xe1>
            sem_wait(disk->op_sem);
   14b09:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b0c:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   14b12:	83 ec 0c             	sub    $0xc,%esp
   14b15:	50                   	push   %eax
   14b16:	e8 d2 33 00 00       	call   17eed <sem_wait>
   14b1b:	83 c4 10             	add    $0x10,%esp
        }

        // 这里虽然有调用等待，但是由于已经是操作完毕，所以并不会等
        int err = ata_wait_data(disk);
   14b1e:	83 ec 0c             	sub    $0xc,%esp
   14b21:	ff 75 ec             	pushl  -0x14(%ebp)
   14b24:	e8 5e f8 ff ff       	call   14387 <ata_wait_data>
   14b29:	83 c4 10             	add    $0x10,%esp
   14b2c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (err < 0) {
   14b2f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14b33:	79 19                	jns    14b4e <disk_write+0x111>
            log_printf("disk(%s) write error: start sect %d, count %d", disk->name, start_sector, count);
   14b35:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b38:	ff 75 14             	pushl  0x14(%ebp)
   14b3b:	ff 75 0c             	pushl  0xc(%ebp)
   14b3e:	50                   	push   %eax
   14b3f:	68 8c 97 01 00       	push   $0x1978c
   14b44:	e8 e7 3e 00 00       	call   18a30 <log_printf>
   14b49:	83 c4 10             	add    $0x10,%esp
            break;
   14b4c:	eb 15                	jmp    14b63 <disk_write+0x126>
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   14b4e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14b52:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b55:	8b 40 28             	mov    0x28(%eax),%eax
   14b58:	01 45 10             	add    %eax,0x10(%ebp)
   14b5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14b5e:	3b 45 14             	cmp    0x14(%ebp),%eax
   14b61:	7c 85                	jl     14ae8 <disk_write+0xab>
        }
    }

    mutex_unlock(disk->mutex);
   14b63:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b66:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14b6c:	83 ec 0c             	sub    $0xc,%esp
   14b6f:	50                   	push   %eax
   14b70:	e8 8b 32 00 00       	call   17e00 <mutex_unlock>
   14b75:	83 c4 10             	add    $0x10,%esp
    return cnt;
   14b78:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14b7b:	c9                   	leave  
   14b7c:	c3                   	ret    

00014b7d <disk_control>:

/**
 * @brief 向磁盘发命令
 *
 */
int disk_control (device_t * dev, int cmd, int arg0, int arg1) {
   14b7d:	55                   	push   %ebp
   14b7e:	89 e5                	mov    %esp,%ebp
    return 0;
   14b80:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14b85:	5d                   	pop    %ebp
   14b86:	c3                   	ret    

00014b87 <disk_close>:

/**
 * @brief 关闭磁盘
 *
 */
void disk_close (device_t * dev) {
   14b87:	55                   	push   %ebp
   14b88:	89 e5                	mov    %esp,%ebp
}
   14b8a:	90                   	nop
   14b8b:	5d                   	pop    %ebp
   14b8c:	c3                   	ret    

00014b8d <do_handler_ide_primary>:

/**
 * @brief 磁盘主通道中断处理
 */
void do_handler_ide_primary (exception_frame_t *frame)  {
   14b8d:	55                   	push   %ebp
   14b8e:	89 e5                	mov    %esp,%ebp
   14b90:	83 ec 08             	sub    $0x8,%esp
    pic_send_eoi(IRQ14_HARDDISK_PRIMARY);
   14b93:	83 ec 0c             	sub    $0xc,%esp
   14b96:	6a 2e                	push   $0x2e
   14b98:	e8 3a e2 ff ff       	call   12dd7 <pic_send_eoi>
   14b9d:	83 c4 10             	add    $0x10,%esp
    if (task_on_op && task_current()) {
   14ba0:	a1 b4 65 03 00       	mov    0x365b4,%eax
   14ba5:	85 c0                	test   %eax,%eax
   14ba7:	74 19                	je     14bc2 <do_handler_ide_primary+0x35>
   14ba9:	e8 5f cb ff ff       	call   1170d <task_current>
   14bae:	85 c0                	test   %eax,%eax
   14bb0:	74 10                	je     14bc2 <do_handler_ide_primary+0x35>
        sem_notify(&op_sem);
   14bb2:	83 ec 0c             	sub    $0xc,%esp
   14bb5:	68 a4 65 03 00       	push   $0x365a4
   14bba:	e8 9c 33 00 00       	call   17f5b <sem_notify>
   14bbf:	83 c4 10             	add    $0x10,%esp
    }
}
   14bc2:	90                   	nop
   14bc3:	c9                   	leave  
   14bc4:	c3                   	ret    

00014bc5 <inb>:
static inline uint8_t inb(uint16_t  port) {
   14bc5:	55                   	push   %ebp
   14bc6:	89 e5                	mov    %esp,%ebp
   14bc8:	83 ec 14             	sub    $0x14,%esp
   14bcb:	8b 45 08             	mov    0x8(%ebp),%eax
   14bce:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   14bd2:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14bd6:	89 c2                	mov    %eax,%edx
   14bd8:	ec                   	in     (%dx),%al
   14bd9:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   14bdc:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14be0:	c9                   	leave  
   14be1:	c3                   	ret    

00014be2 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14be2:	55                   	push   %ebp
   14be3:	89 e5                	mov    %esp,%ebp
   14be5:	83 ec 08             	sub    $0x8,%esp
   14be8:	8b 55 08             	mov    0x8(%ebp),%edx
   14beb:	8b 45 0c             	mov    0xc(%ebp),%eax
   14bee:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   14bf2:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   14bf5:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14bf9:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14bfd:	ee                   	out    %al,(%dx)
}
   14bfe:	90                   	nop
   14bff:	c9                   	leave  
   14c00:	c3                   	ret    

00014c01 <get_key>:
        [0x34] = {'.', '>'},
        [0x35] = {'/', '?'},
        [0x39] = {' ', ' '},
};

static inline char get_key(uint8_t key_code) {
   14c01:	55                   	push   %ebp
   14c02:	89 e5                	mov    %esp,%ebp
   14c04:	83 ec 04             	sub    $0x4,%esp
   14c07:	8b 45 08             	mov    0x8(%ebp),%eax
   14c0a:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7F;
   14c0d:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14c11:	83 e0 7f             	and    $0x7f,%eax
}
   14c14:	c9                   	leave  
   14c15:	c3                   	ret    

00014c16 <is_make_code>:

static inline int is_make_code(uint8_t key_code) {
   14c16:	55                   	push   %ebp
   14c17:	89 e5                	mov    %esp,%ebp
   14c19:	83 ec 04             	sub    $0x4,%esp
   14c1c:	8b 45 08             	mov    0x8(%ebp),%eax
   14c1f:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);
   14c22:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14c26:	f7 d0                	not    %eax
   14c28:	c0 e8 07             	shr    $0x7,%al
   14c2b:	0f b6 c0             	movzbl %al,%eax
}
   14c2e:	c9                   	leave  
   14c2f:	c3                   	ret    

00014c30 <kbd_wait_send_ready>:

/**
 * 等待可写数据
 */
void kbd_wait_send_ready(void) {
   14c30:	55                   	push   %ebp
   14c31:	89 e5                	mov    %esp,%ebp
   14c33:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000; 
   14c36:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--) {
   14c3d:	eb 14                	jmp    14c53 <kbd_wait_send_ready+0x23>
        if ((inb(KBD_PORT_STAT) & KBD_STAT_SEND_FULL) == 0) {
   14c3f:	6a 64                	push   $0x64
   14c41:	e8 7f ff ff ff       	call   14bc5 <inb>
   14c46:	83 c4 04             	add    $0x4,%esp
   14c49:	0f b6 c0             	movzbl %al,%eax
   14c4c:	83 e0 02             	and    $0x2,%eax
   14c4f:	85 c0                	test   %eax,%eax
   14c51:	74 0f                	je     14c62 <kbd_wait_send_ready+0x32>
    while (time_out--) {
   14c53:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14c56:	8d 50 ff             	lea    -0x1(%eax),%edx
   14c59:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14c5c:	85 c0                	test   %eax,%eax
   14c5e:	75 df                	jne    14c3f <kbd_wait_send_ready+0xf>
   14c60:	eb 01                	jmp    14c63 <kbd_wait_send_ready+0x33>
            return;
   14c62:	90                   	nop
        }
    }
}
   14c63:	c9                   	leave  
   14c64:	c3                   	ret    

00014c65 <kbd_write>:

/**
 * 向键盘端口写数据
 */
void kbd_write(uint8_t port, uint8_t data) {
   14c65:	55                   	push   %ebp
   14c66:	89 e5                	mov    %esp,%ebp
   14c68:	83 ec 08             	sub    $0x8,%esp
   14c6b:	8b 55 08             	mov    0x8(%ebp),%edx
   14c6e:	8b 45 0c             	mov    0xc(%ebp),%eax
   14c71:	88 55 fc             	mov    %dl,-0x4(%ebp)
   14c74:	88 45 f8             	mov    %al,-0x8(%ebp)
    kbd_wait_send_ready();
   14c77:	e8 b4 ff ff ff       	call   14c30 <kbd_wait_send_ready>
    outb(port, data);
   14c7c:	0f b6 55 f8          	movzbl -0x8(%ebp),%edx
   14c80:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14c84:	52                   	push   %edx
   14c85:	50                   	push   %eax
   14c86:	e8 57 ff ff ff       	call   14be2 <outb>
   14c8b:	83 c4 08             	add    $0x8,%esp
}
   14c8e:	90                   	nop
   14c8f:	c9                   	leave  
   14c90:	c3                   	ret    

00014c91 <kbd_wait_recv_ready>:

/**
 * 等待可用的键盘数据
 */
void kbd_wait_recv_ready(void) {
   14c91:	55                   	push   %ebp
   14c92:	89 e5                	mov    %esp,%ebp
   14c94:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000;
   14c97:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--) {
   14c9e:	eb 14                	jmp    14cb4 <kbd_wait_recv_ready+0x23>
        if (inb(KBD_PORT_STAT) & KBD_STAT_RECV_READY) {
   14ca0:	6a 64                	push   $0x64
   14ca2:	e8 1e ff ff ff       	call   14bc5 <inb>
   14ca7:	83 c4 04             	add    $0x4,%esp
   14caa:	0f b6 c0             	movzbl %al,%eax
   14cad:	83 e0 01             	and    $0x1,%eax
   14cb0:	85 c0                	test   %eax,%eax
   14cb2:	75 0f                	jne    14cc3 <kbd_wait_recv_ready+0x32>
    while (time_out--) {
   14cb4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14cb7:	8d 50 ff             	lea    -0x1(%eax),%edx
   14cba:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14cbd:	85 c0                	test   %eax,%eax
   14cbf:	75 df                	jne    14ca0 <kbd_wait_recv_ready+0xf>
   14cc1:	eb 01                	jmp    14cc4 <kbd_wait_recv_ready+0x33>
            return;
   14cc3:	90                   	nop
        }
    }
}
   14cc4:	c9                   	leave  
   14cc5:	c3                   	ret    

00014cc6 <kbd_read>:

/**
 * 读键盘数据
 */
uint8_t kbd_read(void) {
   14cc6:	55                   	push   %ebp
   14cc7:	89 e5                	mov    %esp,%ebp
    kbd_wait_recv_ready();
   14cc9:	e8 c3 ff ff ff       	call   14c91 <kbd_wait_recv_ready>
    return inb(KBD_PORT_DATA);
   14cce:	6a 60                	push   $0x60
   14cd0:	e8 f0 fe ff ff       	call   14bc5 <inb>
   14cd5:	83 c4 04             	add    $0x4,%esp
}
   14cd8:	c9                   	leave  
   14cd9:	c3                   	ret    

00014cda <update_led_status>:

/**
 * 更新键盘上状态指示灯
 */
static void update_led_status (void) {
   14cda:	55                   	push   %ebp
   14cdb:	89 e5                	mov    %esp,%ebp
   14cdd:	83 ec 10             	sub    $0x10,%esp
    int data = 0;
   14ce0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    data = (kbd_state.caps_lock ? 1 : 0) << 0;
   14ce7:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14cee:	0f b6 c0             	movzbl %al,%eax
   14cf1:	83 e0 01             	and    $0x1,%eax
   14cf4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    kbd_write(KBD_PORT_DATA, KBD_CMD_RW_LED);
   14cf7:	68 ed 00 00 00       	push   $0xed
   14cfc:	6a 60                	push   $0x60
   14cfe:	e8 62 ff ff ff       	call   14c65 <kbd_write>
   14d03:	83 c4 08             	add    $0x8,%esp
    kbd_write(KBD_PORT_DATA, data);
   14d06:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14d09:	0f b6 c0             	movzbl %al,%eax
   14d0c:	50                   	push   %eax
   14d0d:	6a 60                	push   $0x60
   14d0f:	e8 51 ff ff ff       	call   14c65 <kbd_write>
   14d14:	83 c4 08             	add    $0x8,%esp
    kbd_read();
   14d17:	e8 aa ff ff ff       	call   14cc6 <kbd_read>
}
   14d1c:	90                   	nop
   14d1d:	c9                   	leave  
   14d1e:	c3                   	ret    

00014d1f <do_fx_key>:

static void do_fx_key (int key) {
   14d1f:	55                   	push   %ebp
   14d20:	89 e5                	mov    %esp,%ebp
   14d22:	83 ec 18             	sub    $0x18,%esp
    int index = key - KEY_F1;
   14d25:	8b 45 08             	mov    0x8(%ebp),%eax
   14d28:	83 e8 3b             	sub    $0x3b,%eax
   14d2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (kbd_state.lctrl_press || kbd_state.rctrl_press) {
   14d2e:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14d35:	83 e0 20             	and    $0x20,%eax
   14d38:	84 c0                	test   %al,%al
   14d3a:	75 0e                	jne    14d4a <do_fx_key+0x2b>
   14d3c:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14d43:	83 e0 40             	and    $0x40,%eax
   14d46:	84 c0                	test   %al,%al
   14d48:	74 0e                	je     14d58 <do_fx_key+0x39>
        tty_select(index);
   14d4a:	83 ec 0c             	sub    $0xc,%esp
   14d4d:	ff 75 f4             	pushl  -0xc(%ebp)
   14d50:	e8 e4 09 00 00       	call   15739 <tty_select>
   14d55:	83 c4 10             	add    $0x10,%esp
    }
}
   14d58:	90                   	nop
   14d59:	c9                   	leave  
   14d5a:	c3                   	ret    

00014d5b <do_normal_key>:

/**
 * 处理单字符的标准键
 */
static void do_normal_key (uint8_t raw_code) {
   14d5b:	55                   	push   %ebp
   14d5c:	89 e5                	mov    %esp,%ebp
   14d5e:	83 ec 28             	sub    $0x28,%esp
   14d61:	8b 45 08             	mov    0x8(%ebp),%eax
   14d64:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(raw_code);		// 去掉最高位
   14d67:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14d6b:	50                   	push   %eax
   14d6c:	e8 90 fe ff ff       	call   14c01 <get_key>
   14d71:	83 c4 04             	add    $0x4,%esp
   14d74:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(raw_code);
   14d77:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14d7b:	50                   	push   %eax
   14d7c:	e8 95 fe ff ff       	call   14c16 <is_make_code>
   14d81:	83 c4 04             	add    $0x4,%esp
   14d84:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 暂时只处理按键按下
	switch (key) {
   14d87:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14d8b:	83 e8 1d             	sub    $0x1d,%eax
   14d8e:	83 f8 25             	cmp    $0x25,%eax
   14d91:	0f 87 f9 00 00 00    	ja     14e90 <do_normal_key+0x135>
   14d97:	8b 04 85 c0 99 01 00 	mov    0x199c0(,%eax,4),%eax
   14d9e:	ff e0                	jmp    *%eax
	    // shift, alt, ctrl键，记录标志位
	case KEY_RSHIFT:
		kbd_state.rshift_press = is_make;  // 仅设置标志位
   14da0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14da3:	c1 e0 07             	shl    $0x7,%eax
   14da6:	c0 f8 07             	sar    $0x7,%al
   14da9:	83 e0 01             	and    $0x1,%eax
   14dac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   14db3:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14dba:	83 e0 fb             	and    $0xfffffffb,%eax
   14dbd:	09 d0                	or     %edx,%eax
   14dbf:	a2 b8 65 03 00       	mov    %al,0x365b8
		break;
   14dc4:	e9 5f 01 00 00       	jmp    14f28 <do_normal_key+0x1cd>
	case KEY_LSHIFT:
		kbd_state.lshift_press = is_make;  // 仅设置标志位
   14dc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14dcc:	c1 e0 07             	shl    $0x7,%eax
   14dcf:	c0 f8 07             	sar    $0x7,%al
   14dd2:	83 e0 01             	and    $0x1,%eax
   14dd5:	8d 14 00             	lea    (%eax,%eax,1),%edx
   14dd8:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14ddf:	83 e0 fd             	and    $0xfffffffd,%eax
   14de2:	09 d0                	or     %edx,%eax
   14de4:	a2 b8 65 03 00       	mov    %al,0x365b8
		break;
   14de9:	e9 3a 01 00 00       	jmp    14f28 <do_normal_key+0x1cd>
    case KEY_CAPS:  // 大小写键，设置大小写状态
		if (is_make) {
   14dee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14df2:	0f 84 2c 01 00 00    	je     14f24 <do_normal_key+0x1c9>
			kbd_state.caps_lock = ~kbd_state.caps_lock;
   14df8:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14dff:	c1 e0 07             	shl    $0x7,%eax
   14e02:	c0 f8 07             	sar    $0x7,%al
   14e05:	f7 d0                	not    %eax
   14e07:	c1 e0 07             	shl    $0x7,%eax
   14e0a:	c0 f8 07             	sar    $0x7,%al
   14e0d:	83 e0 01             	and    $0x1,%eax
   14e10:	89 c2                	mov    %eax,%edx
   14e12:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14e19:	83 e0 fe             	and    $0xfffffffe,%eax
   14e1c:	09 d0                	or     %edx,%eax
   14e1e:	a2 b8 65 03 00       	mov    %al,0x365b8
			update_led_status();
   14e23:	e8 b2 fe ff ff       	call   14cda <update_led_status>
		}
		break;
   14e28:	e9 f7 00 00 00       	jmp    14f24 <do_normal_key+0x1c9>
    case KEY_ALT:
        kbd_state.lalt_press = is_make;  // 仅设置标志位
   14e2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14e30:	c1 e0 07             	shl    $0x7,%eax
   14e33:	c0 f8 07             	sar    $0x7,%al
   14e36:	83 e0 01             	and    $0x1,%eax
   14e39:	c1 e0 04             	shl    $0x4,%eax
   14e3c:	89 c2                	mov    %eax,%edx
   14e3e:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14e45:	83 e0 ef             	and    $0xffffffef,%eax
   14e48:	09 d0                	or     %edx,%eax
   14e4a:	a2 b8 65 03 00       	mov    %al,0x365b8
        break;
   14e4f:	e9 d4 00 00 00       	jmp    14f28 <do_normal_key+0x1cd>
    case KEY_CTRL:
        kbd_state.lctrl_press = is_make;  // 仅设置标志位
   14e54:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14e57:	c1 e0 07             	shl    $0x7,%eax
   14e5a:	c0 f8 07             	sar    $0x7,%al
   14e5d:	83 e0 01             	and    $0x1,%eax
   14e60:	c1 e0 05             	shl    $0x5,%eax
   14e63:	89 c2                	mov    %eax,%edx
   14e65:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14e6c:	83 e0 df             	and    $0xffffffdf,%eax
   14e6f:	09 d0                	or     %edx,%eax
   14e71:	a2 b8 65 03 00       	mov    %al,0x365b8
        break;
   14e76:	e9 ad 00 00 00       	jmp    14f28 <do_normal_key+0x1cd>
    case KEY_F4:
    case KEY_F5:
    case KEY_F6:
    case KEY_F7:
    case KEY_F8:
         do_fx_key(key);
   14e7b:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14e7f:	83 ec 0c             	sub    $0xc,%esp
   14e82:	50                   	push   %eax
   14e83:	e8 97 fe ff ff       	call   14d1f <do_fx_key>
   14e88:	83 c4 10             	add    $0x10,%esp
        break;
   14e8b:	e9 98 00 00 00       	jmp    14f28 <do_normal_key+0x1cd>
    case KEY_F10:
    case KEY_F11:
    case KEY_F12:
    case KEY_SCROLL_LOCK:
    default:
        if (is_make) {
   14e90:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14e94:	0f 84 8d 00 00 00    	je     14f27 <do_normal_key+0x1cc>
            // 根据shift控制取相应的字符，这里有进行大小写转换或者shif转换
            if (kbd_state.rshift_press || kbd_state.lshift_press) {
   14e9a:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14ea1:	83 e0 04             	and    $0x4,%eax
   14ea4:	84 c0                	test   %al,%al
   14ea6:	75 0e                	jne    14eb6 <do_normal_key+0x15b>
   14ea8:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14eaf:	83 e0 02             	and    $0x2,%eax
   14eb2:	84 c0                	test   %al,%al
   14eb4:	74 11                	je     14ec7 <do_normal_key+0x16c>
                key = map_table[key].func;  // 第2功能
   14eb6:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14eba:	0f b6 84 00 c1 97 01 	movzbl 0x197c1(%eax,%eax,1),%eax
   14ec1:	00 
   14ec2:	88 45 f7             	mov    %al,-0x9(%ebp)
   14ec5:	eb 0f                	jmp    14ed6 <do_normal_key+0x17b>
            }else {
                key = map_table[key].normal;  // 第1功能
   14ec7:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14ecb:	0f b6 84 00 c0 97 01 	movzbl 0x197c0(%eax,%eax,1),%eax
   14ed2:	00 
   14ed3:	88 45 f7             	mov    %al,-0x9(%ebp)
            }

            // 根据caps再进行一次字母的大小写转换
            if (kbd_state.caps_lock) {
   14ed6:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14edd:	83 e0 01             	and    $0x1,%eax
   14ee0:	84 c0                	test   %al,%al
   14ee2:	74 2e                	je     14f12 <do_normal_key+0x1b7>
                if ((key >= 'A') && (key <= 'Z')) {
   14ee4:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   14ee8:	7e 12                	jle    14efc <do_normal_key+0x1a1>
   14eea:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   14eee:	7f 0c                	jg     14efc <do_normal_key+0x1a1>
                    // 大写转小写
                    key = key - 'A' + 'a';
   14ef0:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14ef4:	83 c0 20             	add    $0x20,%eax
   14ef7:	88 45 f7             	mov    %al,-0x9(%ebp)
   14efa:	eb 16                	jmp    14f12 <do_normal_key+0x1b7>
                } else if ((key >= 'a') && (key <= 'z')) {
   14efc:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   14f00:	7e 10                	jle    14f12 <do_normal_key+0x1b7>
   14f02:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   14f06:	7f 0a                	jg     14f12 <do_normal_key+0x1b7>
                    // 小写转大小
                    key = key - 'a' + 'A';
   14f08:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14f0c:	83 e8 20             	sub    $0x20,%eax
   14f0f:	88 45 f7             	mov    %al,-0x9(%ebp)
                }
            }

            // 最后，不管是否是控制字符，都会被写入
            //log_printf("key=%c", key);
            tty_in(key);
   14f12:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14f16:	83 ec 0c             	sub    $0xc,%esp
   14f19:	50                   	push   %eax
   14f1a:	e8 ad 07 00 00       	call   156cc <tty_in>
   14f1f:	83 c4 10             	add    $0x10,%esp
        }
        break;
   14f22:	eb 03                	jmp    14f27 <do_normal_key+0x1cc>
		break;
   14f24:	90                   	nop
   14f25:	eb 01                	jmp    14f28 <do_normal_key+0x1cd>
        break;
   14f27:	90                   	nop
    }
}
   14f28:	90                   	nop
   14f29:	c9                   	leave  
   14f2a:	c3                   	ret    

00014f2b <do_e0_key>:

/**
 * E0开始的键处理，只处理功能键，其它更长的序列不处理
 */
static void do_e0_key (uint8_t raw_code) {
   14f2b:	55                   	push   %ebp
   14f2c:	89 e5                	mov    %esp,%ebp
   14f2e:	83 ec 14             	sub    $0x14,%esp
   14f31:	8b 45 08             	mov    0x8(%ebp),%eax
   14f34:	88 45 ec             	mov    %al,-0x14(%ebp)
    int key = get_key(raw_code);			// 去掉最高位
   14f37:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14f3b:	50                   	push   %eax
   14f3c:	e8 c0 fc ff ff       	call   14c01 <get_key>
   14f41:	83 c4 04             	add    $0x4,%esp
   14f44:	0f be c0             	movsbl %al,%eax
   14f47:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int is_make = is_make_code(raw_code);	// 按下或释放
   14f4a:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14f4e:	50                   	push   %eax
   14f4f:	e8 c2 fc ff ff       	call   14c16 <is_make_code>
   14f54:	83 c4 04             	add    $0x4,%esp
   14f57:	89 45 f8             	mov    %eax,-0x8(%ebp)

    // E0开头，主要是HOME、END、光标移动等功能键
    // 设置一下光标位置，然后直接写入
    switch (key) {
   14f5a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14f5d:	83 f8 1d             	cmp    $0x1d,%eax
   14f60:	74 07                	je     14f69 <do_e0_key+0x3e>
   14f62:	83 f8 38             	cmp    $0x38,%eax
   14f65:	74 26                	je     14f8d <do_e0_key+0x62>
            break;
        case KEY_ALT:
            kbd_state.ralt_press = is_make;  // 仅设置标志位
            break;
    }
}
   14f67:	eb 49                	jmp    14fb2 <do_e0_key+0x87>
            kbd_state.rctrl_press = is_make;  // 仅设置标志位
   14f69:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14f6c:	c1 e0 07             	shl    $0x7,%eax
   14f6f:	c0 f8 07             	sar    $0x7,%al
   14f72:	83 e0 01             	and    $0x1,%eax
   14f75:	c1 e0 06             	shl    $0x6,%eax
   14f78:	89 c2                	mov    %eax,%edx
   14f7a:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14f81:	83 e0 bf             	and    $0xffffffbf,%eax
   14f84:	09 d0                	or     %edx,%eax
   14f86:	a2 b8 65 03 00       	mov    %al,0x365b8
            break;
   14f8b:	eb 25                	jmp    14fb2 <do_e0_key+0x87>
            kbd_state.ralt_press = is_make;  // 仅设置标志位
   14f8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14f90:	c1 e0 07             	shl    $0x7,%eax
   14f93:	c0 f8 07             	sar    $0x7,%al
   14f96:	83 e0 01             	and    $0x1,%eax
   14f99:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   14fa0:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14fa7:	83 e0 f7             	and    $0xfffffff7,%eax
   14faa:	09 d0                	or     %edx,%eax
   14fac:	a2 b8 65 03 00       	mov    %al,0x365b8
            break;
   14fb1:	90                   	nop
}
   14fb2:	90                   	nop
   14fb3:	c9                   	leave  
   14fb4:	c3                   	ret    

00014fb5 <do_handler_kbd>:

/**
 * @brief 按键中断处理程序
 */
void do_handler_kbd(exception_frame_t *frame) {
   14fb5:	55                   	push   %ebp
   14fb6:	89 e5                	mov    %esp,%ebp
   14fb8:	83 ec 18             	sub    $0x18,%esp
		BEGIN_E0,			// 收到e0字符
		BEGIN_E1,			// 收到e1字符
    }recv_state = NORMAL;

	// 检查是否有数据，无数据则退出
	uint8_t status = inb(KBD_PORT_STAT);
   14fbb:	6a 64                	push   $0x64
   14fbd:	e8 03 fc ff ff       	call   14bc5 <inb>
   14fc2:	83 c4 04             	add    $0x4,%esp
   14fc5:	88 45 f7             	mov    %al,-0x9(%ebp)
	if (!(status & KBD_STAT_RECV_READY)) {
   14fc8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14fcc:	83 e0 01             	and    $0x1,%eax
   14fcf:	85 c0                	test   %eax,%eax
   14fd1:	75 12                	jne    14fe5 <do_handler_kbd+0x30>
        pic_send_eoi(IRQ1_KEYBOARD);
   14fd3:	83 ec 0c             	sub    $0xc,%esp
   14fd6:	6a 21                	push   $0x21
   14fd8:	e8 fa dd ff ff       	call   12dd7 <pic_send_eoi>
   14fdd:	83 c4 10             	add    $0x10,%esp
		return;
   14fe0:	e9 90 00 00 00       	jmp    15075 <do_handler_kbd+0xc0>
	}

	// 读取键值
    uint8_t raw_code = inb(KBD_PORT_DATA);
   14fe5:	83 ec 0c             	sub    $0xc,%esp
   14fe8:	6a 60                	push   $0x60
   14fea:	e8 d6 fb ff ff       	call   14bc5 <inb>
   14fef:	83 c4 10             	add    $0x10,%esp
   14ff2:	88 45 f6             	mov    %al,-0xa(%ebp)

	// 读取完成之后，就可以发EOI，方便后续继续响应键盘中断
	// 否则,键值的处理过程可能略长，将导致中断响应延迟
    pic_send_eoi(IRQ1_KEYBOARD);
   14ff5:	83 ec 0c             	sub    $0xc,%esp
   14ff8:	6a 21                	push   $0x21
   14ffa:	e8 d8 dd ff ff       	call   12dd7 <pic_send_eoi>
   14fff:	83 c4 10             	add    $0x10,%esp

    // 实测qemu下收不到E0和E1，估计是没有发出去
    // 方向键、HOME/END等键码和小键盘上发出来的完全一样。不清楚原因
    // 也许是键盘布局的问题？所以，这里就忽略小键盘？
	if (raw_code == KEY_E0) {
   15002:	80 7d f6 e0          	cmpb   $0xe0,-0xa(%ebp)
   15006:	75 0c                	jne    15014 <do_handler_kbd+0x5f>
		// E0字符
		recv_state = BEGIN_E0;
   15008:	c7 05 bc 65 03 00 01 	movl   $0x1,0x365bc
   1500f:	00 00 00 
   15012:	eb 61                	jmp    15075 <do_handler_kbd+0xc0>
	} else if (raw_code == KEY_E1) {
   15014:	80 7d f6 e1          	cmpb   $0xe1,-0xa(%ebp)
   15018:	75 0c                	jne    15026 <do_handler_kbd+0x71>
		// E1字符，不处理
		recv_state = BEGIN_E1;
   1501a:	c7 05 bc 65 03 00 02 	movl   $0x2,0x365bc
   15021:	00 00 00 
   15024:	eb 4f                	jmp    15075 <do_handler_kbd+0xc0>
	} else {
		switch (recv_state) {
   15026:	a1 bc 65 03 00       	mov    0x365bc,%eax
   1502b:	83 f8 01             	cmp    $0x1,%eax
   1502e:	74 1e                	je     1504e <do_handler_kbd+0x99>
   15030:	83 f8 01             	cmp    $0x1,%eax
   15033:	72 07                	jb     1503c <do_handler_kbd+0x87>
   15035:	83 f8 02             	cmp    $0x2,%eax
   15038:	74 30                	je     1506a <do_handler_kbd+0xb5>
   1503a:	eb 39                	jmp    15075 <do_handler_kbd+0xc0>
		case NORMAL:
			do_normal_key(raw_code);
   1503c:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   15040:	83 ec 0c             	sub    $0xc,%esp
   15043:	50                   	push   %eax
   15044:	e8 12 fd ff ff       	call   14d5b <do_normal_key>
   15049:	83 c4 10             	add    $0x10,%esp
			break;
   1504c:	eb 27                	jmp    15075 <do_handler_kbd+0xc0>
		case BEGIN_E0: // 不处理print scr
			do_e0_key(raw_code);
   1504e:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   15052:	83 ec 0c             	sub    $0xc,%esp
   15055:	50                   	push   %eax
   15056:	e8 d0 fe ff ff       	call   14f2b <do_e0_key>
   1505b:	83 c4 10             	add    $0x10,%esp
			recv_state = NORMAL;
   1505e:	c7 05 bc 65 03 00 00 	movl   $0x0,0x365bc
   15065:	00 00 00 
			break;
   15068:	eb 0b                	jmp    15075 <do_handler_kbd+0xc0>
		case BEGIN_E1:  // 不处理pause
			recv_state = NORMAL;
   1506a:	c7 05 bc 65 03 00 00 	movl   $0x0,0x365bc
   15071:	00 00 00 
			break;
   15074:	90                   	nop
		}
	}
}
   15075:	c9                   	leave  
   15076:	c3                   	ret    

00015077 <kbd_init>:

/**
 * 键盘硬件初始化
 */
void kbd_init(void) {
   15077:	55                   	push   %ebp
   15078:	89 e5                	mov    %esp,%ebp
   1507a:	83 ec 08             	sub    $0x8,%esp
    static int inited = 0;

    if (!inited) {
   1507d:	a1 c0 65 03 00       	mov    0x365c0,%eax
   15082:	85 c0                	test   %eax,%eax
   15084:	75 2e                	jne    150b4 <kbd_init+0x3d>
        update_led_status();
   15086:	e8 4f fc ff ff       	call   14cda <update_led_status>

        irq_install(IRQ1_KEYBOARD, (irq_handler_t)exception_handler_kbd);
   1508b:	83 ec 08             	sub    $0x8,%esp
   1508e:	68 a5 02 01 00       	push   $0x102a5
   15093:	6a 21                	push   $0x21
   15095:	e8 16 df ff ff       	call   12fb0 <irq_install>
   1509a:	83 c4 10             	add    $0x10,%esp
        irq_enable(IRQ1_KEYBOARD);
   1509d:	83 ec 0c             	sub    $0xc,%esp
   150a0:	6a 21                	push   $0x21
   150a2:	e8 43 df ff ff       	call   12fea <irq_enable>
   150a7:	83 c4 10             	add    $0x10,%esp

        inited = 1;
   150aa:	c7 05 c0 65 03 00 01 	movl   $0x1,0x365c0
   150b1:	00 00 00 
    }
}
   150b4:	90                   	nop
   150b5:	c9                   	leave  
   150b6:	c3                   	ret    

000150b7 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   150b7:	55                   	push   %ebp
   150b8:	89 e5                	mov    %esp,%ebp
   150ba:	83 ec 08             	sub    $0x8,%esp
   150bd:	8b 55 08             	mov    0x8(%ebp),%edx
   150c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   150c3:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   150c7:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   150ca:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   150ce:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   150d2:	ee                   	out    %al,(%dx)
}
   150d3:	90                   	nop
   150d4:	c9                   	leave  
   150d5:	c3                   	ret    

000150d6 <do_handler_timer>:
static uint32_t sys_tick;						// 系统启动后的tick数量

/**
 * 定时器中断处理函数
 */
void do_handler_timer (exception_frame_t *frame) {
   150d6:	55                   	push   %ebp
   150d7:	89 e5                	mov    %esp,%ebp
   150d9:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   150dc:	a1 c4 65 03 00       	mov    0x365c4,%eax
   150e1:	83 c0 01             	add    $0x1,%eax
   150e4:	a3 c4 65 03 00       	mov    %eax,0x365c4

    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续噢应
    pic_send_eoi(IRQ0_TIMER);
   150e9:	83 ec 0c             	sub    $0xc,%esp
   150ec:	6a 20                	push   $0x20
   150ee:	e8 e4 dc ff ff       	call   12dd7 <pic_send_eoi>
   150f3:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   150f6:	e8 65 c7 ff ff       	call   11860 <task_time_tick>
}
   150fb:	90                   	nop
   150fc:	c9                   	leave  
   150fd:	c3                   	ret    

000150fe <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   150fe:	55                   	push   %ebp
   150ff:	89 e5                	mov    %esp,%ebp
   15101:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   15104:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE0);
   1510b:	6a 36                	push   $0x36
   1510d:	6a 43                	push   $0x43
   1510f:	e8 a3 ff ff ff       	call   150b7 <outb>
   15114:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);   // 加载低8位
   15117:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1511a:	0f b6 c0             	movzbl %al,%eax
   1511d:	50                   	push   %eax
   1511e:	6a 40                	push   $0x40
   15120:	e8 92 ff ff ff       	call   150b7 <outb>
   15125:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 再加载高8位
   15128:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1512b:	c1 e8 08             	shr    $0x8,%eax
   1512e:	0f b6 c0             	movzbl %al,%eax
   15131:	50                   	push   %eax
   15132:	6a 40                	push   $0x40
   15134:	e8 7e ff ff ff       	call   150b7 <outb>
   15139:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   1513c:	83 ec 08             	sub    $0x8,%esp
   1513f:	68 86 02 01 00       	push   $0x10286
   15144:	6a 20                	push   $0x20
   15146:	e8 65 de ff ff       	call   12fb0 <irq_install>
   1514b:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   1514e:	83 ec 0c             	sub    $0xc,%esp
   15151:	6a 20                	push   $0x20
   15153:	e8 92 de ff ff       	call   12fea <irq_enable>
   15158:	83 c4 10             	add    $0x10,%esp
}
   1515b:	90                   	nop
   1515c:	c9                   	leave  
   1515d:	c3                   	ret    

0001515e <time_init>:

/**
 * 定时器初始化
 */
void time_init (void) {
   1515e:	55                   	push   %ebp
   1515f:	89 e5                	mov    %esp,%ebp
   15161:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   15164:	c7 05 c4 65 03 00 00 	movl   $0x0,0x365c4
   1516b:	00 00 00 

    init_pit();
   1516e:	e8 8b ff ff ff       	call   150fe <init_pit>
}
   15173:	90                   	nop
   15174:	c9                   	leave  
   15175:	c3                   	ret    

00015176 <tty_fifo_init>:
static int curr_tty = 0;

/**
 * @brief FIFO初始化
 */
void tty_fifo_init (tty_fifo_t * fifo, char * buf, int size) {
   15176:	55                   	push   %ebp
   15177:	89 e5                	mov    %esp,%ebp
	fifo->buf = buf;
   15179:	8b 45 08             	mov    0x8(%ebp),%eax
   1517c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1517f:	89 10                	mov    %edx,(%eax)
	fifo->count = 0;
   15181:	8b 45 08             	mov    0x8(%ebp),%eax
   15184:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	fifo->size = size;
   1518b:	8b 45 08             	mov    0x8(%ebp),%eax
   1518e:	8b 55 10             	mov    0x10(%ebp),%edx
   15191:	89 50 04             	mov    %edx,0x4(%eax)
	fifo->read = fifo->write = 0;
   15194:	8b 45 08             	mov    0x8(%ebp),%eax
   15197:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   1519e:	8b 45 08             	mov    0x8(%ebp),%eax
   151a1:	8b 50 0c             	mov    0xc(%eax),%edx
   151a4:	8b 45 08             	mov    0x8(%ebp),%eax
   151a7:	89 50 08             	mov    %edx,0x8(%eax)
}
   151aa:	90                   	nop
   151ab:	5d                   	pop    %ebp
   151ac:	c3                   	ret    

000151ad <tty_fifo_get>:

/**
 * @brief 取一字节数据
 */
int tty_fifo_get (tty_fifo_t * fifo, char * c) {
   151ad:	55                   	push   %ebp
   151ae:	89 e5                	mov    %esp,%ebp
   151b0:	53                   	push   %ebx
   151b1:	83 ec 14             	sub    $0x14,%esp
	if (fifo->count <= 0) {
   151b4:	8b 45 08             	mov    0x8(%ebp),%eax
   151b7:	8b 40 10             	mov    0x10(%eax),%eax
   151ba:	85 c0                	test   %eax,%eax
   151bc:	7f 07                	jg     151c5 <tty_fifo_get+0x18>
		return -1;
   151be:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   151c3:	eb 62                	jmp    15227 <tty_fifo_get+0x7a>
	}

	irq_state_t state = irq_enter_protection();
   151c5:	e8 48 df ff ff       	call   13112 <irq_enter_protection>
   151ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	*c = fifo->buf[fifo->read++];
   151cd:	8b 45 08             	mov    0x8(%ebp),%eax
   151d0:	8b 18                	mov    (%eax),%ebx
   151d2:	8b 45 08             	mov    0x8(%ebp),%eax
   151d5:	8b 40 08             	mov    0x8(%eax),%eax
   151d8:	8d 48 01             	lea    0x1(%eax),%ecx
   151db:	8b 55 08             	mov    0x8(%ebp),%edx
   151de:	89 4a 08             	mov    %ecx,0x8(%edx)
   151e1:	01 d8                	add    %ebx,%eax
   151e3:	0f b6 10             	movzbl (%eax),%edx
   151e6:	8b 45 0c             	mov    0xc(%ebp),%eax
   151e9:	88 10                	mov    %dl,(%eax)
	if (fifo->read >= fifo->size) {
   151eb:	8b 45 08             	mov    0x8(%ebp),%eax
   151ee:	8b 50 08             	mov    0x8(%eax),%edx
   151f1:	8b 45 08             	mov    0x8(%ebp),%eax
   151f4:	8b 40 04             	mov    0x4(%eax),%eax
   151f7:	39 c2                	cmp    %eax,%edx
   151f9:	7c 0a                	jl     15205 <tty_fifo_get+0x58>
		fifo->read = 0;
   151fb:	8b 45 08             	mov    0x8(%ebp),%eax
   151fe:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	}
	fifo->count--;
   15205:	8b 45 08             	mov    0x8(%ebp),%eax
   15208:	8b 40 10             	mov    0x10(%eax),%eax
   1520b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1520e:	8b 45 08             	mov    0x8(%ebp),%eax
   15211:	89 50 10             	mov    %edx,0x10(%eax)
	irq_leave_protection(state);
   15214:	83 ec 0c             	sub    $0xc,%esp
   15217:	ff 75 f4             	pushl  -0xc(%ebp)
   1521a:	e8 0b df ff ff       	call   1312a <irq_leave_protection>
   1521f:	83 c4 10             	add    $0x10,%esp
	return 0;
   15222:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15227:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1522a:	c9                   	leave  
   1522b:	c3                   	ret    

0001522c <tty_fifo_put>:

/**
 * @brief 写一字节数据
 */
int tty_fifo_put (tty_fifo_t * fifo, char c) {
   1522c:	55                   	push   %ebp
   1522d:	89 e5                	mov    %esp,%ebp
   1522f:	53                   	push   %ebx
   15230:	83 ec 24             	sub    $0x24,%esp
   15233:	8b 45 0c             	mov    0xc(%ebp),%eax
   15236:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (fifo->count >= fifo->size) {
   15239:	8b 45 08             	mov    0x8(%ebp),%eax
   1523c:	8b 50 10             	mov    0x10(%eax),%edx
   1523f:	8b 45 08             	mov    0x8(%ebp),%eax
   15242:	8b 40 04             	mov    0x4(%eax),%eax
   15245:	39 c2                	cmp    %eax,%edx
   15247:	7c 07                	jl     15250 <tty_fifo_put+0x24>
		return -1;
   15249:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1524e:	eb 61                	jmp    152b1 <tty_fifo_put+0x85>
	}

	irq_state_t state = irq_enter_protection();
   15250:	e8 bd de ff ff       	call   13112 <irq_enter_protection>
   15255:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fifo->buf[fifo->write++] = c;
   15258:	8b 45 08             	mov    0x8(%ebp),%eax
   1525b:	8b 18                	mov    (%eax),%ebx
   1525d:	8b 45 08             	mov    0x8(%ebp),%eax
   15260:	8b 40 0c             	mov    0xc(%eax),%eax
   15263:	8d 48 01             	lea    0x1(%eax),%ecx
   15266:	8b 55 08             	mov    0x8(%ebp),%edx
   15269:	89 4a 0c             	mov    %ecx,0xc(%edx)
   1526c:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   1526f:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   15273:	88 02                	mov    %al,(%edx)
	if (fifo->write >= fifo->size) {
   15275:	8b 45 08             	mov    0x8(%ebp),%eax
   15278:	8b 50 0c             	mov    0xc(%eax),%edx
   1527b:	8b 45 08             	mov    0x8(%ebp),%eax
   1527e:	8b 40 04             	mov    0x4(%eax),%eax
   15281:	39 c2                	cmp    %eax,%edx
   15283:	7c 0a                	jl     1528f <tty_fifo_put+0x63>
		fifo->write = 0;
   15285:	8b 45 08             	mov    0x8(%ebp),%eax
   15288:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
	fifo->count++;
   1528f:	8b 45 08             	mov    0x8(%ebp),%eax
   15292:	8b 40 10             	mov    0x10(%eax),%eax
   15295:	8d 50 01             	lea    0x1(%eax),%edx
   15298:	8b 45 08             	mov    0x8(%ebp),%eax
   1529b:	89 50 10             	mov    %edx,0x10(%eax)
	irq_leave_protection(state);
   1529e:	83 ec 0c             	sub    $0xc,%esp
   152a1:	ff 75 f4             	pushl  -0xc(%ebp)
   152a4:	e8 81 de ff ff       	call   1312a <irq_leave_protection>
   152a9:	83 c4 10             	add    $0x10,%esp

	return 0;
   152ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
   152b1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   152b4:	c9                   	leave  
   152b5:	c3                   	ret    

000152b6 <get_tty>:

/**
 * @brief 判断tty是否有效
 */
static inline tty_t * get_tty (device_t * dev) {
   152b6:	55                   	push   %ebp
   152b7:	89 e5                	mov    %esp,%ebp
   152b9:	83 ec 18             	sub    $0x18,%esp
	int tty = dev->minor;
   152bc:	8b 45 08             	mov    0x8(%ebp),%eax
   152bf:	8b 40 08             	mov    0x8(%eax),%eax
   152c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ((tty < 0) || (tty >= TTY_NR) || (!dev->open_count)) {
   152c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   152c9:	78 10                	js     152db <get_tty+0x25>
   152cb:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   152cf:	7f 0a                	jg     152db <get_tty+0x25>
   152d1:	8b 45 08             	mov    0x8(%ebp),%eax
   152d4:	8b 40 10             	mov    0x10(%eax),%eax
   152d7:	85 c0                	test   %eax,%eax
   152d9:	75 1a                	jne    152f5 <get_tty+0x3f>
		log_printf("tty is not opened. tty = %d", tty);
   152db:	83 ec 08             	sub    $0x8,%esp
   152de:	ff 75 f4             	pushl  -0xc(%ebp)
   152e1:	68 58 9a 01 00       	push   $0x19a58
   152e6:	e8 45 37 00 00       	call   18a30 <log_printf>
   152eb:	83 c4 10             	add    $0x10,%esp
		return (tty_t *)0;
   152ee:	b8 00 00 00 00       	mov    $0x0,%eax
   152f3:	eb 0e                	jmp    15303 <get_tty+0x4d>
	}

	return tty_devs + tty;
   152f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   152f8:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   152fe:	05 e0 65 03 00       	add    $0x365e0,%eax
}
   15303:	c9                   	leave  
   15304:	c3                   	ret    

00015305 <tty_open>:

/**
 * @brief 打开tty设备
 */
int tty_open (device_t * dev)  {
   15305:	55                   	push   %ebp
   15306:	89 e5                	mov    %esp,%ebp
   15308:	83 ec 18             	sub    $0x18,%esp
	int idx = dev->minor;
   1530b:	8b 45 08             	mov    0x8(%ebp),%eax
   1530e:	8b 40 08             	mov    0x8(%eax),%eax
   15311:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ((idx < 0) || (idx >= TTY_NR)) {
   15314:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15318:	78 06                	js     15320 <tty_open+0x1b>
   1531a:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   1531e:	7e 1d                	jle    1533d <tty_open+0x38>
		log_printf("open tty failed. incorrect tty num = %d", idx);
   15320:	83 ec 08             	sub    $0x8,%esp
   15323:	ff 75 f4             	pushl  -0xc(%ebp)
   15326:	68 74 9a 01 00       	push   $0x19a74
   1532b:	e8 00 37 00 00       	call   18a30 <log_printf>
   15330:	83 c4 10             	add    $0x10,%esp
		return -1;
   15333:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15338:	e9 bf 00 00 00       	jmp    153fc <tty_open+0xf7>
	}

	tty_t * tty = tty_devs + idx;
   1533d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15340:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   15346:	05 e0 65 03 00       	add    $0x365e0,%eax
   1534b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tty_fifo_init(&tty->ofifo, tty->obuf, TTY_OBUF_SIZE);
   1534e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15351:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15354:	81 c2 00 02 00 00    	add    $0x200,%edx
   1535a:	83 ec 04             	sub    $0x4,%esp
   1535d:	68 00 02 00 00       	push   $0x200
   15362:	50                   	push   %eax
   15363:	52                   	push   %edx
   15364:	e8 0d fe ff ff       	call   15176 <tty_fifo_init>
   15369:	83 c4 10             	add    $0x10,%esp
	sem_init(&tty->osem, TTY_OBUF_SIZE);
   1536c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1536f:	05 14 02 00 00       	add    $0x214,%eax
   15374:	83 ec 08             	sub    $0x8,%esp
   15377:	68 00 02 00 00       	push   $0x200
   1537c:	50                   	push   %eax
   1537d:	e8 48 2b 00 00       	call   17eca <sem_init>
   15382:	83 c4 10             	add    $0x10,%esp
	tty_fifo_init(&tty->ififo, tty->ibuf, TTY_IBUF_SIZE);
   15385:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15388:	8d 90 24 02 00 00    	lea    0x224(%eax),%edx
   1538e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15391:	05 24 04 00 00       	add    $0x424,%eax
   15396:	83 ec 04             	sub    $0x4,%esp
   15399:	68 00 02 00 00       	push   $0x200
   1539e:	52                   	push   %edx
   1539f:	50                   	push   %eax
   153a0:	e8 d1 fd ff ff       	call   15176 <tty_fifo_init>
   153a5:	83 c4 10             	add    $0x10,%esp
	sem_init(&tty->isem, 0);
   153a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153ab:	05 38 04 00 00       	add    $0x438,%eax
   153b0:	83 ec 08             	sub    $0x8,%esp
   153b3:	6a 00                	push   $0x0
   153b5:	50                   	push   %eax
   153b6:	e8 0f 2b 00 00       	call   17eca <sem_init>
   153bb:	83 c4 10             	add    $0x10,%esp

	tty->iflags = TTY_INLCR | TTY_IECHO;
   153be:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153c1:	c7 80 48 04 00 00 05 	movl   $0x5,0x448(%eax)
   153c8:	00 00 00 
	tty->oflags = TTY_OCRLF;
   153cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153ce:	c7 80 4c 04 00 00 01 	movl   $0x1,0x44c(%eax)
   153d5:	00 00 00 

	tty->console_idx = idx;
   153d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153db:	8b 55 f4             	mov    -0xc(%ebp),%edx
   153de:	89 90 50 04 00 00    	mov    %edx,0x450(%eax)

	kbd_init();
   153e4:	e8 8e fc ff ff       	call   15077 <kbd_init>
	console_init(idx);
   153e9:	83 ec 0c             	sub    $0xc,%esp
   153ec:	ff 75 f4             	pushl  -0xc(%ebp)
   153ef:	e8 4e e4 ff ff       	call   13842 <console_init>
   153f4:	83 c4 10             	add    $0x10,%esp
	return 0;
   153f7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   153fc:	c9                   	leave  
   153fd:	c3                   	ret    

000153fe <tty_write>:


/**
 * @brief 向tty写入数据
 */
int tty_write (device_t * dev, int addr, char * buf, int size) {
   153fe:	55                   	push   %ebp
   153ff:	89 e5                	mov    %esp,%ebp
   15401:	83 ec 28             	sub    $0x28,%esp
	if (size < 0) {
   15404:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15408:	79 0a                	jns    15414 <tty_write+0x16>
		return -1;
   1540a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1540f:	e9 d5 00 00 00       	jmp    154e9 <tty_write+0xeb>
	}

	tty_t * tty = get_tty(dev);
   15414:	83 ec 0c             	sub    $0xc,%esp
   15417:	ff 75 08             	pushl  0x8(%ebp)
   1541a:	e8 97 fe ff ff       	call   152b6 <get_tty>
   1541f:	83 c4 10             	add    $0x10,%esp
   15422:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int len = 0;
   15425:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	// 先将所有数据写入缓存中
	while (size) {
   1542c:	e9 a5 00 00 00       	jmp    154d6 <tty_write+0xd8>
		char c = *buf++;
   15431:	8b 45 10             	mov    0x10(%ebp),%eax
   15434:	8d 50 01             	lea    0x1(%eax),%edx
   15437:	89 55 10             	mov    %edx,0x10(%ebp)
   1543a:	0f b6 00             	movzbl (%eax),%eax
   1543d:	88 45 ef             	mov    %al,-0x11(%ebp)

		// 如果遇到\n，根据配置决定是否转换成\r\n
		if (c == '\n' && (tty->oflags & TTY_OCRLF)) {
   15440:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   15444:	75 43                	jne    15489 <tty_write+0x8b>
   15446:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15449:	8b 80 4c 04 00 00    	mov    0x44c(%eax),%eax
   1544f:	83 e0 01             	and    $0x1,%eax
   15452:	85 c0                	test   %eax,%eax
   15454:	74 33                	je     15489 <tty_write+0x8b>
			sem_wait(&tty->osem);
   15456:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15459:	05 14 02 00 00       	add    $0x214,%eax
   1545e:	83 ec 0c             	sub    $0xc,%esp
   15461:	50                   	push   %eax
   15462:	e8 86 2a 00 00       	call   17eed <sem_wait>
   15467:	83 c4 10             	add    $0x10,%esp
			int err = tty_fifo_put(&tty->ofifo, '\r');
   1546a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1546d:	05 00 02 00 00       	add    $0x200,%eax
   15472:	83 ec 08             	sub    $0x8,%esp
   15475:	6a 0d                	push   $0xd
   15477:	50                   	push   %eax
   15478:	e8 af fd ff ff       	call   1522c <tty_fifo_put>
   1547d:	83 c4 10             	add    $0x10,%esp
   15480:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (err < 0) {
   15483:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15487:	78 59                	js     154e2 <tty_write+0xe4>
				break;
			}
		}

		// 写入当前字符
		sem_wait(&tty->osem);
   15489:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1548c:	05 14 02 00 00       	add    $0x214,%eax
   15491:	83 ec 0c             	sub    $0xc,%esp
   15494:	50                   	push   %eax
   15495:	e8 53 2a 00 00       	call   17eed <sem_wait>
   1549a:	83 c4 10             	add    $0x10,%esp
		int err = tty_fifo_put(&tty->ofifo, c);
   1549d:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   154a1:	8b 55 f0             	mov    -0x10(%ebp),%edx
   154a4:	81 c2 00 02 00 00    	add    $0x200,%edx
   154aa:	83 ec 08             	sub    $0x8,%esp
   154ad:	50                   	push   %eax
   154ae:	52                   	push   %edx
   154af:	e8 78 fd ff ff       	call   1522c <tty_fifo_put>
   154b4:	83 c4 10             	add    $0x10,%esp
   154b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (err < 0) {
   154ba:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   154be:	78 25                	js     154e5 <tty_write+0xe7>
			break;
		}

		len++;
   154c0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
		size--;
   154c4:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

		// 启动输出, 这里是直接由console直接输出，无需中断
		console_write(tty);
   154c8:	83 ec 0c             	sub    $0xc,%esp
   154cb:	ff 75 f0             	pushl  -0x10(%ebp)
   154ce:	e8 7a e8 ff ff       	call   13d4d <console_write>
   154d3:	83 c4 10             	add    $0x10,%esp
	while (size) {
   154d6:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   154da:	0f 85 51 ff ff ff    	jne    15431 <tty_write+0x33>
   154e0:	eb 04                	jmp    154e6 <tty_write+0xe8>
				break;
   154e2:	90                   	nop
   154e3:	eb 01                	jmp    154e6 <tty_write+0xe8>
			break;
   154e5:	90                   	nop
	}

	return len;
   154e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   154e9:	c9                   	leave  
   154ea:	c3                   	ret    

000154eb <tty_read>:

/**
 * @brief 从tty读取数据
 */
int tty_read (device_t * dev, int addr, char * buf, int size) {
   154eb:	55                   	push   %ebp
   154ec:	89 e5                	mov    %esp,%ebp
   154ee:	83 ec 18             	sub    $0x18,%esp
	if (size < 0) {
   154f1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   154f5:	79 0a                	jns    15501 <tty_read+0x16>
		return -1;
   154f7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   154fc:	e9 09 01 00 00       	jmp    1560a <tty_read+0x11f>
	}

	tty_t * tty = get_tty(dev);
   15501:	83 ec 0c             	sub    $0xc,%esp
   15504:	ff 75 08             	pushl  0x8(%ebp)
   15507:	e8 aa fd ff ff       	call   152b6 <get_tty>
   1550c:	83 c4 10             	add    $0x10,%esp
   1550f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	char * pbuf = buf;
   15512:	8b 45 10             	mov    0x10(%ebp),%eax
   15515:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len = 0;
   15518:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	// 不断读取，直到遇到文件结束符或者行结束符
	while (len < size) {
   1551f:	e9 d7 00 00 00       	jmp    155fb <tty_read+0x110>
		// 等待可用的数据
		sem_wait(&tty->isem);
   15524:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15527:	05 38 04 00 00       	add    $0x438,%eax
   1552c:	83 ec 0c             	sub    $0xc,%esp
   1552f:	50                   	push   %eax
   15530:	e8 b8 29 00 00       	call   17eed <sem_wait>
   15535:	83 c4 10             	add    $0x10,%esp

		// 取出数据
		char ch;
		tty_fifo_get(&tty->ififo, &ch);
   15538:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1553b:	8d 90 24 04 00 00    	lea    0x424(%eax),%edx
   15541:	83 ec 08             	sub    $0x8,%esp
   15544:	8d 45 eb             	lea    -0x15(%ebp),%eax
   15547:	50                   	push   %eax
   15548:	52                   	push   %edx
   15549:	e8 5f fc ff ff       	call   151ad <tty_fifo_get>
   1554e:	83 c4 10             	add    $0x10,%esp
		switch (ch) {
   15551:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   15555:	0f be c0             	movsbl %al,%eax
   15558:	83 f8 0a             	cmp    $0xa,%eax
   1555b:	74 1a                	je     15577 <tty_read+0x8c>
   1555d:	83 f8 7f             	cmp    $0x7f,%eax
   15560:	75 52                	jne    155b4 <tty_read+0xc9>
			case ASCII_DEL:
				if (len == 0) {
   15562:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15566:	75 05                	jne    1556d <tty_read+0x82>
   15568:	e9 8e 00 00 00       	jmp    155fb <tty_read+0x110>
					continue;
				}
				len--;
   1556d:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
				pbuf--;
   15571:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
				break;
   15575:	eb 51                	jmp    155c8 <tty_read+0xdd>
			case '\n':
				if ((tty->iflags & TTY_INLCR) && (len < size - 1)) {	// \n变成\r\n
   15577:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1557a:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   15580:	83 e0 01             	and    $0x1,%eax
   15583:	85 c0                	test   %eax,%eax
   15585:	74 1b                	je     155a2 <tty_read+0xb7>
   15587:	8b 45 14             	mov    0x14(%ebp),%eax
   1558a:	83 e8 01             	sub    $0x1,%eax
   1558d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   15590:	7d 10                	jge    155a2 <tty_read+0xb7>
					*pbuf++ = '\r';
   15592:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15595:	8d 50 01             	lea    0x1(%eax),%edx
   15598:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1559b:	c6 00 0d             	movb   $0xd,(%eax)
					len++;
   1559e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
				}
				*pbuf++ = '\n';
   155a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   155a5:	8d 50 01             	lea    0x1(%eax),%edx
   155a8:	89 55 f4             	mov    %edx,-0xc(%ebp)
   155ab:	c6 00 0a             	movb   $0xa,(%eax)
				len++;
   155ae:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
				break;
   155b2:	eb 14                	jmp    155c8 <tty_read+0xdd>
			default:
				*pbuf++ = ch;
   155b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   155b7:	8d 50 01             	lea    0x1(%eax),%edx
   155ba:	89 55 f4             	mov    %edx,-0xc(%ebp)
   155bd:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   155c1:	88 10                	mov    %dl,(%eax)
				len++;
   155c3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
				break;
   155c7:	90                   	nop
		}

		if (tty->iflags & TTY_IECHO) {
   155c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   155cb:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   155d1:	83 e0 04             	and    $0x4,%eax
   155d4:	85 c0                	test   %eax,%eax
   155d6:	74 13                	je     155eb <tty_read+0x100>
		    tty_write(dev, 0, &ch, 1);
   155d8:	6a 01                	push   $0x1
   155da:	8d 45 eb             	lea    -0x15(%ebp),%eax
   155dd:	50                   	push   %eax
   155de:	6a 00                	push   $0x0
   155e0:	ff 75 08             	pushl  0x8(%ebp)
   155e3:	e8 16 fe ff ff       	call   153fe <tty_write>
   155e8:	83 c4 10             	add    $0x10,%esp
		}

		// 遇到一行结束，也直接跳出
		if ((ch == '\r') || (ch == '\n')) {
   155eb:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   155ef:	3c 0d                	cmp    $0xd,%al
   155f1:	74 14                	je     15607 <tty_read+0x11c>
   155f3:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   155f7:	3c 0a                	cmp    $0xa,%al
   155f9:	74 0c                	je     15607 <tty_read+0x11c>
	while (len < size) {
   155fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   155fe:	3b 45 14             	cmp    0x14(%ebp),%eax
   15601:	0f 8c 1d ff ff ff    	jl     15524 <tty_read+0x39>
			break;
		}
	}

	return len;
   15607:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1560a:	c9                   	leave  
   1560b:	c3                   	ret    

0001560c <tty_control>:

/**
 * @brief 向tty设备发送命令
 */
int tty_control (device_t * dev, int cmd, int arg0, int arg1) {
   1560c:	55                   	push   %ebp
   1560d:	89 e5                	mov    %esp,%ebp
   1560f:	53                   	push   %ebx
   15610:	83 ec 14             	sub    $0x14,%esp
	tty_t * tty = get_tty(dev);
   15613:	83 ec 0c             	sub    $0xc,%esp
   15616:	ff 75 08             	pushl  0x8(%ebp)
   15619:	e8 98 fc ff ff       	call   152b6 <get_tty>
   1561e:	83 c4 10             	add    $0x10,%esp
   15621:	89 45 f4             	mov    %eax,-0xc(%ebp)

	switch (cmd) {
   15624:	8b 45 0c             	mov    0xc(%ebp),%eax
   15627:	83 f8 01             	cmp    $0x1,%eax
   1562a:	74 0a                	je     15636 <tty_control+0x2a>
   1562c:	83 f8 02             	cmp    $0x2,%eax
   1562f:	74 6b                	je     1569c <tty_control+0x90>
		if (arg0) {
			*(int *)arg0 = sem_count(&tty->isem);
		}
		break;
	default:
		break;
   15631:	e9 86 00 00 00       	jmp    156bc <tty_control+0xb0>
		if (arg0) {
   15636:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1563a:	74 30                	je     1566c <tty_control+0x60>
			tty->iflags |= TTY_IECHO;
   1563c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1563f:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   15645:	83 c8 04             	or     $0x4,%eax
   15648:	89 c2                	mov    %eax,%edx
   1564a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1564d:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
			console_set_cursor(tty->console_idx, 1);
   15653:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15656:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   1565c:	83 ec 08             	sub    $0x8,%esp
   1565f:	6a 01                	push   $0x1
   15661:	50                   	push   %eax
   15662:	e8 45 dc ff ff       	call   132ac <console_set_cursor>
   15667:	83 c4 10             	add    $0x10,%esp
		break;
   1566a:	eb 50                	jmp    156bc <tty_control+0xb0>
			tty->iflags &= ~TTY_IECHO;
   1566c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1566f:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   15675:	83 e0 fb             	and    $0xfffffffb,%eax
   15678:	89 c2                	mov    %eax,%edx
   1567a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1567d:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
			console_set_cursor(tty->console_idx, 0);
   15683:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15686:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   1568c:	83 ec 08             	sub    $0x8,%esp
   1568f:	6a 00                	push   $0x0
   15691:	50                   	push   %eax
   15692:	e8 15 dc ff ff       	call   132ac <console_set_cursor>
   15697:	83 c4 10             	add    $0x10,%esp
		break;
   1569a:	eb 20                	jmp    156bc <tty_control+0xb0>
		if (arg0) {
   1569c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   156a0:	74 19                	je     156bb <tty_control+0xaf>
			*(int *)arg0 = sem_count(&tty->isem);
   156a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   156a5:	05 38 04 00 00       	add    $0x438,%eax
   156aa:	8b 5d 10             	mov    0x10(%ebp),%ebx
   156ad:	83 ec 0c             	sub    $0xc,%esp
   156b0:	50                   	push   %eax
   156b1:	e8 29 29 00 00       	call   17fdf <sem_count>
   156b6:	83 c4 10             	add    $0x10,%esp
   156b9:	89 03                	mov    %eax,(%ebx)
		break;
   156bb:	90                   	nop
	}
	return 0;
   156bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   156c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   156c4:	c9                   	leave  
   156c5:	c3                   	ret    

000156c6 <tty_close>:

/**
 * @brief 关闭tty设备
 */
void tty_close (device_t * dev) {
   156c6:	55                   	push   %ebp
   156c7:	89 e5                	mov    %esp,%ebp

}
   156c9:	90                   	nop
   156ca:	5d                   	pop    %ebp
   156cb:	c3                   	ret    

000156cc <tty_in>:

/**
 * @brief 输入tty字符
 */
void tty_in (char ch) {
   156cc:	55                   	push   %ebp
   156cd:	89 e5                	mov    %esp,%ebp
   156cf:	83 ec 28             	sub    $0x28,%esp
   156d2:	8b 45 08             	mov    0x8(%ebp),%eax
   156d5:	88 45 e4             	mov    %al,-0x1c(%ebp)
	tty_t * tty = tty_devs + curr_tty;
   156d8:	a1 80 88 03 00       	mov    0x38880,%eax
   156dd:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   156e3:	05 e0 65 03 00       	add    $0x365e0,%eax
   156e8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// 辅助队列要有空闲空间可代写入
	if (sem_count(&tty->isem) >= TTY_IBUF_SIZE) {
   156eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   156ee:	05 38 04 00 00       	add    $0x438,%eax
   156f3:	83 ec 0c             	sub    $0xc,%esp
   156f6:	50                   	push   %eax
   156f7:	e8 e3 28 00 00       	call   17fdf <sem_count>
   156fc:	83 c4 10             	add    $0x10,%esp
   156ff:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   15704:	7f 30                	jg     15736 <tty_in+0x6a>
		return;
	}

	// 写入辅助队列，通知数据到达
	tty_fifo_put(&tty->ififo, ch);
   15706:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   1570a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1570d:	81 c2 24 04 00 00    	add    $0x424,%edx
   15713:	83 ec 08             	sub    $0x8,%esp
   15716:	50                   	push   %eax
   15717:	52                   	push   %edx
   15718:	e8 0f fb ff ff       	call   1522c <tty_fifo_put>
   1571d:	83 c4 10             	add    $0x10,%esp
	sem_notify(&tty->isem);
   15720:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15723:	05 38 04 00 00       	add    $0x438,%eax
   15728:	83 ec 0c             	sub    $0xc,%esp
   1572b:	50                   	push   %eax
   1572c:	e8 2a 28 00 00       	call   17f5b <sem_notify>
   15731:	83 c4 10             	add    $0x10,%esp
   15734:	eb 01                	jmp    15737 <tty_in+0x6b>
		return;
   15736:	90                   	nop
}
   15737:	c9                   	leave  
   15738:	c3                   	ret    

00015739 <tty_select>:

/**
 * @brief 选择tty
 */
void tty_select (int tty) {
   15739:	55                   	push   %ebp
   1573a:	89 e5                	mov    %esp,%ebp
   1573c:	83 ec 08             	sub    $0x8,%esp
	if (tty != curr_tty) {
   1573f:	a1 80 88 03 00       	mov    0x38880,%eax
   15744:	39 45 08             	cmp    %eax,0x8(%ebp)
   15747:	74 16                	je     1575f <tty_select+0x26>
		console_select(tty);
   15749:	83 ec 0c             	sub    $0xc,%esp
   1574c:	ff 75 08             	pushl  0x8(%ebp)
   1574f:	e8 28 dc ff ff       	call   1337c <console_select>
   15754:	83 c4 10             	add    $0x10,%esp
		curr_tty = tty;
   15757:	8b 45 08             	mov    0x8(%ebp),%eax
   1575a:	a3 80 88 03 00       	mov    %eax,0x38880
	}
}
   1575f:	90                   	nop
   15760:	c9                   	leave  
   15761:	c3                   	ret    

00015762 <devfs_mount>:
};
/**
 * @brief 挂载指定设备
 * 设备文件系统，不需要考虑major和minor
 */
int devfs_mount (struct _fs_t * fs, int major, int minor) {
   15762:	55                   	push   %ebp
   15763:	89 e5                	mov    %esp,%ebp
    fs->type = FS_DEVFS;
   15765:	8b 45 08             	mov    0x8(%ebp),%eax
   15768:	c7 80 00 02 00 00 01 	movl   $0x1,0x200(%eax)
   1576f:	00 00 00 
    return 0;
   15772:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15777:	5d                   	pop    %ebp
   15778:	c3                   	ret    

00015779 <devfs_unmount>:

/**
 * @brief 卸载指定的设备
 * @param fs 
 */
void devfs_unmount (struct _fs_t * fs) {
   15779:	55                   	push   %ebp
   1577a:	89 e5                	mov    %esp,%ebp
}
   1577c:	90                   	nop
   1577d:	5d                   	pop    %ebp
   1577e:	c3                   	ret    

0001577f <devfs_open>:

/**
 * @brief 打开指定的设备以进行读写
 */
int devfs_open (struct _fs_t * fs, const char * path, file_t * file) {   
   1577f:	55                   	push   %ebp
   15780:	89 e5                	mov    %esp,%ebp
   15782:	83 ec 28             	sub    $0x28,%esp
    // 遍历所有支持的设备类型列表，根据path中的路径，找到相应的设备类型
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); i++) {
   15785:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1578c:	e9 04 01 00 00       	jmp    15895 <devfs_open+0x116>
        devfs_type_t * type = devfs_type_list + i;
   15791:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15794:	89 d0                	mov    %edx,%eax
   15796:	01 c0                	add    %eax,%eax
   15798:	01 d0                	add    %edx,%eax
   1579a:	c1 e0 02             	shl    $0x2,%eax
   1579d:	05 e0 a0 01 00       	add    $0x1a0e0,%eax
   157a2:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 查找相同的名称，然后从中提取后续部分，转换成字符串
        int type_name_len = kernel_strlen(type->name);
   157a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   157a8:	8b 00                	mov    (%eax),%eax
   157aa:	83 ec 0c             	sub    $0xc,%esp
   157ad:	50                   	push   %eax
   157ae:	e8 cf 2b 00 00       	call   18382 <kernel_strlen>
   157b3:	83 c4 10             	add    $0x10,%esp
   157b6:	89 45 ec             	mov    %eax,-0x14(%ebp)

        // 如果存在挂载点路径，则跳过该路径，取下级子目录
        if (kernel_strncmp(path, type->name, type_name_len) == 0) {
   157b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   157bc:	8b 00                	mov    (%eax),%eax
   157be:	83 ec 04             	sub    $0x4,%esp
   157c1:	ff 75 ec             	pushl  -0x14(%ebp)
   157c4:	50                   	push   %eax
   157c5:	ff 75 0c             	pushl  0xc(%ebp)
   157c8:	e8 f0 2b 00 00       	call   183bd <kernel_strncmp>
   157cd:	83 c4 10             	add    $0x10,%esp
   157d0:	85 c0                	test   %eax,%eax
   157d2:	0f 85 b9 00 00 00    	jne    15891 <devfs_open+0x112>
            int minor;

            // 转换得到设备子序号
            if ((kernel_strlen(path) > type_name_len) && (path_to_num(path + type_name_len, &minor)) < 0) {
   157d8:	83 ec 0c             	sub    $0xc,%esp
   157db:	ff 75 0c             	pushl  0xc(%ebp)
   157de:	e8 9f 2b 00 00       	call   18382 <kernel_strlen>
   157e3:	83 c4 10             	add    $0x10,%esp
   157e6:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   157e9:	7d 34                	jge    1581f <devfs_open+0xa0>
   157eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
   157ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   157f1:	01 c2                	add    %eax,%edx
   157f3:	83 ec 08             	sub    $0x8,%esp
   157f6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   157f9:	50                   	push   %eax
   157fa:	52                   	push   %edx
   157fb:	e8 f5 1a 00 00       	call   172f5 <path_to_num>
   15800:	83 c4 10             	add    $0x10,%esp
   15803:	85 c0                	test   %eax,%eax
   15805:	79 18                	jns    1581f <devfs_open+0xa0>
                log_printf("Get device num failed. %s", path);
   15807:	83 ec 08             	sub    $0x8,%esp
   1580a:	ff 75 0c             	pushl  0xc(%ebp)
   1580d:	68 a0 9a 01 00       	push   $0x19aa0
   15812:	e8 19 32 00 00       	call   18a30 <log_printf>
   15817:	83 c4 10             	add    $0x10,%esp
                break;
   1581a:	e9 80 00 00 00       	jmp    1589f <devfs_open+0x120>
            }

            // 打开设备
            int dev_id = dev_open(type->dev_type, minor, (void *)0);
   1581f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   15822:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15825:	8b 40 04             	mov    0x4(%eax),%eax
   15828:	83 ec 04             	sub    $0x4,%esp
   1582b:	6a 00                	push   $0x0
   1582d:	52                   	push   %edx
   1582e:	50                   	push   %eax
   1582f:	e8 54 e6 ff ff       	call   13e88 <dev_open>
   15834:	83 c4 10             	add    $0x10,%esp
   15837:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (dev_id < 0) {
   1583a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1583e:	79 16                	jns    15856 <devfs_open+0xd7>
                log_printf("Open device failed:%s", path);
   15840:	83 ec 08             	sub    $0x8,%esp
   15843:	ff 75 0c             	pushl  0xc(%ebp)
   15846:	68 ba 9a 01 00       	push   $0x19aba
   1584b:	e8 e0 31 00 00       	call   18a30 <log_printf>
   15850:	83 c4 10             	add    $0x10,%esp
                break;
   15853:	90                   	nop
   15854:	eb 49                	jmp    1589f <devfs_open+0x120>
            }

            // 纪录所在的设备号
            file->dev_id = dev_id;
   15856:	8b 45 10             	mov    0x10(%ebp),%eax
   15859:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1585c:	89 50 2c             	mov    %edx,0x2c(%eax)
            file->fs = fs;
   1585f:	8b 45 10             	mov    0x10(%ebp),%eax
   15862:	8b 55 08             	mov    0x8(%ebp),%edx
   15865:	89 50 44             	mov    %edx,0x44(%eax)
            file->pos = 0;
   15868:	8b 45 10             	mov    0x10(%ebp),%eax
   1586b:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
            file->size = 0;
   15872:	8b 45 10             	mov    0x10(%ebp),%eax
   15875:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
            file->type = type->file_type;
   1587c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1587f:	8b 40 08             	mov    0x8(%eax),%eax
   15882:	89 c2                	mov    %eax,%edx
   15884:	8b 45 10             	mov    0x10(%ebp),%eax
   15887:	89 50 20             	mov    %edx,0x20(%eax)
            return 0;
   1588a:	b8 00 00 00 00       	mov    $0x0,%eax
   1588f:	eb 13                	jmp    158a4 <devfs_open+0x125>
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); i++) {
   15891:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   15895:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15899:	0f 84 f2 fe ff ff    	je     15791 <devfs_open+0x12>
        }
    }

    return -1;
   1589f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   158a4:	c9                   	leave  
   158a5:	c3                   	ret    

000158a6 <devfs_read>:

/**
 * @brief 读写指定的文件系统
 */
int devfs_read (char * buf, int size, file_t * file) {
   158a6:	55                   	push   %ebp
   158a7:	89 e5                	mov    %esp,%ebp
   158a9:	83 ec 08             	sub    $0x8,%esp
    return dev_read(file->dev_id, file->pos, buf, size);
   158ac:	8b 45 10             	mov    0x10(%ebp),%eax
   158af:	8b 50 30             	mov    0x30(%eax),%edx
   158b2:	8b 45 10             	mov    0x10(%ebp),%eax
   158b5:	8b 40 2c             	mov    0x2c(%eax),%eax
   158b8:	ff 75 0c             	pushl  0xc(%ebp)
   158bb:	ff 75 08             	pushl  0x8(%ebp)
   158be:	52                   	push   %edx
   158bf:	50                   	push   %eax
   158c0:	e8 0f e7 ff ff       	call   13fd4 <dev_read>
   158c5:	83 c4 10             	add    $0x10,%esp
}
   158c8:	c9                   	leave  
   158c9:	c3                   	ret    

000158ca <devfs_write>:

/**
 * @brief 写设备文件系统
 */
int devfs_write (char * buf, int size, file_t * file) {
   158ca:	55                   	push   %ebp
   158cb:	89 e5                	mov    %esp,%ebp
   158cd:	83 ec 08             	sub    $0x8,%esp
    return dev_write(file->dev_id, file->pos, buf, size);
   158d0:	8b 45 10             	mov    0x10(%ebp),%eax
   158d3:	8b 50 30             	mov    0x30(%eax),%edx
   158d6:	8b 45 10             	mov    0x10(%ebp),%eax
   158d9:	8b 40 2c             	mov    0x2c(%eax),%eax
   158dc:	ff 75 0c             	pushl  0xc(%ebp)
   158df:	ff 75 08             	pushl  0x8(%ebp)
   158e2:	52                   	push   %edx
   158e3:	50                   	push   %eax
   158e4:	e8 37 e7 ff ff       	call   14020 <dev_write>
   158e9:	83 c4 10             	add    $0x10,%esp
}
   158ec:	c9                   	leave  
   158ed:	c3                   	ret    

000158ee <devfs_close>:

/**
 * @brief 关闭设备文件
 */
void devfs_close (file_t * file) {
   158ee:	55                   	push   %ebp
   158ef:	89 e5                	mov    %esp,%ebp
   158f1:	83 ec 08             	sub    $0x8,%esp
    dev_close(file->dev_id);
   158f4:	8b 45 08             	mov    0x8(%ebp),%eax
   158f7:	8b 40 2c             	mov    0x2c(%eax),%eax
   158fa:	83 ec 0c             	sub    $0xc,%esp
   158fd:	50                   	push   %eax
   158fe:	e8 b5 e7 ff ff       	call   140b8 <dev_close>
   15903:	83 c4 10             	add    $0x10,%esp
}
   15906:	90                   	nop
   15907:	c9                   	leave  
   15908:	c3                   	ret    

00015909 <devfs_seek>:

/**
 * @brief 文件读写定位
 */
int devfs_seek (file_t * file, uint32_t offset, int dir) {
   15909:	55                   	push   %ebp
   1590a:	89 e5                	mov    %esp,%ebp
    return -1;  // 不支持定位
   1590c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15911:	5d                   	pop    %ebp
   15912:	c3                   	ret    

00015913 <devfs_stat>:

/**
 * @brief 获取文件信息
 */
int devfs_stat(file_t * file, struct stat *st) {
   15913:	55                   	push   %ebp
   15914:	89 e5                	mov    %esp,%ebp
    return -1;
   15916:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1591b:	5d                   	pop    %ebp
   1591c:	c3                   	ret    

0001591d <devfs_ioctl>:

/**
 * @brief IO设备控制
 */
int devfs_ioctl(file_t * file, int cmd, int arg0, int arg1) {
   1591d:	55                   	push   %ebp
   1591e:	89 e5                	mov    %esp,%ebp
   15920:	83 ec 08             	sub    $0x8,%esp
    return dev_control(file->dev_id, cmd, arg0, arg1);
   15923:	8b 45 08             	mov    0x8(%ebp),%eax
   15926:	8b 40 2c             	mov    0x2c(%eax),%eax
   15929:	ff 75 14             	pushl  0x14(%ebp)
   1592c:	ff 75 10             	pushl  0x10(%ebp)
   1592f:	ff 75 0c             	pushl  0xc(%ebp)
   15932:	50                   	push   %eax
   15933:	e8 34 e7 ff ff       	call   1406c <dev_control>
   15938:	83 c4 10             	add    $0x10,%esp
}
   1593b:	c9                   	leave  
   1593c:	c3                   	ret    

0001593d <up2>:
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   1593d:	55                   	push   %ebp
   1593e:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   15940:	8b 55 08             	mov    0x8(%ebp),%edx
   15943:	8b 45 0c             	mov    0xc(%ebp),%eax
   15946:	01 d0                	add    %edx,%eax
   15948:	8d 50 ff             	lea    -0x1(%eax),%edx
   1594b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1594e:	f7 d8                	neg    %eax
   15950:	21 d0                	and    %edx,%eax
}
   15952:	5d                   	pop    %ebp
   15953:	c3                   	ret    

00015954 <bread_sector>:
#include <sys/fcntl.h>

/**
 * @brief 缓存读取磁盘数据，用于目录的遍历等
 */
static int bread_sector (fat_t * fat, int sector) {
   15954:	55                   	push   %ebp
   15955:	89 e5                	mov    %esp,%ebp
   15957:	83 ec 18             	sub    $0x18,%esp
    if (sector == fat->curr_sector) {
   1595a:	8b 45 08             	mov    0x8(%ebp),%eax
   1595d:	8b 40 28             	mov    0x28(%eax),%eax
   15960:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15963:	75 07                	jne    1596c <bread_sector+0x18>
        return 0;
   15965:	b8 00 00 00 00       	mov    $0x0,%eax
   1596a:	eb 3f                	jmp    159ab <bread_sector+0x57>
    }

    int cnt = dev_read(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   1596c:	8b 45 08             	mov    0x8(%ebp),%eax
   1596f:	8b 50 24             	mov    0x24(%eax),%edx
   15972:	8b 45 08             	mov    0x8(%ebp),%eax
   15975:	8b 40 2c             	mov    0x2c(%eax),%eax
   15978:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   1597e:	6a 01                	push   $0x1
   15980:	52                   	push   %edx
   15981:	ff 75 0c             	pushl  0xc(%ebp)
   15984:	50                   	push   %eax
   15985:	e8 4a e6 ff ff       	call   13fd4 <dev_read>
   1598a:	83 c4 10             	add    $0x10,%esp
   1598d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (cnt == 1) {
   15990:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   15994:	75 10                	jne    159a6 <bread_sector+0x52>
        fat->curr_sector = sector;
   15996:	8b 45 08             	mov    0x8(%ebp),%eax
   15999:	8b 55 0c             	mov    0xc(%ebp),%edx
   1599c:	89 50 28             	mov    %edx,0x28(%eax)
        return 0;
   1599f:	b8 00 00 00 00       	mov    $0x0,%eax
   159a4:	eb 05                	jmp    159ab <bread_sector+0x57>
    }
    return -1;
   159a6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   159ab:	c9                   	leave  
   159ac:	c3                   	ret    

000159ad <bwrite_secotr>:

/**
 * @brief 写缓存
 */
static int bwrite_secotr (fat_t * fat, int sector) {
   159ad:	55                   	push   %ebp
   159ae:	89 e5                	mov    %esp,%ebp
   159b0:	83 ec 18             	sub    $0x18,%esp
    int cnt = dev_write(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   159b3:	8b 45 08             	mov    0x8(%ebp),%eax
   159b6:	8b 50 24             	mov    0x24(%eax),%edx
   159b9:	8b 45 08             	mov    0x8(%ebp),%eax
   159bc:	8b 40 2c             	mov    0x2c(%eax),%eax
   159bf:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   159c5:	6a 01                	push   $0x1
   159c7:	52                   	push   %edx
   159c8:	ff 75 0c             	pushl  0xc(%ebp)
   159cb:	50                   	push   %eax
   159cc:	e8 4f e6 ff ff       	call   14020 <dev_write>
   159d1:	83 c4 10             	add    $0x10,%esp
   159d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return (cnt == 1) ? 0 : -1;
   159d7:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   159db:	75 07                	jne    159e4 <bwrite_secotr+0x37>
   159dd:	b8 00 00 00 00       	mov    $0x0,%eax
   159e2:	eb 05                	jmp    159e9 <bwrite_secotr+0x3c>
   159e4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   159e9:	c9                   	leave  
   159ea:	c3                   	ret    

000159eb <cluster_is_valid>:

/**
 * 检查指定簇是否可用，非占用或坏簇
 */
int cluster_is_valid (cluster_t cluster) {
   159eb:	55                   	push   %ebp
   159ec:	89 e5                	mov    %esp,%ebp
   159ee:	83 ec 04             	sub    $0x4,%esp
   159f1:	8b 45 08             	mov    0x8(%ebp),%eax
   159f4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return (cluster < 0xFFF8) && (cluster >= 0x2);     // 值是否正确
   159f8:	66 83 7d fc f7       	cmpw   $0xfff7,-0x4(%ebp)
   159fd:	77 0e                	ja     15a0d <cluster_is_valid+0x22>
   159ff:	66 83 7d fc 01       	cmpw   $0x1,-0x4(%ebp)
   15a04:	76 07                	jbe    15a0d <cluster_is_valid+0x22>
   15a06:	b8 01 00 00 00       	mov    $0x1,%eax
   15a0b:	eb 05                	jmp    15a12 <cluster_is_valid+0x27>
   15a0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15a12:	c9                   	leave  
   15a13:	c3                   	ret    

00015a14 <cluster_get_next>:

/**
 * 获取指定簇的下一个簇
 */
int cluster_get_next (fat_t * fat, cluster_t curr) {
   15a14:	55                   	push   %ebp
   15a15:	89 e5                	mov    %esp,%ebp
   15a17:	83 ec 28             	sub    $0x28,%esp
   15a1a:	8b 45 0c             	mov    0xc(%ebp),%eax
   15a1d:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    if (!cluster_is_valid(curr)) {
   15a21:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15a25:	50                   	push   %eax
   15a26:	e8 c0 ff ff ff       	call   159eb <cluster_is_valid>
   15a2b:	83 c4 04             	add    $0x4,%esp
   15a2e:	85 c0                	test   %eax,%eax
   15a30:	75 0a                	jne    15a3c <cluster_get_next+0x28>
        return FAT_CLUSTER_INVALID;
   15a32:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15a37:	e9 94 00 00 00       	jmp    15ad0 <cluster_get_next+0xbc>
    }

    // 取fat表中的扇区号和在扇区中的偏移
    int offset = curr * sizeof(cluster_t);
   15a3c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15a40:	01 c0                	add    %eax,%eax
   15a42:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = offset / fat->bytes_per_sec;
   15a45:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15a48:	8b 55 08             	mov    0x8(%ebp),%edx
   15a4b:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15a4e:	ba 00 00 00 00       	mov    $0x0,%edx
   15a53:	f7 f1                	div    %ecx
   15a55:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int off_sector = offset % fat->bytes_per_sec;
   15a58:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15a5b:	8b 55 08             	mov    0x8(%ebp),%edx
   15a5e:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15a61:	ba 00 00 00 00       	mov    $0x0,%edx
   15a66:	f7 f1                	div    %ecx
   15a68:	89 d0                	mov    %edx,%eax
   15a6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (sector >= fat->tbl_sectors) {
   15a6d:	8b 45 08             	mov    0x8(%ebp),%eax
   15a70:	8b 50 08             	mov    0x8(%eax),%edx
   15a73:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15a76:	39 c2                	cmp    %eax,%edx
   15a78:	77 1c                	ja     15a96 <cluster_get_next+0x82>
        log_printf("cluster too big. %d", curr);
   15a7a:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15a7e:	83 ec 08             	sub    $0x8,%esp
   15a81:	50                   	push   %eax
   15a82:	68 d0 9a 01 00       	push   $0x19ad0
   15a87:	e8 a4 2f 00 00       	call   18a30 <log_printf>
   15a8c:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   15a8f:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15a94:	eb 3a                	jmp    15ad0 <cluster_get_next+0xbc>
    }

    // 读扇区，然后取其中簇数据
    int err = bread_sector(fat, fat->tbl_start + sector);
   15a96:	8b 45 08             	mov    0x8(%ebp),%eax
   15a99:	8b 10                	mov    (%eax),%edx
   15a9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15a9e:	01 d0                	add    %edx,%eax
   15aa0:	83 ec 08             	sub    $0x8,%esp
   15aa3:	50                   	push   %eax
   15aa4:	ff 75 08             	pushl  0x8(%ebp)
   15aa7:	e8 a8 fe ff ff       	call   15954 <bread_sector>
   15aac:	83 c4 10             	add    $0x10,%esp
   15aaf:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   15ab2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15ab6:	79 07                	jns    15abf <cluster_get_next+0xab>
        return FAT_CLUSTER_INVALID;
   15ab8:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15abd:	eb 11                	jmp    15ad0 <cluster_get_next+0xbc>
    }

    return *(cluster_t*)(fat->fat_buffer + off_sector);
   15abf:	8b 45 08             	mov    0x8(%ebp),%eax
   15ac2:	8b 50 24             	mov    0x24(%eax),%edx
   15ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15ac8:	01 d0                	add    %edx,%eax
   15aca:	0f b7 00             	movzwl (%eax),%eax
   15acd:	0f b7 c0             	movzwl %ax,%eax
}
   15ad0:	c9                   	leave  
   15ad1:	c3                   	ret    

00015ad2 <cluster_set_next>:

/**
 * @brief 设置簇的下一簇
 */
int cluster_set_next (fat_t * fat, cluster_t curr, cluster_t next) {
   15ad2:	55                   	push   %ebp
   15ad3:	89 e5                	mov    %esp,%ebp
   15ad5:	83 ec 38             	sub    $0x38,%esp
   15ad8:	8b 55 0c             	mov    0xc(%ebp),%edx
   15adb:	8b 45 10             	mov    0x10(%ebp),%eax
   15ade:	66 89 55 d4          	mov    %dx,-0x2c(%ebp)
   15ae2:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
    if (!cluster_is_valid(curr)) {
   15ae6:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15aea:	50                   	push   %eax
   15aeb:	e8 fb fe ff ff       	call   159eb <cluster_is_valid>
   15af0:	83 c4 04             	add    $0x4,%esp
   15af3:	85 c0                	test   %eax,%eax
   15af5:	75 0a                	jne    15b01 <cluster_set_next+0x2f>
        return -1;
   15af7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15afc:	e9 fe 00 00 00       	jmp    15bff <cluster_set_next+0x12d>
    }

    int offset = curr * sizeof(cluster_t);
   15b01:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15b05:	01 c0                	add    %eax,%eax
   15b07:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int sector = offset / fat->bytes_per_sec;
   15b0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15b0d:	8b 55 08             	mov    0x8(%ebp),%edx
   15b10:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15b13:	ba 00 00 00 00       	mov    $0x0,%edx
   15b18:	f7 f1                	div    %ecx
   15b1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int off_sector = offset % fat->bytes_per_sec;
   15b1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15b20:	8b 55 08             	mov    0x8(%ebp),%edx
   15b23:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15b26:	ba 00 00 00 00       	mov    $0x0,%edx
   15b2b:	f7 f1                	div    %ecx
   15b2d:	89 d0                	mov    %edx,%eax
   15b2f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sector >= fat->tbl_sectors) {
   15b32:	8b 45 08             	mov    0x8(%ebp),%eax
   15b35:	8b 50 08             	mov    0x8(%eax),%edx
   15b38:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b3b:	39 c2                	cmp    %eax,%edx
   15b3d:	77 1f                	ja     15b5e <cluster_set_next+0x8c>
        log_printf("cluster too big. %d", curr);
   15b3f:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15b43:	83 ec 08             	sub    $0x8,%esp
   15b46:	50                   	push   %eax
   15b47:	68 d0 9a 01 00       	push   $0x19ad0
   15b4c:	e8 df 2e 00 00       	call   18a30 <log_printf>
   15b51:	83 c4 10             	add    $0x10,%esp
        return -1;
   15b54:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15b59:	e9 a1 00 00 00       	jmp    15bff <cluster_set_next+0x12d>
    }

    // 读缓存
    int err = bread_sector(fat, fat->tbl_start + sector);
   15b5e:	8b 45 08             	mov    0x8(%ebp),%eax
   15b61:	8b 10                	mov    (%eax),%edx
   15b63:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b66:	01 d0                	add    %edx,%eax
   15b68:	83 ec 08             	sub    $0x8,%esp
   15b6b:	50                   	push   %eax
   15b6c:	ff 75 08             	pushl  0x8(%ebp)
   15b6f:	e8 e0 fd ff ff       	call   15954 <bread_sector>
   15b74:	83 c4 10             	add    $0x10,%esp
   15b77:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {
   15b7a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15b7e:	79 07                	jns    15b87 <cluster_set_next+0xb5>
        return -1;
   15b80:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15b85:	eb 78                	jmp    15bff <cluster_set_next+0x12d>
    }

    // 改next
    *(cluster_t*)(fat->fat_buffer + off_sector) = next;
   15b87:	8b 45 08             	mov    0x8(%ebp),%eax
   15b8a:	8b 50 24             	mov    0x24(%eax),%edx
   15b8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15b90:	01 c2                	add    %eax,%edx
   15b92:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
   15b96:	66 89 02             	mov    %ax,(%edx)

    // 回写到多个表中
    for (int i = 0; i < fat->tbl_cnt; i++) {
   15b99:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   15ba0:	eb 4b                	jmp    15bed <cluster_set_next+0x11b>
        err = bwrite_secotr(fat, fat->tbl_start + sector);
   15ba2:	8b 45 08             	mov    0x8(%ebp),%eax
   15ba5:	8b 10                	mov    (%eax),%edx
   15ba7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15baa:	01 d0                	add    %edx,%eax
   15bac:	83 ec 08             	sub    $0x8,%esp
   15baf:	50                   	push   %eax
   15bb0:	ff 75 08             	pushl  0x8(%ebp)
   15bb3:	e8 f5 fd ff ff       	call   159ad <bwrite_secotr>
   15bb8:	83 c4 10             	add    $0x10,%esp
   15bbb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   15bbe:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15bc2:	79 17                	jns    15bdb <cluster_set_next+0x109>
            log_printf("write cluster failed.");
   15bc4:	83 ec 0c             	sub    $0xc,%esp
   15bc7:	68 e4 9a 01 00       	push   $0x19ae4
   15bcc:	e8 5f 2e 00 00       	call   18a30 <log_printf>
   15bd1:	83 c4 10             	add    $0x10,%esp
            return -1;
   15bd4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15bd9:	eb 24                	jmp    15bff <cluster_set_next+0x12d>
        }
        sector += fat->tbl_sectors;
   15bdb:	8b 45 08             	mov    0x8(%ebp),%eax
   15bde:	8b 50 08             	mov    0x8(%eax),%edx
   15be1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15be4:	01 d0                	add    %edx,%eax
   15be6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < fat->tbl_cnt; i++) {
   15be9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   15bed:	8b 45 08             	mov    0x8(%ebp),%eax
   15bf0:	8b 50 04             	mov    0x4(%eax),%edx
   15bf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15bf6:	39 c2                	cmp    %eax,%edx
   15bf8:	77 a8                	ja     15ba2 <cluster_set_next+0xd0>
    }
    return 0;
   15bfa:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15bff:	c9                   	leave  
   15c00:	c3                   	ret    

00015c01 <cluster_free_chain>:

/**
 * @brief 释放cluster链
 */
void cluster_free_chain(fat_t * fat, cluster_t start) {
   15c01:	55                   	push   %ebp
   15c02:	89 e5                	mov    %esp,%ebp
   15c04:	83 ec 28             	sub    $0x28,%esp
   15c07:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c0a:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    while (cluster_is_valid(start)) {
   15c0e:	eb 34                	jmp    15c44 <cluster_free_chain+0x43>
        cluster_t next = cluster_get_next(fat, start);
   15c10:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15c14:	83 ec 08             	sub    $0x8,%esp
   15c17:	50                   	push   %eax
   15c18:	ff 75 08             	pushl  0x8(%ebp)
   15c1b:	e8 f4 fd ff ff       	call   15a14 <cluster_get_next>
   15c20:	83 c4 10             	add    $0x10,%esp
   15c23:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        cluster_set_next(fat, start, FAT_CLUSTER_FREE);
   15c27:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15c2b:	83 ec 04             	sub    $0x4,%esp
   15c2e:	6a 00                	push   $0x0
   15c30:	50                   	push   %eax
   15c31:	ff 75 08             	pushl  0x8(%ebp)
   15c34:	e8 99 fe ff ff       	call   15ad2 <cluster_set_next>
   15c39:	83 c4 10             	add    $0x10,%esp
        start = next;
   15c3c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15c40:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    while (cluster_is_valid(start)) {
   15c44:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15c48:	83 ec 0c             	sub    $0xc,%esp
   15c4b:	50                   	push   %eax
   15c4c:	e8 9a fd ff ff       	call   159eb <cluster_is_valid>
   15c51:	83 c4 10             	add    $0x10,%esp
   15c54:	85 c0                	test   %eax,%eax
   15c56:	75 b8                	jne    15c10 <cluster_free_chain+0xf>
    }
}
   15c58:	90                   	nop
   15c59:	c9                   	leave  
   15c5a:	c3                   	ret    

00015c5b <cluster_alloc_free>:

/**
 * @brief 找一个空闲的cluster
 */
cluster_t cluster_alloc_free (fat_t * fat, int cnt) {
   15c5b:	55                   	push   %ebp
   15c5c:	89 e5                	mov    %esp,%ebp
   15c5e:	83 ec 28             	sub    $0x28,%esp
    cluster_t pre, curr, start;
    int c_total = fat->tbl_sectors * fat->bytes_per_sec / sizeof(cluster_t);
   15c61:	8b 45 08             	mov    0x8(%ebp),%eax
   15c64:	8b 50 08             	mov    0x8(%eax),%edx
   15c67:	8b 45 08             	mov    0x8(%ebp),%eax
   15c6a:	8b 40 0c             	mov    0xc(%eax),%eax
   15c6d:	0f af c2             	imul   %edx,%eax
   15c70:	d1 e8                	shr    %eax
   15c72:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pre = start = FAT_CLUSTER_INVALID;
   15c75:	66 c7 45 f2 f8 ff    	movw   $0xfff8,-0xe(%ebp)
   15c7b:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15c7f:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    for (curr = 2; (curr< c_total) && cnt; curr++) {
   15c83:	66 c7 45 f4 02 00    	movw   $0x2,-0xc(%ebp)
   15c89:	e9 a0 00 00 00       	jmp    15d2e <cluster_alloc_free+0xd3>
        cluster_t free = cluster_get_next(fat, curr);
   15c8e:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15c92:	83 ec 08             	sub    $0x8,%esp
   15c95:	50                   	push   %eax
   15c96:	ff 75 08             	pushl  0x8(%ebp)
   15c99:	e8 76 fd ff ff       	call   15a14 <cluster_get_next>
   15c9e:	83 c4 10             	add    $0x10,%esp
   15ca1:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
        if (free == FAT_CLUSTER_FREE) {
   15ca5:	66 83 7d ea 00       	cmpw   $0x0,-0x16(%ebp)
   15caa:	75 77                	jne    15d23 <cluster_alloc_free+0xc8>
            // 记录首个簇
            if (!cluster_is_valid(start)) {
   15cac:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15cb0:	83 ec 0c             	sub    $0xc,%esp
   15cb3:	50                   	push   %eax
   15cb4:	e8 32 fd ff ff       	call   159eb <cluster_is_valid>
   15cb9:	83 c4 10             	add    $0x10,%esp
   15cbc:	85 c0                	test   %eax,%eax
   15cbe:	75 08                	jne    15cc8 <cluster_alloc_free+0x6d>
                start = curr;
   15cc0:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15cc4:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
            } 
        
            // 前一簇如果有效，则设置。否则忽略掉
            if (cluster_is_valid(pre)) {
   15cc8:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15ccc:	83 ec 0c             	sub    $0xc,%esp
   15ccf:	50                   	push   %eax
   15cd0:	e8 16 fd ff ff       	call   159eb <cluster_is_valid>
   15cd5:	83 c4 10             	add    $0x10,%esp
   15cd8:	85 c0                	test   %eax,%eax
   15cda:	74 3b                	je     15d17 <cluster_alloc_free+0xbc>
                // 找到空表项，设置前一表项的链接
                int err = cluster_set_next(fat, pre, curr);
   15cdc:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
   15ce0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15ce4:	83 ec 04             	sub    $0x4,%esp
   15ce7:	52                   	push   %edx
   15ce8:	50                   	push   %eax
   15ce9:	ff 75 08             	pushl  0x8(%ebp)
   15cec:	e8 e1 fd ff ff       	call   15ad2 <cluster_set_next>
   15cf1:	83 c4 10             	add    $0x10,%esp
   15cf4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (err < 0) {
   15cf7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15cfb:	79 1a                	jns    15d17 <cluster_alloc_free+0xbc>
                    cluster_free_chain(fat, start);
   15cfd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15d01:	83 ec 08             	sub    $0x8,%esp
   15d04:	50                   	push   %eax
   15d05:	ff 75 08             	pushl  0x8(%ebp)
   15d08:	e8 f4 fe ff ff       	call   15c01 <cluster_free_chain>
   15d0d:	83 c4 10             	add    $0x10,%esp
                    return FAT_CLUSTER_INVALID;
   15d10:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
   15d15:	eb 6f                	jmp    15d86 <cluster_alloc_free+0x12b>
                }
            }

            pre = curr;
   15d17:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15d1b:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
            cnt--;
   15d1f:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
    for (curr = 2; (curr< c_total) && cnt; curr++) {
   15d23:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15d27:	83 c0 01             	add    $0x1,%eax
   15d2a:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   15d2e:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15d32:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   15d35:	7e 0a                	jle    15d41 <cluster_alloc_free+0xe6>
   15d37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15d3b:	0f 85 4d ff ff ff    	jne    15c8e <cluster_alloc_free+0x33>
        }
    }

    // 最后的结点
    if (cnt == 0) {
   15d41:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15d45:	75 27                	jne    15d6e <cluster_alloc_free+0x113>
        int err = cluster_set_next(fat, pre, FAT_CLUSTER_INVALID);
   15d47:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15d4b:	83 ec 04             	sub    $0x4,%esp
   15d4e:	68 f8 ff 00 00       	push   $0xfff8
   15d53:	50                   	push   %eax
   15d54:	ff 75 08             	pushl  0x8(%ebp)
   15d57:	e8 76 fd ff ff       	call   15ad2 <cluster_set_next>
   15d5c:	83 c4 10             	add    $0x10,%esp
   15d5f:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err == 0) {
   15d62:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   15d66:	75 06                	jne    15d6e <cluster_alloc_free+0x113>
            return start;
   15d68:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15d6c:	eb 18                	jmp    15d86 <cluster_alloc_free+0x12b>
        }
    }

    // 失败，空间不够等问题
    cluster_free_chain(fat, start);
   15d6e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15d72:	83 ec 08             	sub    $0x8,%esp
   15d75:	50                   	push   %eax
   15d76:	ff 75 08             	pushl  0x8(%ebp)
   15d79:	e8 83 fe ff ff       	call   15c01 <cluster_free_chain>
   15d7e:	83 c4 10             	add    $0x10,%esp
    return FAT_CLUSTER_INVALID;
   15d81:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
}
   15d86:	c9                   	leave  
   15d87:	c3                   	ret    

00015d88 <to_sfn>:

/**
 * @brief 转换文件名为diritem中的短文件名，如a.txt 转换成a      txt
 */
static void to_sfn(char* dest, const char* src) {
   15d88:	55                   	push   %ebp
   15d89:	89 e5                	mov    %esp,%ebp
   15d8b:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(dest, ' ', SFN_LEN);
   15d8e:	83 ec 04             	sub    $0x4,%esp
   15d91:	6a 0b                	push   $0xb
   15d93:	6a 20                	push   $0x20
   15d95:	ff 75 08             	pushl  0x8(%ebp)
   15d98:	e8 e9 26 00 00       	call   18486 <kernel_memset>
   15d9d:	83 c4 10             	add    $0x10,%esp

    // 不断生成直到遇到分隔符和写完缓存
    char * curr = dest;
   15da0:	8b 45 08             	mov    0x8(%ebp),%eax
   15da3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char * end = dest + SFN_LEN;
   15da6:	8b 45 08             	mov    0x8(%ebp),%eax
   15da9:	83 c0 0b             	add    $0xb,%eax
   15dac:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (*src && (curr < end)) {
   15daf:	eb 49                	jmp    15dfa <to_sfn+0x72>
        char c = *src++;
   15db1:	8b 45 0c             	mov    0xc(%ebp),%eax
   15db4:	8d 50 01             	lea    0x1(%eax),%edx
   15db7:	89 55 0c             	mov    %edx,0xc(%ebp)
   15dba:	0f b6 00             	movzbl (%eax),%eax
   15dbd:	88 45 f3             	mov    %al,-0xd(%ebp)

        switch (c) {
   15dc0:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
   15dc4:	83 f8 2e             	cmp    $0x2e,%eax
   15dc7:	75 0b                	jne    15dd4 <to_sfn+0x4c>
        case '.':       // 隔附，跳到扩展名区，不写字符
            curr = dest + 8;
   15dc9:	8b 45 08             	mov    0x8(%ebp),%eax
   15dcc:	83 c0 08             	add    $0x8,%eax
   15dcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   15dd2:	eb 26                	jmp    15dfa <to_sfn+0x72>
        default:
            if ((c >= 'a') && (c <= 'z')) {
   15dd4:	80 7d f3 60          	cmpb   $0x60,-0xd(%ebp)
   15dd8:	7e 10                	jle    15dea <to_sfn+0x62>
   15dda:	80 7d f3 7a          	cmpb   $0x7a,-0xd(%ebp)
   15dde:	7f 0a                	jg     15dea <to_sfn+0x62>
                c = c - 'a' + 'A';
   15de0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   15de4:	83 e8 20             	sub    $0x20,%eax
   15de7:	88 45 f3             	mov    %al,-0xd(%ebp)
            }
            *curr++ = c;
   15dea:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15ded:	8d 50 01             	lea    0x1(%eax),%edx
   15df0:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15df3:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   15df7:	88 10                	mov    %dl,(%eax)
            break;
   15df9:	90                   	nop
    while (*src && (curr < end)) {
   15dfa:	8b 45 0c             	mov    0xc(%ebp),%eax
   15dfd:	0f b6 00             	movzbl (%eax),%eax
   15e00:	84 c0                	test   %al,%al
   15e02:	74 08                	je     15e0c <to_sfn+0x84>
   15e04:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e07:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   15e0a:	72 a5                	jb     15db1 <to_sfn+0x29>
        }
    }
}
   15e0c:	90                   	nop
   15e0d:	c9                   	leave  
   15e0e:	c3                   	ret    

00015e0f <diritem_name_match>:

/**
 * @brief 判断item项是否与指定的名称相匹配
 */
int diritem_name_match (diritem_t * item, const char * path) {
   15e0f:	55                   	push   %ebp
   15e10:	89 e5                	mov    %esp,%ebp
   15e12:	83 ec 18             	sub    $0x18,%esp
    char buf[SFN_LEN];
    to_sfn(buf, path);
   15e15:	83 ec 08             	sub    $0x8,%esp
   15e18:	ff 75 0c             	pushl  0xc(%ebp)
   15e1b:	8d 45 ed             	lea    -0x13(%ebp),%eax
   15e1e:	50                   	push   %eax
   15e1f:	e8 64 ff ff ff       	call   15d88 <to_sfn>
   15e24:	83 c4 10             	add    $0x10,%esp
    return kernel_memcmp(buf, item->DIR_Name, SFN_LEN) == 0;
   15e27:	8b 45 08             	mov    0x8(%ebp),%eax
   15e2a:	83 ec 04             	sub    $0x4,%esp
   15e2d:	6a 0b                	push   $0xb
   15e2f:	50                   	push   %eax
   15e30:	8d 45 ed             	lea    -0x13(%ebp),%eax
   15e33:	50                   	push   %eax
   15e34:	e8 8e 26 00 00       	call   184c7 <kernel_memcmp>
   15e39:	83 c4 10             	add    $0x10,%esp
   15e3c:	85 c0                	test   %eax,%eax
   15e3e:	0f 94 c0             	sete   %al
   15e41:	0f b6 c0             	movzbl %al,%eax
}
   15e44:	c9                   	leave  
   15e45:	c3                   	ret    

00015e46 <diritem_init>:

/**
 * 缺省初始化driitem
 */
int diritem_init(diritem_t * item, uint8_t attr,const char * name) {
   15e46:	55                   	push   %ebp
   15e47:	89 e5                	mov    %esp,%ebp
   15e49:	83 ec 18             	sub    $0x18,%esp
   15e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
   15e4f:	88 45 f4             	mov    %al,-0xc(%ebp)
    to_sfn((char *)item->DIR_Name, name);
   15e52:	8b 45 08             	mov    0x8(%ebp),%eax
   15e55:	83 ec 08             	sub    $0x8,%esp
   15e58:	ff 75 10             	pushl  0x10(%ebp)
   15e5b:	50                   	push   %eax
   15e5c:	e8 27 ff ff ff       	call   15d88 <to_sfn>
   15e61:	83 c4 10             	add    $0x10,%esp
    item->DIR_FstClusHI = (uint16_t )(FAT_CLUSTER_INVALID >> 16);
   15e64:	8b 45 08             	mov    0x8(%ebp),%eax
   15e67:	66 c7 40 14 00 00    	movw   $0x0,0x14(%eax)
    item->DIR_FstClusL0 = (uint16_t )(FAT_CLUSTER_INVALID & 0xFFFF);
   15e6d:	8b 45 08             	mov    0x8(%ebp),%eax
   15e70:	66 c7 40 1a f8 ff    	movw   $0xfff8,0x1a(%eax)
    item->DIR_FileSize = 0;
   15e76:	8b 45 08             	mov    0x8(%ebp),%eax
   15e79:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    item->DIR_Attr = attr;
   15e80:	8b 45 08             	mov    0x8(%ebp),%eax
   15e83:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
   15e87:	88 50 0b             	mov    %dl,0xb(%eax)
    item->DIR_NTRes = 0;
   15e8a:	8b 45 08             	mov    0x8(%ebp),%eax
   15e8d:	c6 40 0c 00          	movb   $0x0,0xc(%eax)

    // 时间写固定值，简单方便
    item->DIR_CrtTime = 0;
   15e91:	8b 45 08             	mov    0x8(%ebp),%eax
   15e94:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%eax)
    item->DIR_CrtDate = 0;
   15e9a:	8b 45 08             	mov    0x8(%ebp),%eax
   15e9d:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
    item->DIR_WrtTime = item->DIR_CrtTime;
   15ea3:	8b 45 08             	mov    0x8(%ebp),%eax
   15ea6:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   15eaa:	8b 45 08             	mov    0x8(%ebp),%eax
   15ead:	66 89 50 16          	mov    %dx,0x16(%eax)
    item->DIR_WrtDate = item->DIR_CrtDate;
   15eb1:	8b 45 08             	mov    0x8(%ebp),%eax
   15eb4:	0f b7 50 10          	movzwl 0x10(%eax),%edx
   15eb8:	8b 45 08             	mov    0x8(%ebp),%eax
   15ebb:	66 89 50 18          	mov    %dx,0x18(%eax)
    item->DIR_LastAccDate = item->DIR_CrtDate;
   15ebf:	8b 45 08             	mov    0x8(%ebp),%eax
   15ec2:	0f b7 50 10          	movzwl 0x10(%eax),%edx
   15ec6:	8b 45 08             	mov    0x8(%ebp),%eax
   15ec9:	66 89 50 12          	mov    %dx,0x12(%eax)
    return 0;
   15ecd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15ed2:	c9                   	leave  
   15ed3:	c3                   	ret    

00015ed4 <diritem_get_name>:

/**
 * @brief 获取diritem中的名称，转换成合适
 */
void diritem_get_name (diritem_t * item, char * dest) {
   15ed4:	55                   	push   %ebp
   15ed5:	89 e5                	mov    %esp,%ebp
   15ed7:	83 ec 18             	sub    $0x18,%esp
    char * c = dest;
   15eda:	8b 45 0c             	mov    0xc(%ebp),%eax
   15edd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char * ext = (char *)0;
   15ee0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    kernel_memset(dest, 0, SFN_LEN + 1);     // 最多11个字符
   15ee7:	83 ec 04             	sub    $0x4,%esp
   15eea:	6a 0c                	push   $0xc
   15eec:	6a 00                	push   $0x0
   15eee:	ff 75 0c             	pushl  0xc(%ebp)
   15ef1:	e8 90 25 00 00       	call   18486 <kernel_memset>
   15ef6:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 11; i++) {
   15ef9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   15f00:	eb 43                	jmp    15f45 <diritem_get_name+0x71>
        if (item->DIR_Name[i] != ' ') {
   15f02:	8b 55 08             	mov    0x8(%ebp),%edx
   15f05:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15f08:	01 d0                	add    %edx,%eax
   15f0a:	0f b6 00             	movzbl (%eax),%eax
   15f0d:	3c 20                	cmp    $0x20,%al
   15f0f:	74 18                	je     15f29 <diritem_get_name+0x55>
            *c++ = item->DIR_Name[i];
   15f11:	8b 55 08             	mov    0x8(%ebp),%edx
   15f14:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15f17:	01 d0                	add    %edx,%eax
   15f19:	0f b6 08             	movzbl (%eax),%ecx
   15f1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f1f:	8d 50 01             	lea    0x1(%eax),%edx
   15f22:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15f25:	89 ca                	mov    %ecx,%edx
   15f27:	88 10                	mov    %dl,(%eax)
        }

        if (i == 7) {
   15f29:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
   15f2d:	75 12                	jne    15f41 <diritem_get_name+0x6d>
            ext = c;
   15f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f32:	89 45 f0             	mov    %eax,-0x10(%ebp)
            *c++ = '.';
   15f35:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f38:	8d 50 01             	lea    0x1(%eax),%edx
   15f3b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15f3e:	c6 00 2e             	movb   $0x2e,(%eax)
    for (int i = 0; i < 11; i++) {
   15f41:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   15f45:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
   15f49:	7e b7                	jle    15f02 <diritem_get_name+0x2e>
        }
    }

    // 没有扩展名的情况
    if (ext && (ext[1] == '\0')) {
   15f4b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15f4f:	74 13                	je     15f64 <diritem_get_name+0x90>
   15f51:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15f54:	83 c0 01             	add    $0x1,%eax
   15f57:	0f b6 00             	movzbl (%eax),%eax
   15f5a:	84 c0                	test   %al,%al
   15f5c:	75 06                	jne    15f64 <diritem_get_name+0x90>
        ext[0] = '\0';
   15f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15f61:	c6 00 00             	movb   $0x0,(%eax)
    }
}
   15f64:	90                   	nop
   15f65:	c9                   	leave  
   15f66:	c3                   	ret    

00015f67 <diritem_get_type>:

/**
 * @brief 获取文件类型
 */
file_type_t diritem_get_type (diritem_t * item) {
   15f67:	55                   	push   %ebp
   15f68:	89 e5                	mov    %esp,%ebp
   15f6a:	83 ec 10             	sub    $0x10,%esp
    file_type_t type = FILE_UNKNOWN;
   15f6d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 长文件名和volum id
    if (item->DIR_Attr & (DIRITEM_ATTR_VOLUME_ID | DIRITEM_ATTR_HIDDEN | DIRITEM_ATTR_SYSTEM)) {
   15f74:	8b 45 08             	mov    0x8(%ebp),%eax
   15f77:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15f7b:	0f b6 c0             	movzbl %al,%eax
   15f7e:	83 e0 0e             	and    $0xe,%eax
   15f81:	85 c0                	test   %eax,%eax
   15f83:	74 07                	je     15f8c <diritem_get_type+0x25>
        return FILE_UNKNOWN;
   15f85:	b8 00 00 00 00       	mov    $0x0,%eax
   15f8a:	eb 1d                	jmp    15fa9 <diritem_get_type+0x42>
    }

    return item->DIR_Attr & DIRITEM_ATTR_DIRECTORY ? FILE_DIR : FILE_NORMAL;
   15f8c:	8b 45 08             	mov    0x8(%ebp),%eax
   15f8f:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15f93:	0f b6 c0             	movzbl %al,%eax
   15f96:	83 e0 10             	and    $0x10,%eax
   15f99:	85 c0                	test   %eax,%eax
   15f9b:	74 07                	je     15fa4 <diritem_get_type+0x3d>
   15f9d:	b8 03 00 00 00       	mov    $0x3,%eax
   15fa2:	eb 05                	jmp    15fa9 <diritem_get_type+0x42>
   15fa4:	b8 02 00 00 00       	mov    $0x2,%eax
}
   15fa9:	c9                   	leave  
   15faa:	c3                   	ret    

00015fab <read_dir_entry>:

/**
 * @brief 在root目录中读取diritem
 */
static diritem_t * read_dir_entry (fat_t * fat, int index) {
   15fab:	55                   	push   %ebp
   15fac:	89 e5                	mov    %esp,%ebp
   15fae:	53                   	push   %ebx
   15faf:	83 ec 14             	sub    $0x14,%esp
    if ((index < 0) || (index >= fat->root_ent_cnt)) {
   15fb2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15fb6:	78 0d                	js     15fc5 <read_dir_entry+0x1a>
   15fb8:	8b 45 08             	mov    0x8(%ebp),%eax
   15fbb:	8b 50 14             	mov    0x14(%eax),%edx
   15fbe:	8b 45 0c             	mov    0xc(%ebp),%eax
   15fc1:	39 c2                	cmp    %eax,%edx
   15fc3:	77 07                	ja     15fcc <read_dir_entry+0x21>
        return (diritem_t *)0;
   15fc5:	b8 00 00 00 00       	mov    $0x0,%eax
   15fca:	eb 5a                	jmp    16026 <read_dir_entry+0x7b>
    }

    int offset = index * sizeof(diritem_t);
   15fcc:	8b 45 0c             	mov    0xc(%ebp),%eax
   15fcf:	c1 e0 05             	shl    $0x5,%eax
   15fd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int err = bread_sector(fat, fat->root_start + offset / fat->bytes_per_sec);
   15fd5:	8b 45 08             	mov    0x8(%ebp),%eax
   15fd8:	8b 48 18             	mov    0x18(%eax),%ecx
   15fdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15fde:	8b 55 08             	mov    0x8(%ebp),%edx
   15fe1:	8b 5a 0c             	mov    0xc(%edx),%ebx
   15fe4:	ba 00 00 00 00       	mov    $0x0,%edx
   15fe9:	f7 f3                	div    %ebx
   15feb:	01 c8                	add    %ecx,%eax
   15fed:	83 ec 08             	sub    $0x8,%esp
   15ff0:	50                   	push   %eax
   15ff1:	ff 75 08             	pushl  0x8(%ebp)
   15ff4:	e8 5b f9 ff ff       	call   15954 <bread_sector>
   15ff9:	83 c4 10             	add    $0x10,%esp
   15ffc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (err < 0) {
   15fff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16003:	79 07                	jns    1600c <read_dir_entry+0x61>
        return (diritem_t *)0;
   16005:	b8 00 00 00 00       	mov    $0x0,%eax
   1600a:	eb 1a                	jmp    16026 <read_dir_entry+0x7b>
    }
    return (diritem_t *)(fat->fat_buffer + offset % fat->bytes_per_sec);
   1600c:	8b 45 08             	mov    0x8(%ebp),%eax
   1600f:	8b 48 24             	mov    0x24(%eax),%ecx
   16012:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16015:	8b 55 08             	mov    0x8(%ebp),%edx
   16018:	8b 5a 0c             	mov    0xc(%edx),%ebx
   1601b:	ba 00 00 00 00       	mov    $0x0,%edx
   16020:	f7 f3                	div    %ebx
   16022:	89 d0                	mov    %edx,%eax
   16024:	01 c8                	add    %ecx,%eax
}
   16026:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16029:	c9                   	leave  
   1602a:	c3                   	ret    

0001602b <write_dir_entry>:

/**
 * @brief 写dir目录项
 */
static int write_dir_entry (fat_t * fat, diritem_t * item, int index) {
   1602b:	55                   	push   %ebp
   1602c:	89 e5                	mov    %esp,%ebp
   1602e:	53                   	push   %ebx
   1602f:	83 ec 14             	sub    $0x14,%esp
    if ((index < 0) || (index >= fat->root_ent_cnt)) {
   16032:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16036:	78 0d                	js     16045 <write_dir_entry+0x1a>
   16038:	8b 45 08             	mov    0x8(%ebp),%eax
   1603b:	8b 50 14             	mov    0x14(%eax),%edx
   1603e:	8b 45 10             	mov    0x10(%ebp),%eax
   16041:	39 c2                	cmp    %eax,%edx
   16043:	77 0a                	ja     1604f <write_dir_entry+0x24>
        return -1;
   16045:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1604a:	e9 81 00 00 00       	jmp    160d0 <write_dir_entry+0xa5>
    }

    int offset = index * sizeof(diritem_t);
   1604f:	8b 45 10             	mov    0x10(%ebp),%eax
   16052:	c1 e0 05             	shl    $0x5,%eax
   16055:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = fat->root_start + offset / fat->bytes_per_sec;
   16058:	8b 45 08             	mov    0x8(%ebp),%eax
   1605b:	8b 48 18             	mov    0x18(%eax),%ecx
   1605e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16061:	8b 55 08             	mov    0x8(%ebp),%edx
   16064:	8b 5a 0c             	mov    0xc(%edx),%ebx
   16067:	ba 00 00 00 00       	mov    $0x0,%edx
   1606c:	f7 f3                	div    %ebx
   1606e:	01 c8                	add    %ecx,%eax
   16070:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = bread_sector(fat, sector);
   16073:	83 ec 08             	sub    $0x8,%esp
   16076:	ff 75 f0             	pushl  -0x10(%ebp)
   16079:	ff 75 08             	pushl  0x8(%ebp)
   1607c:	e8 d3 f8 ff ff       	call   15954 <bread_sector>
   16081:	83 c4 10             	add    $0x10,%esp
   16084:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   16087:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1608b:	79 07                	jns    16094 <write_dir_entry+0x69>
        return -1;
   1608d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16092:	eb 3c                	jmp    160d0 <write_dir_entry+0xa5>
    }
    kernel_memcpy(fat->fat_buffer + offset % fat->bytes_per_sec, item, sizeof(diritem_t));
   16094:	8b 45 08             	mov    0x8(%ebp),%eax
   16097:	8b 48 24             	mov    0x24(%eax),%ecx
   1609a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1609d:	8b 55 08             	mov    0x8(%ebp),%edx
   160a0:	8b 5a 0c             	mov    0xc(%edx),%ebx
   160a3:	ba 00 00 00 00       	mov    $0x0,%edx
   160a8:	f7 f3                	div    %ebx
   160aa:	89 d0                	mov    %edx,%eax
   160ac:	01 c8                	add    %ecx,%eax
   160ae:	83 ec 04             	sub    $0x4,%esp
   160b1:	6a 20                	push   $0x20
   160b3:	ff 75 0c             	pushl  0xc(%ebp)
   160b6:	50                   	push   %eax
   160b7:	e8 7b 23 00 00       	call   18437 <kernel_memcpy>
   160bc:	83 c4 10             	add    $0x10,%esp
    return bwrite_secotr(fat, sector);
   160bf:	83 ec 08             	sub    $0x8,%esp
   160c2:	ff 75 f0             	pushl  -0x10(%ebp)
   160c5:	ff 75 08             	pushl  0x8(%ebp)
   160c8:	e8 e0 f8 ff ff       	call   159ad <bwrite_secotr>
   160cd:	83 c4 10             	add    $0x10,%esp
}
   160d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   160d3:	c9                   	leave  
   160d4:	c3                   	ret    

000160d5 <expand_file>:


/**
 * @brief 更改文件大小, 此时当前族号已经到达了最后的簇号
 */
static int expand_file(file_t * file, int inc_bytes) {
   160d5:	55                   	push   %ebp
   160d6:	89 e5                	mov    %esp,%ebp
   160d8:	53                   	push   %ebx
   160d9:	83 ec 24             	sub    $0x24,%esp
    fat_t * fat = (fat_t *)file->fs->data;
   160dc:	8b 45 08             	mov    0x8(%ebp),%eax
   160df:	8b 40 44             	mov    0x44(%eax),%eax
   160e2:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   160e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    int cluster_cnt;
    if ((file->size == 0) || (file->size % fat->cluster_byte_size == 0)) {
   160eb:	8b 45 08             	mov    0x8(%ebp),%eax
   160ee:	8b 40 24             	mov    0x24(%eax),%eax
   160f1:	85 c0                	test   %eax,%eax
   160f3:	74 19                	je     1610e <expand_file+0x39>
   160f5:	8b 45 08             	mov    0x8(%ebp),%eax
   160f8:	8b 40 24             	mov    0x24(%eax),%eax
   160fb:	8b 55 f0             	mov    -0x10(%ebp),%edx
   160fe:	8b 4a 20             	mov    0x20(%edx),%ecx
   16101:	ba 00 00 00 00       	mov    $0x0,%edx
   16106:	f7 f1                	div    %ecx
   16108:	89 d0                	mov    %edx,%eax
   1610a:	85 c0                	test   %eax,%eax
   1610c:	75 29                	jne    16137 <expand_file+0x62>
        // 文件为空，或者刚好达到的簇的末尾
        cluster_cnt = up2(inc_bytes, fat->cluster_byte_size) / fat->cluster_byte_size; 
   1610e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16111:	8b 50 20             	mov    0x20(%eax),%edx
   16114:	8b 45 0c             	mov    0xc(%ebp),%eax
   16117:	52                   	push   %edx
   16118:	50                   	push   %eax
   16119:	e8 1f f8 ff ff       	call   1593d <up2>
   1611e:	83 c4 08             	add    $0x8,%esp
   16121:	89 c1                	mov    %eax,%ecx
   16123:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16126:	8b 58 20             	mov    0x20(%eax),%ebx
   16129:	89 c8                	mov    %ecx,%eax
   1612b:	ba 00 00 00 00       	mov    $0x0,%edx
   16130:	f7 f3                	div    %ebx
   16132:	89 45 f4             	mov    %eax,-0xc(%ebp)
   16135:	eb 6f                	jmp    161a6 <expand_file+0xd1>
    } else {
        // 文件非空，当前簇的空闲量，如果空间够增长，则直接退出了
        // 例如：大小为2048，再扩充1024,簇大小为1024
        int cfree = fat->cluster_byte_size - (file->size % fat->cluster_byte_size);
   16137:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1613a:	8b 48 20             	mov    0x20(%eax),%ecx
   1613d:	8b 45 08             	mov    0x8(%ebp),%eax
   16140:	8b 40 24             	mov    0x24(%eax),%eax
   16143:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16146:	8b 5a 20             	mov    0x20(%edx),%ebx
   16149:	ba 00 00 00 00       	mov    $0x0,%edx
   1614e:	f7 f3                	div    %ebx
   16150:	89 d0                	mov    %edx,%eax
   16152:	29 c1                	sub    %eax,%ecx
   16154:	89 c8                	mov    %ecx,%eax
   16156:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (cfree >= inc_bytes) {
   16159:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1615c:	3b 45 0c             	cmp    0xc(%ebp),%eax
   1615f:	7c 1b                	jl     1617c <expand_file+0xa7>
            file->size += inc_bytes;
   16161:	8b 45 08             	mov    0x8(%ebp),%eax
   16164:	8b 50 24             	mov    0x24(%eax),%edx
   16167:	8b 45 0c             	mov    0xc(%ebp),%eax
   1616a:	01 c2                	add    %eax,%edx
   1616c:	8b 45 08             	mov    0x8(%ebp),%eax
   1616f:	89 50 24             	mov    %edx,0x24(%eax)
            return 0;
   16172:	b8 00 00 00 00       	mov    $0x0,%eax
   16177:	e9 cd 00 00 00       	jmp    16249 <expand_file+0x174>
        }

        // 不够，则分配新簇用来放额外的空间
        cluster_cnt = up2(inc_bytes - cfree, fat->cluster_byte_size) / fat->cluster_byte_size; 
   1617c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1617f:	8b 40 20             	mov    0x20(%eax),%eax
   16182:	8b 55 0c             	mov    0xc(%ebp),%edx
   16185:	2b 55 ec             	sub    -0x14(%ebp),%edx
   16188:	50                   	push   %eax
   16189:	52                   	push   %edx
   1618a:	e8 ae f7 ff ff       	call   1593d <up2>
   1618f:	83 c4 08             	add    $0x8,%esp
   16192:	89 c1                	mov    %eax,%ecx
   16194:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16197:	8b 58 20             	mov    0x20(%eax),%ebx
   1619a:	89 c8                	mov    %ecx,%eax
   1619c:	ba 00 00 00 00       	mov    $0x0,%edx
   161a1:	f7 f3                	div    %ebx
   161a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    cluster_t start = cluster_alloc_free(fat, cluster_cnt);
   161a6:	83 ec 08             	sub    $0x8,%esp
   161a9:	ff 75 f4             	pushl  -0xc(%ebp)
   161ac:	ff 75 f0             	pushl  -0x10(%ebp)
   161af:	e8 a7 fa ff ff       	call   15c5b <cluster_alloc_free>
   161b4:	83 c4 10             	add    $0x10,%esp
   161b7:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
    if (!cluster_is_valid(start)) {
   161bb:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
   161bf:	83 ec 0c             	sub    $0xc,%esp
   161c2:	50                   	push   %eax
   161c3:	e8 23 f8 ff ff       	call   159eb <cluster_is_valid>
   161c8:	83 c4 10             	add    $0x10,%esp
   161cb:	85 c0                	test   %eax,%eax
   161cd:	75 17                	jne    161e6 <expand_file+0x111>
        log_printf("no cluster for file write");
   161cf:	83 ec 0c             	sub    $0xc,%esp
   161d2:	68 fa 9a 01 00       	push   $0x19afa
   161d7:	e8 54 28 00 00       	call   18a30 <log_printf>
   161dc:	83 c4 10             	add    $0x10,%esp
        return -1;
   161df:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   161e4:	eb 63                	jmp    16249 <expand_file+0x174>
    }

    // 在文件关闭时，回写
    if (!cluster_is_valid(file->sblk)) {
   161e6:	8b 45 08             	mov    0x8(%ebp),%eax
   161e9:	8b 40 34             	mov    0x34(%eax),%eax
   161ec:	0f b7 c0             	movzwl %ax,%eax
   161ef:	83 ec 0c             	sub    $0xc,%esp
   161f2:	50                   	push   %eax
   161f3:	e8 f3 f7 ff ff       	call   159eb <cluster_is_valid>
   161f8:	83 c4 10             	add    $0x10,%esp
   161fb:	85 c0                	test   %eax,%eax
   161fd:	75 18                	jne    16217 <expand_file+0x142>
        file->cblk = file->sblk = start;
   161ff:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   16203:	8b 45 08             	mov    0x8(%ebp),%eax
   16206:	89 50 34             	mov    %edx,0x34(%eax)
   16209:	8b 45 08             	mov    0x8(%ebp),%eax
   1620c:	8b 50 34             	mov    0x34(%eax),%edx
   1620f:	8b 45 08             	mov    0x8(%ebp),%eax
   16212:	89 50 38             	mov    %edx,0x38(%eax)
   16215:	eb 2d                	jmp    16244 <expand_file+0x16f>
    } else {
        // 建立链接关系
        int err = cluster_set_next(fat, file->cblk, start);
   16217:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   1621b:	8b 45 08             	mov    0x8(%ebp),%eax
   1621e:	8b 40 38             	mov    0x38(%eax),%eax
   16221:	0f b7 c0             	movzwl %ax,%eax
   16224:	83 ec 04             	sub    $0x4,%esp
   16227:	52                   	push   %edx
   16228:	50                   	push   %eax
   16229:	ff 75 f0             	pushl  -0x10(%ebp)
   1622c:	e8 a1 f8 ff ff       	call   15ad2 <cluster_set_next>
   16231:	83 c4 10             	add    $0x10,%esp
   16234:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   16237:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1623b:	79 07                	jns    16244 <expand_file+0x16f>
            return -1;
   1623d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16242:	eb 05                	jmp    16249 <expand_file+0x174>
        }
    }

    return 0;
   16244:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16249:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1624c:	c9                   	leave  
   1624d:	c3                   	ret    

0001624e <move_file_pos>:

/**
 * @brief 移动文件指针
 */
static int move_file_pos(file_t* file, fat_t * fat, uint32_t move_bytes, int expand) {
   1624e:	55                   	push   %ebp
   1624f:	89 e5                	mov    %esp,%ebp
   16251:	83 ec 18             	sub    $0x18,%esp
	uint32_t c_offset = file->pos % fat->cluster_byte_size;
   16254:	8b 45 08             	mov    0x8(%ebp),%eax
   16257:	8b 40 30             	mov    0x30(%eax),%eax
   1625a:	89 c2                	mov    %eax,%edx
   1625c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1625f:	8b 48 20             	mov    0x20(%eax),%ecx
   16262:	89 d0                	mov    %edx,%eax
   16264:	ba 00 00 00 00       	mov    $0x0,%edx
   16269:	f7 f1                	div    %ecx
   1626b:	89 55 f0             	mov    %edx,-0x10(%ebp)

    // 跨簇，则调整curr_cluster。注意，如果已经是最后一个簇了，则curr_cluster不会调整
	if (c_offset + move_bytes >= fat->cluster_byte_size) {
   1626e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16271:	8b 45 10             	mov    0x10(%ebp),%eax
   16274:	01 c2                	add    %eax,%edx
   16276:	8b 45 0c             	mov    0xc(%ebp),%eax
   16279:	8b 40 20             	mov    0x20(%eax),%eax
   1627c:	39 c2                	cmp    %eax,%edx
   1627e:	72 74                	jb     162f4 <move_file_pos+0xa6>
        cluster_t next = cluster_get_next(fat, file->cblk);
   16280:	8b 45 08             	mov    0x8(%ebp),%eax
   16283:	8b 40 38             	mov    0x38(%eax),%eax
   16286:	0f b7 c0             	movzwl %ax,%eax
   16289:	83 ec 08             	sub    $0x8,%esp
   1628c:	50                   	push   %eax
   1628d:	ff 75 0c             	pushl  0xc(%ebp)
   16290:	e8 7f f7 ff ff       	call   15a14 <cluster_get_next>
   16295:	83 c4 10             	add    $0x10,%esp
   16298:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
		if ((next == FAT_CLUSTER_INVALID) && expand) {
   1629c:	66 83 7d f6 f8       	cmpw   $0xfff8,-0xa(%ebp)
   162a1:	75 47                	jne    162ea <move_file_pos+0x9c>
   162a3:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   162a7:	74 41                	je     162ea <move_file_pos+0x9c>
            int err = expand_file(file, fat->cluster_byte_size);
   162a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   162ac:	8b 40 20             	mov    0x20(%eax),%eax
   162af:	83 ec 08             	sub    $0x8,%esp
   162b2:	50                   	push   %eax
   162b3:	ff 75 08             	pushl  0x8(%ebp)
   162b6:	e8 1a fe ff ff       	call   160d5 <expand_file>
   162bb:	83 c4 10             	add    $0x10,%esp
   162be:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (err < 0) {
   162c1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   162c5:	79 07                	jns    162ce <move_file_pos+0x80>
                return -1;
   162c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   162cc:	eb 40                	jmp    1630e <move_file_pos+0xc0>
            }

            next = cluster_get_next(fat, file->cblk);
   162ce:	8b 45 08             	mov    0x8(%ebp),%eax
   162d1:	8b 40 38             	mov    0x38(%eax),%eax
   162d4:	0f b7 c0             	movzwl %ax,%eax
   162d7:	83 ec 08             	sub    $0x8,%esp
   162da:	50                   	push   %eax
   162db:	ff 75 0c             	pushl  0xc(%ebp)
   162de:	e8 31 f7 ff ff       	call   15a14 <cluster_get_next>
   162e3:	83 c4 10             	add    $0x10,%esp
   162e6:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        }

        file->cblk = next;
   162ea:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   162ee:	8b 45 08             	mov    0x8(%ebp),%eax
   162f1:	89 50 38             	mov    %edx,0x38(%eax)
	}

	file->pos += move_bytes;
   162f4:	8b 45 08             	mov    0x8(%ebp),%eax
   162f7:	8b 40 30             	mov    0x30(%eax),%eax
   162fa:	89 c2                	mov    %eax,%edx
   162fc:	8b 45 10             	mov    0x10(%ebp),%eax
   162ff:	01 d0                	add    %edx,%eax
   16301:	89 c2                	mov    %eax,%edx
   16303:	8b 45 08             	mov    0x8(%ebp),%eax
   16306:	89 50 30             	mov    %edx,0x30(%eax)
	return 0;
   16309:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1630e:	c9                   	leave  
   1630f:	c3                   	ret    

00016310 <fatfs_mount>:

/**
 * @brief 挂载fat文件系统
 */
int fatfs_mount (struct _fs_t * fs, int dev_major, int dev_minor) {
   16310:	55                   	push   %ebp
   16311:	89 e5                	mov    %esp,%ebp
   16313:	83 ec 18             	sub    $0x18,%esp
    // 打开设备
    int dev_id = dev_open(dev_major, dev_minor, (void *)0);
   16316:	83 ec 04             	sub    $0x4,%esp
   16319:	6a 00                	push   $0x0
   1631b:	ff 75 10             	pushl  0x10(%ebp)
   1631e:	ff 75 0c             	pushl  0xc(%ebp)
   16321:	e8 62 db ff ff       	call   13e88 <dev_open>
   16326:	83 c4 10             	add    $0x10,%esp
   16329:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (dev_id < 0) {
   1632c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16330:	79 20                	jns    16352 <fatfs_mount+0x42>
        log_printf("open disk failed. major: %x, minor: %x", dev_major, dev_minor);
   16332:	83 ec 04             	sub    $0x4,%esp
   16335:	ff 75 10             	pushl  0x10(%ebp)
   16338:	ff 75 0c             	pushl  0xc(%ebp)
   1633b:	68 14 9b 01 00       	push   $0x19b14
   16340:	e8 eb 26 00 00       	call   18a30 <log_printf>
   16345:	83 c4 10             	add    $0x10,%esp
        return -1;
   16348:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1634d:	e9 fb 01 00 00       	jmp    1654d <fatfs_mount+0x23d>
    }

    // 读取dbr扇区并进行检查
    dbr_t * dbr = (dbr_t *)memory_alloc_page();
   16352:	e8 1b a9 ff ff       	call   10c72 <memory_alloc_page>
   16357:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!dbr) {
   1635a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1635e:	75 15                	jne    16375 <fatfs_mount+0x65>
        log_printf("mount fat failed: can't alloc buf.");
   16360:	83 ec 0c             	sub    $0xc,%esp
   16363:	68 3c 9b 01 00       	push   $0x19b3c
   16368:	e8 c3 26 00 00       	call   18a30 <log_printf>
   1636d:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   16370:	e9 b0 01 00 00       	jmp    16525 <fatfs_mount+0x215>
    }

    // 这里需要使用查询的方式来读取，因为此时多进程还没有跑起来，只在初始化阶段？
    int cnt = dev_read(dev_id, 0, (char *)dbr, 1);
   16375:	6a 01                	push   $0x1
   16377:	ff 75 f0             	pushl  -0x10(%ebp)
   1637a:	6a 00                	push   $0x0
   1637c:	ff 75 f4             	pushl  -0xc(%ebp)
   1637f:	e8 50 dc ff ff       	call   13fd4 <dev_read>
   16384:	83 c4 10             	add    $0x10,%esp
   16387:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (cnt < 1) {
   1638a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1638e:	7f 15                	jg     163a5 <fatfs_mount+0x95>
        log_printf("read dbr failed.");
   16390:	83 ec 0c             	sub    $0xc,%esp
   16393:	68 5f 9b 01 00       	push   $0x19b5f
   16398:	e8 93 26 00 00       	call   18a30 <log_printf>
   1639d:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   163a0:	e9 80 01 00 00       	jmp    16525 <fatfs_mount+0x215>
    }

    // 解析DBR参数，解析出有用的参数
    fat_t * fat = &fs->fat_data;
   163a5:	8b 45 08             	mov    0x8(%ebp),%eax
   163a8:	05 18 02 00 00       	add    $0x218,%eax
   163ad:	89 45 e8             	mov    %eax,-0x18(%ebp)
    fat->fat_buffer = (uint8_t *)dbr;
   163b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163b3:	8b 55 f0             	mov    -0x10(%ebp),%edx
   163b6:	89 50 24             	mov    %edx,0x24(%eax)
    fat->bytes_per_sec = dbr->BPB_BytsPerSec;
   163b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163bc:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   163c0:	0f b7 d0             	movzwl %ax,%edx
   163c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163c6:	89 50 0c             	mov    %edx,0xc(%eax)
    fat->tbl_start = dbr->BPB_RsvdSecCnt;
   163c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163cc:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   163d0:	0f b7 d0             	movzwl %ax,%edx
   163d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163d6:	89 10                	mov    %edx,(%eax)
    fat->tbl_sectors = dbr->BPB_FATSz16;
   163d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163db:	0f b7 40 16          	movzwl 0x16(%eax),%eax
   163df:	0f b7 d0             	movzwl %ax,%edx
   163e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163e5:	89 50 08             	mov    %edx,0x8(%eax)
    fat->tbl_cnt = dbr->BPB_NumFATs;
   163e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163eb:	0f b6 40 10          	movzbl 0x10(%eax),%eax
   163ef:	0f b6 d0             	movzbl %al,%edx
   163f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163f5:	89 50 04             	mov    %edx,0x4(%eax)
    fat->root_ent_cnt = dbr->BPB_RootEntCnt;
   163f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163fb:	0f b7 40 11          	movzwl 0x11(%eax),%eax
   163ff:	0f b7 d0             	movzwl %ax,%edx
   16402:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16405:	89 50 14             	mov    %edx,0x14(%eax)
    fat->sec_per_cluster = dbr->BPB_SecPerClus;
   16408:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1640b:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1640f:	0f b6 d0             	movzbl %al,%edx
   16412:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16415:	89 50 10             	mov    %edx,0x10(%eax)
    fat->cluster_byte_size = fat->sec_per_cluster * dbr->BPB_BytsPerSec;
   16418:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1641b:	8b 50 10             	mov    0x10(%eax),%edx
   1641e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16421:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   16425:	0f b7 c0             	movzwl %ax,%eax
   16428:	0f af d0             	imul   %eax,%edx
   1642b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1642e:	89 50 20             	mov    %edx,0x20(%eax)
	fat->root_start = fat->tbl_start + fat->tbl_sectors * fat->tbl_cnt;
   16431:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16434:	8b 10                	mov    (%eax),%edx
   16436:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16439:	8b 48 08             	mov    0x8(%eax),%ecx
   1643c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1643f:	8b 40 04             	mov    0x4(%eax),%eax
   16442:	0f af c1             	imul   %ecx,%eax
   16445:	01 c2                	add    %eax,%edx
   16447:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1644a:	89 50 18             	mov    %edx,0x18(%eax)
    fat->data_start = fat->root_start + fat->root_ent_cnt * 32 / SECTOR_SIZE;
   1644d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16450:	8b 50 18             	mov    0x18(%eax),%edx
   16453:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16456:	8b 40 14             	mov    0x14(%eax),%eax
   16459:	c1 e0 05             	shl    $0x5,%eax
   1645c:	c1 e8 09             	shr    $0x9,%eax
   1645f:	01 c2                	add    %eax,%edx
   16461:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16464:	89 50 1c             	mov    %edx,0x1c(%eax)
    fat->curr_sector = -1;
   16467:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1646a:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    fat->fs = fs;
   16471:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16474:	8b 55 08             	mov    0x8(%ebp),%edx
   16477:	89 50 2c             	mov    %edx,0x2c(%eax)
    mutex_init(&fat->mutex);
   1647a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1647d:	83 c0 30             	add    $0x30,%eax
   16480:	83 ec 0c             	sub    $0xc,%esp
   16483:	50                   	push   %eax
   16484:	e8 b2 18 00 00       	call   17d3b <mutex_init>
   16489:	83 c4 10             	add    $0x10,%esp
    fs->mutex = &fat->mutex;
   1648c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1648f:	8d 50 30             	lea    0x30(%eax),%edx
   16492:	8b 45 08             	mov    0x8(%ebp),%eax
   16495:	89 90 5c 02 00 00    	mov    %edx,0x25c(%eax)

	// 简单检查是否是fat16文件系统, 可以在下边做进一步的更多检查。此处只检查做一点点检查
	if (fat->tbl_cnt != 2) {
   1649b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1649e:	8b 40 04             	mov    0x4(%eax),%eax
   164a1:	83 f8 02             	cmp    $0x2,%eax
   164a4:	74 18                	je     164be <fatfs_mount+0x1ae>
        log_printf("fat table num error, major: %x, minor: %x", dev_major, dev_minor);
   164a6:	83 ec 04             	sub    $0x4,%esp
   164a9:	ff 75 10             	pushl  0x10(%ebp)
   164ac:	ff 75 0c             	pushl  0xc(%ebp)
   164af:	68 70 9b 01 00       	push   $0x19b70
   164b4:	e8 77 25 00 00       	call   18a30 <log_printf>
   164b9:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   164bc:	eb 67                	jmp    16525 <fatfs_mount+0x215>
	}

    if (kernel_memcmp(dbr->BS_FileSysType, "FAT16", 5) != 0) {
   164be:	8b 45 f0             	mov    -0x10(%ebp),%eax
   164c1:	83 c0 36             	add    $0x36,%eax
   164c4:	83 ec 04             	sub    $0x4,%esp
   164c7:	6a 05                	push   $0x5
   164c9:	68 9a 9b 01 00       	push   $0x19b9a
   164ce:	50                   	push   %eax
   164cf:	e8 f3 1f 00 00       	call   184c7 <kernel_memcmp>
   164d4:	83 c4 10             	add    $0x10,%esp
   164d7:	85 c0                	test   %eax,%eax
   164d9:	74 18                	je     164f3 <fatfs_mount+0x1e3>
        log_printf("not a fat16 file system, major: %x, minor: %x", dev_major, dev_minor);
   164db:	83 ec 04             	sub    $0x4,%esp
   164de:	ff 75 10             	pushl  0x10(%ebp)
   164e1:	ff 75 0c             	pushl  0xc(%ebp)
   164e4:	68 a0 9b 01 00       	push   $0x19ba0
   164e9:	e8 42 25 00 00       	call   18a30 <log_printf>
   164ee:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   164f1:	eb 32                	jmp    16525 <fatfs_mount+0x215>
    }

    // 记录相关的打开信息
    fs->type = FS_FAT16;
   164f3:	8b 45 08             	mov    0x8(%ebp),%eax
   164f6:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%eax)
   164fd:	00 00 00 
    fs->data = &fs->fat_data;
   16500:	8b 45 08             	mov    0x8(%ebp),%eax
   16503:	8d 90 18 02 00 00    	lea    0x218(%eax),%edx
   16509:	8b 45 08             	mov    0x8(%ebp),%eax
   1650c:	89 90 08 02 00 00    	mov    %edx,0x208(%eax)
    fs->dev_id = dev_id;
   16512:	8b 45 08             	mov    0x8(%ebp),%eax
   16515:	8b 55 f4             	mov    -0xc(%ebp),%edx
   16518:	89 90 0c 02 00 00    	mov    %edx,0x20c(%eax)
    return 0;
   1651e:	b8 00 00 00 00       	mov    $0x0,%eax
   16523:	eb 28                	jmp    1654d <fatfs_mount+0x23d>

mount_failed:
    if (dbr) {
   16525:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16529:	74 0f                	je     1653a <fatfs_mount+0x22a>
        memory_free_page((uint32_t)dbr);
   1652b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1652e:	83 ec 0c             	sub    $0xc,%esp
   16531:	50                   	push   %eax
   16532:	e8 55 a7 ff ff       	call   10c8c <memory_free_page>
   16537:	83 c4 10             	add    $0x10,%esp
    }
    dev_close(dev_id);
   1653a:	83 ec 0c             	sub    $0xc,%esp
   1653d:	ff 75 f4             	pushl  -0xc(%ebp)
   16540:	e8 73 db ff ff       	call   140b8 <dev_close>
   16545:	83 c4 10             	add    $0x10,%esp
    return -1;
   16548:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1654d:	c9                   	leave  
   1654e:	c3                   	ret    

0001654f <fatfs_unmount>:

/**
 * @brief 卸载fatfs文件系统
 */
void fatfs_unmount (struct _fs_t * fs) {
   1654f:	55                   	push   %ebp
   16550:	89 e5                	mov    %esp,%ebp
   16552:	83 ec 18             	sub    $0x18,%esp
    fat_t * fat = (fat_t *)fs->data;
   16555:	8b 45 08             	mov    0x8(%ebp),%eax
   16558:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   1655e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    dev_close(fs->dev_id);
   16561:	8b 45 08             	mov    0x8(%ebp),%eax
   16564:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   1656a:	83 ec 0c             	sub    $0xc,%esp
   1656d:	50                   	push   %eax
   1656e:	e8 45 db ff ff       	call   140b8 <dev_close>
   16573:	83 c4 10             	add    $0x10,%esp
    memory_free_page((uint32_t)fat->fat_buffer);
   16576:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16579:	8b 40 24             	mov    0x24(%eax),%eax
   1657c:	83 ec 0c             	sub    $0xc,%esp
   1657f:	50                   	push   %eax
   16580:	e8 07 a7 ff ff       	call   10c8c <memory_free_page>
   16585:	83 c4 10             	add    $0x10,%esp
}
   16588:	90                   	nop
   16589:	c9                   	leave  
   1658a:	c3                   	ret    

0001658b <read_from_diritem>:

/**
 * @brief 从diritem中读取相应的文件信息
 */
static void read_from_diritem (fat_t * fat, file_t * file, diritem_t * item, int index) {
   1658b:	55                   	push   %ebp
   1658c:	89 e5                	mov    %esp,%ebp
    file->type = diritem_get_type(item);
   1658e:	ff 75 10             	pushl  0x10(%ebp)
   16591:	e8 d1 f9 ff ff       	call   15f67 <diritem_get_type>
   16596:	83 c4 04             	add    $0x4,%esp
   16599:	89 c2                	mov    %eax,%edx
   1659b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1659e:	89 50 20             	mov    %edx,0x20(%eax)
    file->size = (int)item->DIR_FileSize;
   165a1:	8b 45 10             	mov    0x10(%ebp),%eax
   165a4:	8b 50 1c             	mov    0x1c(%eax),%edx
   165a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   165aa:	89 50 24             	mov    %edx,0x24(%eax)
    file->pos = 0;
   165ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   165b0:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    file->sblk = (item->DIR_FstClusHI << 16) | item->DIR_FstClusL0;
   165b7:	8b 45 10             	mov    0x10(%ebp),%eax
   165ba:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   165be:	0f b7 c0             	movzwl %ax,%eax
   165c1:	c1 e0 10             	shl    $0x10,%eax
   165c4:	89 c2                	mov    %eax,%edx
   165c6:	8b 45 10             	mov    0x10(%ebp),%eax
   165c9:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   165cd:	0f b7 c0             	movzwl %ax,%eax
   165d0:	09 c2                	or     %eax,%edx
   165d2:	8b 45 0c             	mov    0xc(%ebp),%eax
   165d5:	89 50 34             	mov    %edx,0x34(%eax)
    file->cblk = file->sblk;
   165d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   165db:	8b 50 34             	mov    0x34(%eax),%edx
   165de:	8b 45 0c             	mov    0xc(%ebp),%eax
   165e1:	89 50 38             	mov    %edx,0x38(%eax)
    file->p_index = index;
   165e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   165e7:	8b 55 14             	mov    0x14(%ebp),%edx
   165ea:	89 50 3c             	mov    %edx,0x3c(%eax)
}
   165ed:	90                   	nop
   165ee:	c9                   	leave  
   165ef:	c3                   	ret    

000165f0 <fatfs_open>:

/**
 * @brief 打开指定的文件
 */
int fatfs_open (struct _fs_t * fs, const char * path, file_t * file) {
   165f0:	55                   	push   %ebp
   165f1:	89 e5                	mov    %esp,%ebp
   165f3:	83 ec 48             	sub    $0x48,%esp
    fat_t * fat = (fat_t *)fs->data;
   165f6:	8b 45 08             	mov    0x8(%ebp),%eax
   165f9:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   165ff:	89 45 e8             	mov    %eax,-0x18(%ebp)
    diritem_t * file_item = (diritem_t *)0;
   16602:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int p_index = -1;
   16609:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)

    // 遍历根目录的数据区，找到已经存在的匹配项
    for (int i = 0; i < fat->root_ent_cnt; i++) {
   16610:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   16617:	eb 6f                	jmp    16688 <fatfs_open+0x98>
        diritem_t * item = read_dir_entry(fat, i);
   16619:	83 ec 08             	sub    $0x8,%esp
   1661c:	ff 75 ec             	pushl  -0x14(%ebp)
   1661f:	ff 75 e8             	pushl  -0x18(%ebp)
   16622:	e8 84 f9 ff ff       	call   15fab <read_dir_entry>
   16627:	83 c4 10             	add    $0x10,%esp
   1662a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (item == (diritem_t *)0) {
   1662d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16631:	75 0a                	jne    1663d <fatfs_open+0x4d>
            return -1;
   16633:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16638:	e9 3f 01 00 00       	jmp    1677c <fatfs_open+0x18c>
        }

         // 结束项，不需要再扫描了，同时index也不能往前走
        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   1663d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   16640:	0f b6 00             	movzbl (%eax),%eax
   16643:	84 c0                	test   %al,%al
   16645:	75 08                	jne    1664f <fatfs_open+0x5f>
            p_index = i;
   16647:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1664a:	89 45 f0             	mov    %eax,-0x10(%ebp)
            break;
   1664d:	eb 46                	jmp    16695 <fatfs_open+0xa5>
        }

        // 只显示普通文件和目录，其它的不显示
        if (item->DIR_Name[0] == DIRITEM_NAME_FREE) {
   1664f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   16652:	0f b6 00             	movzbl (%eax),%eax
   16655:	3c e5                	cmp    $0xe5,%al
   16657:	75 08                	jne    16661 <fatfs_open+0x71>
            p_index = i;
   16659:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1665c:	89 45 f0             	mov    %eax,-0x10(%ebp)
            continue;
   1665f:	eb 23                	jmp    16684 <fatfs_open+0x94>
        }

        // 找到要打开的目录
        if (diritem_name_match(item, path)) {
   16661:	83 ec 08             	sub    $0x8,%esp
   16664:	ff 75 0c             	pushl  0xc(%ebp)
   16667:	ff 75 e4             	pushl  -0x1c(%ebp)
   1666a:	e8 a0 f7 ff ff       	call   15e0f <diritem_name_match>
   1666f:	83 c4 10             	add    $0x10,%esp
   16672:	85 c0                	test   %eax,%eax
   16674:	74 0e                	je     16684 <fatfs_open+0x94>
            file_item = item;
   16676:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   16679:	89 45 f4             	mov    %eax,-0xc(%ebp)
            p_index = i;
   1667c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1667f:	89 45 f0             	mov    %eax,-0x10(%ebp)
            break;
   16682:	eb 11                	jmp    16695 <fatfs_open+0xa5>
    for (int i = 0; i < fat->root_ent_cnt; i++) {
   16684:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   16688:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1668b:	8b 50 14             	mov    0x14(%eax),%edx
   1668e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16691:	39 c2                	cmp    %eax,%edx
   16693:	77 84                	ja     16619 <fatfs_open+0x29>
        }
    }

    if (file_item) {
   16695:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16699:	74 62                	je     166fd <fatfs_open+0x10d>
        read_from_diritem(fat, file, file_item, p_index);
   1669b:	ff 75 f0             	pushl  -0x10(%ebp)
   1669e:	ff 75 f4             	pushl  -0xc(%ebp)
   166a1:	ff 75 10             	pushl  0x10(%ebp)
   166a4:	ff 75 e8             	pushl  -0x18(%ebp)
   166a7:	e8 df fe ff ff       	call   1658b <read_from_diritem>
   166ac:	83 c4 10             	add    $0x10,%esp

        // 如果要截断，则清空
        if (file->mode & O_TRUNC) {
   166af:	8b 45 10             	mov    0x10(%ebp),%eax
   166b2:	8b 40 40             	mov    0x40(%eax),%eax
   166b5:	25 00 04 00 00       	and    $0x400,%eax
   166ba:	85 c0                	test   %eax,%eax
   166bc:	74 38                	je     166f6 <fatfs_open+0x106>
            cluster_free_chain(fat, file->sblk);
   166be:	8b 45 10             	mov    0x10(%ebp),%eax
   166c1:	8b 40 34             	mov    0x34(%eax),%eax
   166c4:	0f b7 c0             	movzwl %ax,%eax
   166c7:	83 ec 08             	sub    $0x8,%esp
   166ca:	50                   	push   %eax
   166cb:	ff 75 e8             	pushl  -0x18(%ebp)
   166ce:	e8 2e f5 ff ff       	call   15c01 <cluster_free_chain>
   166d3:	83 c4 10             	add    $0x10,%esp
            file->cblk = file->sblk = FAT_CLUSTER_INVALID;
   166d6:	8b 45 10             	mov    0x10(%ebp),%eax
   166d9:	c7 40 34 f8 ff 00 00 	movl   $0xfff8,0x34(%eax)
   166e0:	8b 45 10             	mov    0x10(%ebp),%eax
   166e3:	8b 50 34             	mov    0x34(%eax),%edx
   166e6:	8b 45 10             	mov    0x10(%ebp),%eax
   166e9:	89 50 38             	mov    %edx,0x38(%eax)
            file->size = 0;
   166ec:	8b 45 10             	mov    0x10(%ebp),%eax
   166ef:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
        }
        return 0;
   166f6:	b8 00 00 00 00       	mov    $0x0,%eax
   166fb:	eb 7f                	jmp    1677c <fatfs_open+0x18c>
    } else if ((file->mode & O_CREAT) && (p_index >= 0)) {
   166fd:	8b 45 10             	mov    0x10(%ebp),%eax
   16700:	8b 40 40             	mov    0x40(%eax),%eax
   16703:	25 00 02 00 00       	and    $0x200,%eax
   16708:	85 c0                	test   %eax,%eax
   1670a:	74 6b                	je     16777 <fatfs_open+0x187>
   1670c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16710:	78 65                	js     16777 <fatfs_open+0x187>
        // 创建一个空闲的diritem项
        diritem_t item;
        diritem_init(&item, 0, path);
   16712:	83 ec 04             	sub    $0x4,%esp
   16715:	ff 75 0c             	pushl  0xc(%ebp)
   16718:	6a 00                	push   $0x0
   1671a:	8d 45 c0             	lea    -0x40(%ebp),%eax
   1671d:	50                   	push   %eax
   1671e:	e8 23 f7 ff ff       	call   15e46 <diritem_init>
   16723:	83 c4 10             	add    $0x10,%esp
        int err = write_dir_entry(fat, &item, p_index);
   16726:	83 ec 04             	sub    $0x4,%esp
   16729:	ff 75 f0             	pushl  -0x10(%ebp)
   1672c:	8d 45 c0             	lea    -0x40(%ebp),%eax
   1672f:	50                   	push   %eax
   16730:	ff 75 e8             	pushl  -0x18(%ebp)
   16733:	e8 f3 f8 ff ff       	call   1602b <write_dir_entry>
   16738:	83 c4 10             	add    $0x10,%esp
   1673b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0) {
   1673e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   16742:	79 17                	jns    1675b <fatfs_open+0x16b>
            log_printf("create file failed.");
   16744:	83 ec 0c             	sub    $0xc,%esp
   16747:	68 ce 9b 01 00       	push   $0x19bce
   1674c:	e8 df 22 00 00       	call   18a30 <log_printf>
   16751:	83 c4 10             	add    $0x10,%esp
            return -1;
   16754:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16759:	eb 21                	jmp    1677c <fatfs_open+0x18c>
        }

        read_from_diritem(fat, file, &item, p_index);
   1675b:	ff 75 f0             	pushl  -0x10(%ebp)
   1675e:	8d 45 c0             	lea    -0x40(%ebp),%eax
   16761:	50                   	push   %eax
   16762:	ff 75 10             	pushl  0x10(%ebp)
   16765:	ff 75 e8             	pushl  -0x18(%ebp)
   16768:	e8 1e fe ff ff       	call   1658b <read_from_diritem>
   1676d:	83 c4 10             	add    $0x10,%esp
        return 0;
   16770:	b8 00 00 00 00       	mov    $0x0,%eax
   16775:	eb 05                	jmp    1677c <fatfs_open+0x18c>
    }

    return -1;
   16777:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1677c:	c9                   	leave  
   1677d:	c3                   	ret    

0001677e <fatfs_read>:

/**
 * @brief 读了文件
 */
int fatfs_read (char * buf, int size, file_t * file) {
   1677e:	55                   	push   %ebp
   1677f:	89 e5                	mov    %esp,%ebp
   16781:	53                   	push   %ebx
   16782:	83 ec 34             	sub    $0x34,%esp
    fat_t * fat = (fat_t *)file->fs->data;
   16785:	8b 45 10             	mov    0x10(%ebp),%eax
   16788:	8b 40 44             	mov    0x44(%eax),%eax
   1678b:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16791:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 调整读取量，不要超过文件总量
    uint32_t nbytes = size;
   16794:	8b 45 0c             	mov    0xc(%ebp),%eax
   16797:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (file->pos + nbytes > file->size) {
   1679a:	8b 45 10             	mov    0x10(%ebp),%eax
   1679d:	8b 40 30             	mov    0x30(%eax),%eax
   167a0:	89 c2                	mov    %eax,%edx
   167a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   167a5:	01 c2                	add    %eax,%edx
   167a7:	8b 45 10             	mov    0x10(%ebp),%eax
   167aa:	8b 40 24             	mov    0x24(%eax),%eax
   167ad:	39 c2                	cmp    %eax,%edx
   167af:	76 13                	jbe    167c4 <fatfs_read+0x46>
        nbytes = file->size - file->pos;
   167b1:	8b 45 10             	mov    0x10(%ebp),%eax
   167b4:	8b 50 24             	mov    0x24(%eax),%edx
   167b7:	8b 45 10             	mov    0x10(%ebp),%eax
   167ba:	8b 40 30             	mov    0x30(%eax),%eax
   167bd:	29 c2                	sub    %eax,%edx
   167bf:	89 d0                	mov    %edx,%eax
   167c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    uint32_t total_read = 0;
   167c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (nbytes > 0) {
   167cb:	e9 41 01 00 00       	jmp    16911 <fatfs_read+0x193>
        uint32_t curr_read = nbytes;
   167d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   167d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32_t cluster_offset = file->pos % fat->cluster_byte_size;
   167d6:	8b 45 10             	mov    0x10(%ebp),%eax
   167d9:	8b 40 30             	mov    0x30(%eax),%eax
   167dc:	89 c2                	mov    %eax,%edx
   167de:	8b 45 e8             	mov    -0x18(%ebp),%eax
   167e1:	8b 48 20             	mov    0x20(%eax),%ecx
   167e4:	89 d0                	mov    %edx,%eax
   167e6:	ba 00 00 00 00       	mov    $0x0,%edx
   167eb:	f7 f1                	div    %ecx
   167ed:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        uint32_t start_sector = fat->data_start + (file->cblk - 2)* fat->sec_per_cluster;  // 从2开始
   167f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   167f3:	8b 50 1c             	mov    0x1c(%eax),%edx
   167f6:	8b 45 10             	mov    0x10(%ebp),%eax
   167f9:	8b 40 38             	mov    0x38(%eax),%eax
   167fc:	83 e8 02             	sub    $0x2,%eax
   167ff:	89 c1                	mov    %eax,%ecx
   16801:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16804:	8b 40 10             	mov    0x10(%eax),%eax
   16807:	0f af c1             	imul   %ecx,%eax
   1680a:	01 d0                	add    %edx,%eax
   1680c:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 如果是整簇, 只读一簇
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   1680f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16813:	75 4c                	jne    16861 <fatfs_read+0xe3>
   16815:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16818:	8b 40 20             	mov    0x20(%eax),%eax
   1681b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1681e:	75 41                	jne    16861 <fatfs_read+0xe3>
            int err = dev_read(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   16820:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16823:	8b 40 10             	mov    0x10(%eax),%eax
   16826:	89 c1                	mov    %eax,%ecx
   16828:	8b 55 e0             	mov    -0x20(%ebp),%edx
   1682b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1682e:	8b 40 2c             	mov    0x2c(%eax),%eax
   16831:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16837:	51                   	push   %ecx
   16838:	ff 75 08             	pushl  0x8(%ebp)
   1683b:	52                   	push   %edx
   1683c:	50                   	push   %eax
   1683d:	e8 92 d7 ff ff       	call   13fd4 <dev_read>
   16842:	83 c4 10             	add    $0x10,%esp
   16845:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (err < 0) {
   16848:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   1684c:	79 08                	jns    16856 <fatfs_read+0xd8>
                return total_read;
   1684e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16851:	e9 c8 00 00 00       	jmp    1691e <fatfs_read+0x1a0>
            }

            curr_read = fat->cluster_byte_size;
   16856:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16859:	8b 40 20             	mov    0x20(%eax),%eax
   1685c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   1685f:	eb 7d                	jmp    168de <fatfs_read+0x160>
        } else {
            // 如果跨簇，只读第一个簇内的一部分
            if (cluster_offset + curr_read > fat->cluster_byte_size) {
   16861:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16864:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16867:	01 c2                	add    %eax,%edx
   16869:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1686c:	8b 40 20             	mov    0x20(%eax),%eax
   1686f:	39 c2                	cmp    %eax,%edx
   16871:	76 0c                	jbe    1687f <fatfs_read+0x101>
                curr_read = fat->cluster_byte_size - cluster_offset;
   16873:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16876:	8b 40 20             	mov    0x20(%eax),%eax
   16879:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   1687c:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            // 读取整个簇，然后从中拷贝
            fat->curr_sector = -1;
   1687f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16882:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16889:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1688c:	8b 40 10             	mov    0x10(%eax),%eax
   1688f:	89 c3                	mov    %eax,%ebx
   16891:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16894:	8b 48 24             	mov    0x24(%eax),%ecx
   16897:	8b 55 e0             	mov    -0x20(%ebp),%edx
   1689a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1689d:	8b 40 2c             	mov    0x2c(%eax),%eax
   168a0:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   168a6:	53                   	push   %ebx
   168a7:	51                   	push   %ecx
   168a8:	52                   	push   %edx
   168a9:	50                   	push   %eax
   168aa:	e8 25 d7 ff ff       	call   13fd4 <dev_read>
   168af:	83 c4 10             	add    $0x10,%esp
   168b2:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if (err < 0) {
   168b5:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   168b9:	79 05                	jns    168c0 <fatfs_read+0x142>
                return total_read;
   168bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   168be:	eb 5e                	jmp    1691e <fatfs_read+0x1a0>
            }
            kernel_memcpy(buf, fat->fat_buffer + cluster_offset, curr_read);
   168c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   168c3:	8b 55 e8             	mov    -0x18(%ebp),%edx
   168c6:	8b 4a 24             	mov    0x24(%edx),%ecx
   168c9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   168cc:	01 ca                	add    %ecx,%edx
   168ce:	83 ec 04             	sub    $0x4,%esp
   168d1:	50                   	push   %eax
   168d2:	52                   	push   %edx
   168d3:	ff 75 08             	pushl  0x8(%ebp)
   168d6:	e8 5c 1b 00 00       	call   18437 <kernel_memcpy>
   168db:	83 c4 10             	add    $0x10,%esp
        }

        buf += curr_read;
   168de:	8b 45 ec             	mov    -0x14(%ebp),%eax
   168e1:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_read;
   168e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   168e7:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_read += curr_read;
   168ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
   168ed:	01 45 f0             	add    %eax,-0x10(%ebp)

        // 前移文件指针
		int err = move_file_pos(file, fat, curr_read, 0);
   168f0:	6a 00                	push   $0x0
   168f2:	ff 75 ec             	pushl  -0x14(%ebp)
   168f5:	ff 75 e8             	pushl  -0x18(%ebp)
   168f8:	ff 75 10             	pushl  0x10(%ebp)
   168fb:	e8 4e f9 ff ff       	call   1624e <move_file_pos>
   16900:	83 c4 10             	add    $0x10,%esp
   16903:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if (err < 0) {
   16906:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   1690a:	79 05                	jns    16911 <fatfs_read+0x193>
            return total_read;
   1690c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1690f:	eb 0d                	jmp    1691e <fatfs_read+0x1a0>
    while (nbytes > 0) {
   16911:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16915:	0f 85 b5 fe ff ff    	jne    167d0 <fatfs_read+0x52>
        }
	}

    return total_read;
   1691b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1691e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16921:	c9                   	leave  
   16922:	c3                   	ret    

00016923 <fatfs_write>:

/**
 * @brief 写文件数据
 */
int fatfs_write (char * buf, int size, file_t * file) {
   16923:	55                   	push   %ebp
   16924:	89 e5                	mov    %esp,%ebp
   16926:	53                   	push   %ebx
   16927:	83 ec 34             	sub    $0x34,%esp
    fat_t * fat = (fat_t *)file->fs->data;
   1692a:	8b 45 10             	mov    0x10(%ebp),%eax
   1692d:	8b 40 44             	mov    0x44(%eax),%eax
   16930:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16936:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 如果文件大小不够，则先扩展文件大小
    if (file->pos + size > file->size) {
   16939:	8b 45 10             	mov    0x10(%ebp),%eax
   1693c:	8b 50 30             	mov    0x30(%eax),%edx
   1693f:	8b 45 0c             	mov    0xc(%ebp),%eax
   16942:	01 d0                	add    %edx,%eax
   16944:	89 c2                	mov    %eax,%edx
   16946:	8b 45 10             	mov    0x10(%ebp),%eax
   16949:	8b 40 24             	mov    0x24(%eax),%eax
   1694c:	39 c2                	cmp    %eax,%edx
   1694e:	76 3e                	jbe    1698e <fatfs_write+0x6b>
        int inc_size = file->pos + size - file->size;
   16950:	8b 45 10             	mov    0x10(%ebp),%eax
   16953:	8b 50 30             	mov    0x30(%eax),%edx
   16956:	8b 45 0c             	mov    0xc(%ebp),%eax
   16959:	01 d0                	add    %edx,%eax
   1695b:	89 c2                	mov    %eax,%edx
   1695d:	8b 45 10             	mov    0x10(%ebp),%eax
   16960:	8b 40 24             	mov    0x24(%eax),%eax
   16963:	29 c2                	sub    %eax,%edx
   16965:	89 d0                	mov    %edx,%eax
   16967:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = expand_file(file, inc_size);
   1696a:	83 ec 08             	sub    $0x8,%esp
   1696d:	ff 75 e4             	pushl  -0x1c(%ebp)
   16970:	ff 75 10             	pushl  0x10(%ebp)
   16973:	e8 5d f7 ff ff       	call   160d5 <expand_file>
   16978:	83 c4 10             	add    $0x10,%esp
   1697b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0) {
   1697e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   16982:	79 0a                	jns    1698e <fatfs_write+0x6b>
            return 0;
   16984:	b8 00 00 00 00       	mov    $0x0,%eax
   16989:	e9 ae 01 00 00       	jmp    16b3c <fatfs_write+0x219>
        }
    }

    uint32_t nbytes = size;
   1698e:	8b 45 0c             	mov    0xc(%ebp),%eax
   16991:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t total_write = 0;
   16994:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	while (nbytes) {
   1699b:	e9 8f 01 00 00       	jmp    16b2f <fatfs_write+0x20c>
        // 每次写的数据量取决于当前簇中剩余的空间，以及size的量综合
        uint32_t curr_write = nbytes;
   169a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   169a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32_t cluster_offset = file->pos % fat->cluster_byte_size;
   169a6:	8b 45 10             	mov    0x10(%ebp),%eax
   169a9:	8b 40 30             	mov    0x30(%eax),%eax
   169ac:	89 c2                	mov    %eax,%edx
   169ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169b1:	8b 48 20             	mov    0x20(%eax),%ecx
   169b4:	89 d0                	mov    %edx,%eax
   169b6:	ba 00 00 00 00       	mov    $0x0,%edx
   169bb:	f7 f1                	div    %ecx
   169bd:	89 55 dc             	mov    %edx,-0x24(%ebp)
        uint32_t start_sector = fat->data_start + (file->cblk - 2)* fat->sec_per_cluster;  // 从2开始
   169c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169c3:	8b 50 1c             	mov    0x1c(%eax),%edx
   169c6:	8b 45 10             	mov    0x10(%ebp),%eax
   169c9:	8b 40 38             	mov    0x38(%eax),%eax
   169cc:	83 e8 02             	sub    $0x2,%eax
   169cf:	89 c1                	mov    %eax,%ecx
   169d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169d4:	8b 40 10             	mov    0x10(%eax),%eax
   169d7:	0f af c1             	imul   %ecx,%eax
   169da:	01 d0                	add    %edx,%eax
   169dc:	89 45 d8             	mov    %eax,-0x28(%ebp)

        // 如果是整簇, 写整簇
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   169df:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   169e3:	75 4f                	jne    16a34 <fatfs_write+0x111>
   169e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169e8:	8b 40 20             	mov    0x20(%eax),%eax
   169eb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   169ee:	75 44                	jne    16a34 <fatfs_write+0x111>
            int err = dev_write(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   169f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169f3:	8b 40 10             	mov    0x10(%eax),%eax
   169f6:	89 c1                	mov    %eax,%ecx
   169f8:	8b 55 d8             	mov    -0x28(%ebp),%edx
   169fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169fe:	8b 40 2c             	mov    0x2c(%eax),%eax
   16a01:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16a07:	51                   	push   %ecx
   16a08:	ff 75 08             	pushl  0x8(%ebp)
   16a0b:	52                   	push   %edx
   16a0c:	50                   	push   %eax
   16a0d:	e8 0e d6 ff ff       	call   14020 <dev_write>
   16a12:	83 c4 10             	add    $0x10,%esp
   16a15:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0) {
   16a18:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   16a1c:	79 08                	jns    16a26 <fatfs_write+0x103>
                return total_write;
   16a1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a21:	e9 16 01 00 00       	jmp    16b3c <fatfs_write+0x219>
            }

            curr_write = fat->cluster_byte_size;
   16a26:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a29:	8b 40 20             	mov    0x20(%eax),%eax
   16a2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   16a2f:	e9 b7 00 00 00       	jmp    16aeb <fatfs_write+0x1c8>
        } else {
            // 如果跨簇，只写第一个簇内的一部分
            if (cluster_offset + curr_write > fat->cluster_byte_size) {
   16a34:	8b 55 dc             	mov    -0x24(%ebp),%edx
   16a37:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16a3a:	01 c2                	add    %eax,%edx
   16a3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a3f:	8b 40 20             	mov    0x20(%eax),%eax
   16a42:	39 c2                	cmp    %eax,%edx
   16a44:	76 0c                	jbe    16a52 <fatfs_write+0x12f>
                curr_write = fat->cluster_byte_size - cluster_offset;
   16a46:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a49:	8b 40 20             	mov    0x20(%eax),%eax
   16a4c:	2b 45 dc             	sub    -0x24(%ebp),%eax
   16a4f:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            fat->curr_sector = -1;
   16a52:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a55:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16a5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a5f:	8b 40 10             	mov    0x10(%eax),%eax
   16a62:	89 c3                	mov    %eax,%ebx
   16a64:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a67:	8b 48 24             	mov    0x24(%eax),%ecx
   16a6a:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16a6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a70:	8b 40 2c             	mov    0x2c(%eax),%eax
   16a73:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16a79:	53                   	push   %ebx
   16a7a:	51                   	push   %ecx
   16a7b:	52                   	push   %edx
   16a7c:	50                   	push   %eax
   16a7d:	e8 52 d5 ff ff       	call   13fd4 <dev_read>
   16a82:	83 c4 10             	add    $0x10,%esp
   16a85:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0) {
   16a88:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   16a8c:	79 08                	jns    16a96 <fatfs_write+0x173>
                return total_write;
   16a8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a91:	e9 a6 00 00 00       	jmp    16b3c <fatfs_write+0x219>
            }
            kernel_memcpy(fat->fat_buffer + cluster_offset, buf, curr_write);        
   16a96:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16a99:	8b 55 e8             	mov    -0x18(%ebp),%edx
   16a9c:	8b 4a 24             	mov    0x24(%edx),%ecx
   16a9f:	8b 55 dc             	mov    -0x24(%ebp),%edx
   16aa2:	01 ca                	add    %ecx,%edx
   16aa4:	83 ec 04             	sub    $0x4,%esp
   16aa7:	50                   	push   %eax
   16aa8:	ff 75 08             	pushl  0x8(%ebp)
   16aab:	52                   	push   %edx
   16aac:	e8 86 19 00 00       	call   18437 <kernel_memcpy>
   16ab1:	83 c4 10             	add    $0x10,%esp
            
            // 写整个簇，然后从中拷贝
            err = dev_write(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16ab4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16ab7:	8b 40 10             	mov    0x10(%eax),%eax
   16aba:	89 c3                	mov    %eax,%ebx
   16abc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16abf:	8b 48 24             	mov    0x24(%eax),%ecx
   16ac2:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16ac5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16ac8:	8b 40 2c             	mov    0x2c(%eax),%eax
   16acb:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16ad1:	53                   	push   %ebx
   16ad2:	51                   	push   %ecx
   16ad3:	52                   	push   %edx
   16ad4:	50                   	push   %eax
   16ad5:	e8 46 d5 ff ff       	call   14020 <dev_write>
   16ada:	83 c4 10             	add    $0x10,%esp
   16add:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0) {
   16ae0:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   16ae4:	79 05                	jns    16aeb <fatfs_write+0x1c8>
                return total_write;
   16ae6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16ae9:	eb 51                	jmp    16b3c <fatfs_write+0x219>
            }
        }

        buf += curr_write;
   16aeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16aee:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_write;
   16af1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16af4:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_write += curr_write;
   16af7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16afa:	01 45 f0             	add    %eax,-0x10(%ebp)
        file->size += curr_write;
   16afd:	8b 45 10             	mov    0x10(%ebp),%eax
   16b00:	8b 50 24             	mov    0x24(%eax),%edx
   16b03:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16b06:	01 c2                	add    %eax,%edx
   16b08:	8b 45 10             	mov    0x10(%ebp),%eax
   16b0b:	89 50 24             	mov    %edx,0x24(%eax)

        // 前移文件指针
		int err = move_file_pos(file, fat, curr_write, 1);
   16b0e:	6a 01                	push   $0x1
   16b10:	ff 75 ec             	pushl  -0x14(%ebp)
   16b13:	ff 75 e8             	pushl  -0x18(%ebp)
   16b16:	ff 75 10             	pushl  0x10(%ebp)
   16b19:	e8 30 f7 ff ff       	call   1624e <move_file_pos>
   16b1e:	83 c4 10             	add    $0x10,%esp
   16b21:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if (err < 0) {
   16b24:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
   16b28:	79 05                	jns    16b2f <fatfs_write+0x20c>
            return total_write;
   16b2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16b2d:	eb 0d                	jmp    16b3c <fatfs_write+0x219>
	while (nbytes) {
   16b2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16b33:	0f 85 67 fe ff ff    	jne    169a0 <fatfs_write+0x7d>
        }
    }

    return total_write;
   16b39:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   16b3c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16b3f:	c9                   	leave  
   16b40:	c3                   	ret    

00016b41 <fatfs_close>:

/**
 * @brief 关闭文件
 */
void fatfs_close (file_t * file) {
   16b41:	55                   	push   %ebp
   16b42:	89 e5                	mov    %esp,%ebp
   16b44:	83 ec 18             	sub    $0x18,%esp
    if (file->mode == O_RDONLY) {
   16b47:	8b 45 08             	mov    0x8(%ebp),%eax
   16b4a:	8b 40 40             	mov    0x40(%eax),%eax
   16b4d:	85 c0                	test   %eax,%eax
   16b4f:	74 74                	je     16bc5 <fatfs_close+0x84>
        return;
    }

    fat_t * fat = (fat_t *)file->fs->data;
   16b51:	8b 45 08             	mov    0x8(%ebp),%eax
   16b54:	8b 40 44             	mov    0x44(%eax),%eax
   16b57:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16b5d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    diritem_t * item = read_dir_entry(fat, file->p_index);
   16b60:	8b 45 08             	mov    0x8(%ebp),%eax
   16b63:	8b 40 3c             	mov    0x3c(%eax),%eax
   16b66:	83 ec 08             	sub    $0x8,%esp
   16b69:	50                   	push   %eax
   16b6a:	ff 75 f4             	pushl  -0xc(%ebp)
   16b6d:	e8 39 f4 ff ff       	call   15fab <read_dir_entry>
   16b72:	83 c4 10             	add    $0x10,%esp
   16b75:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (item == (diritem_t *)0) {
   16b78:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16b7c:	74 4a                	je     16bc8 <fatfs_close+0x87>
        return;
    }

    item->DIR_FileSize = file->size;
   16b7e:	8b 45 08             	mov    0x8(%ebp),%eax
   16b81:	8b 50 24             	mov    0x24(%eax),%edx
   16b84:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16b87:	89 50 1c             	mov    %edx,0x1c(%eax)
    item->DIR_FstClusHI = (uint16_t )(file->sblk >> 16);
   16b8a:	8b 45 08             	mov    0x8(%ebp),%eax
   16b8d:	8b 40 34             	mov    0x34(%eax),%eax
   16b90:	c1 f8 10             	sar    $0x10,%eax
   16b93:	89 c2                	mov    %eax,%edx
   16b95:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16b98:	66 89 50 14          	mov    %dx,0x14(%eax)
    item->DIR_FstClusL0 = (uint16_t )(file->sblk & 0xFFFF);
   16b9c:	8b 45 08             	mov    0x8(%ebp),%eax
   16b9f:	8b 40 34             	mov    0x34(%eax),%eax
   16ba2:	89 c2                	mov    %eax,%edx
   16ba4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16ba7:	66 89 50 1a          	mov    %dx,0x1a(%eax)
    write_dir_entry(fat, item, file->p_index);
   16bab:	8b 45 08             	mov    0x8(%ebp),%eax
   16bae:	8b 40 3c             	mov    0x3c(%eax),%eax
   16bb1:	83 ec 04             	sub    $0x4,%esp
   16bb4:	50                   	push   %eax
   16bb5:	ff 75 f0             	pushl  -0x10(%ebp)
   16bb8:	ff 75 f4             	pushl  -0xc(%ebp)
   16bbb:	e8 6b f4 ff ff       	call   1602b <write_dir_entry>
   16bc0:	83 c4 10             	add    $0x10,%esp
   16bc3:	eb 04                	jmp    16bc9 <fatfs_close+0x88>
        return;
   16bc5:	90                   	nop
   16bc6:	eb 01                	jmp    16bc9 <fatfs_close+0x88>
        return;
   16bc8:	90                   	nop
}
   16bc9:	c9                   	leave  
   16bca:	c3                   	ret    

00016bcb <fatfs_seek>:

/**
 * @brief 文件读写位置的调整
 */
int fatfs_seek (file_t * file, uint32_t offset, int dir) {
   16bcb:	55                   	push   %ebp
   16bcc:	89 e5                	mov    %esp,%ebp
   16bce:	83 ec 28             	sub    $0x28,%esp
     // 只支持基于文件开头的定位
    if (dir != 0) {
   16bd1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16bd5:	74 0a                	je     16be1 <fatfs_seek+0x16>
        return -1;
   16bd7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16bdc:	e9 c7 00 00 00       	jmp    16ca8 <fatfs_seek+0xdd>
    }

    fat_t * fat = (fat_t *)file->fs->data;
   16be1:	8b 45 08             	mov    0x8(%ebp),%eax
   16be4:	8b 40 44             	mov    0x44(%eax),%eax
   16be7:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16bed:	89 45 e8             	mov    %eax,-0x18(%ebp)
    cluster_t curr_cluster = file->sblk;
   16bf0:	8b 45 08             	mov    0x8(%ebp),%eax
   16bf3:	8b 40 34             	mov    0x34(%eax),%eax
   16bf6:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    uint32_t curr_pos = 0;
   16bfa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    uint32_t offset_to_move = offset;
   16c01:	8b 45 0c             	mov    0xc(%ebp),%eax
   16c04:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (offset_to_move > 0) {
   16c07:	eb 7d                	jmp    16c86 <fatfs_seek+0xbb>
        uint32_t c_off = curr_pos % fat->cluster_byte_size;
   16c09:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c0c:	8b 48 20             	mov    0x20(%eax),%ecx
   16c0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16c12:	ba 00 00 00 00       	mov    $0x0,%edx
   16c17:	f7 f1                	div    %ecx
   16c19:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        uint32_t curr_move = offset_to_move;
   16c1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c1f:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 不超过一簇，直接调整位置，无需跑到下一簇
        if (c_off + curr_move < fat->cluster_byte_size) {
   16c22:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16c25:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c28:	01 c2                	add    %eax,%edx
   16c2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c2d:	8b 40 20             	mov    0x20(%eax),%eax
   16c30:	39 c2                	cmp    %eax,%edx
   16c32:	73 08                	jae    16c3c <fatfs_seek+0x71>
            curr_pos += curr_move;
   16c34:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c37:	01 45 f0             	add    %eax,-0x10(%ebp)
            break;
   16c3a:	eb 54                	jmp    16c90 <fatfs_seek+0xc5>
        }

        // 超过一簇，只在当前簇内移动
        curr_move = fat->cluster_byte_size - c_off;
   16c3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c3f:	8b 40 20             	mov    0x20(%eax),%eax
   16c42:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   16c45:	89 45 e0             	mov    %eax,-0x20(%ebp)
        curr_pos += curr_move;
   16c48:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c4b:	01 45 f0             	add    %eax,-0x10(%ebp)
        offset_to_move -= curr_move;
   16c4e:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c51:	29 45 ec             	sub    %eax,-0x14(%ebp)

        // 取下一簇
        curr_cluster = cluster_get_next(fat, curr_cluster);
   16c54:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16c58:	83 ec 08             	sub    $0x8,%esp
   16c5b:	50                   	push   %eax
   16c5c:	ff 75 e8             	pushl  -0x18(%ebp)
   16c5f:	e8 b0 ed ff ff       	call   15a14 <cluster_get_next>
   16c64:	83 c4 10             	add    $0x10,%esp
   16c67:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        if (!cluster_is_valid(curr_cluster)) {
   16c6b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16c6f:	83 ec 0c             	sub    $0xc,%esp
   16c72:	50                   	push   %eax
   16c73:	e8 73 ed ff ff       	call   159eb <cluster_is_valid>
   16c78:	83 c4 10             	add    $0x10,%esp
   16c7b:	85 c0                	test   %eax,%eax
   16c7d:	75 07                	jne    16c86 <fatfs_seek+0xbb>
            return -1;
   16c7f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16c84:	eb 22                	jmp    16ca8 <fatfs_seek+0xdd>
    while (offset_to_move > 0) {
   16c86:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16c8a:	0f 85 79 ff ff ff    	jne    16c09 <fatfs_seek+0x3e>
        }
    }

    // 最后记录一下位置
    file->pos = curr_pos;
   16c90:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16c93:	8b 45 08             	mov    0x8(%ebp),%eax
   16c96:	89 50 30             	mov    %edx,0x30(%eax)
    file->cblk = curr_cluster;
   16c99:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   16c9d:	8b 45 08             	mov    0x8(%ebp),%eax
   16ca0:	89 50 38             	mov    %edx,0x38(%eax)
    return 0;
   16ca3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16ca8:	c9                   	leave  
   16ca9:	c3                   	ret    

00016caa <fatfs_stat>:

int fatfs_stat (file_t * file, struct stat *st) {
   16caa:	55                   	push   %ebp
   16cab:	89 e5                	mov    %esp,%ebp
    return -1;
   16cad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16cb2:	5d                   	pop    %ebp
   16cb3:	c3                   	ret    

00016cb4 <fatfs_opendir>:

/**
 * @brief 打开目录。只是简单地读取位置重设为0
 */
int fatfs_opendir (struct _fs_t * fs,const char * name, DIR * dir) {
   16cb4:	55                   	push   %ebp
   16cb5:	89 e5                	mov    %esp,%ebp
    dir->index = 0;
   16cb7:	8b 45 10             	mov    0x10(%ebp),%eax
   16cba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    return 0;
   16cc0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16cc5:	5d                   	pop    %ebp
   16cc6:	c3                   	ret    

00016cc7 <fatfs_readdir>:

/**
 * @brief 读取一个目录项
 */
int fatfs_readdir (struct _fs_t * fs,DIR* dir, struct dirent * dirent) {
   16cc7:	55                   	push   %ebp
   16cc8:	89 e5                	mov    %esp,%ebp
   16cca:	83 ec 18             	sub    $0x18,%esp
    fat_t * fat = (fat_t *)fs->data;
   16ccd:	8b 45 08             	mov    0x8(%ebp),%eax
   16cd0:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16cd6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 做一些简单的判断，检查
    while (dir->index < fat->root_ent_cnt) {
   16cd9:	e9 be 00 00 00       	jmp    16d9c <fatfs_readdir+0xd5>
        diritem_t * item = read_dir_entry(fat, dir->index);
   16cde:	8b 45 0c             	mov    0xc(%ebp),%eax
   16ce1:	8b 00                	mov    (%eax),%eax
   16ce3:	83 ec 08             	sub    $0x8,%esp
   16ce6:	50                   	push   %eax
   16ce7:	ff 75 f4             	pushl  -0xc(%ebp)
   16cea:	e8 bc f2 ff ff       	call   15fab <read_dir_entry>
   16cef:	83 c4 10             	add    $0x10,%esp
   16cf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (item == (diritem_t *)0) {
   16cf5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16cf9:	75 0a                	jne    16d05 <fatfs_readdir+0x3e>
            return -1;
   16cfb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16d00:	e9 b4 00 00 00       	jmp    16db9 <fatfs_readdir+0xf2>
        }

        // 结束项，不需要再扫描了，同时index也不能往前走
        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   16d05:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d08:	0f b6 00             	movzbl (%eax),%eax
   16d0b:	84 c0                	test   %al,%al
   16d0d:	0f 84 a0 00 00 00    	je     16db3 <fatfs_readdir+0xec>
            break;
        }

        // 只显示普通文件和目录，其它的不显示
        if (item->DIR_Name[0] != DIRITEM_NAME_FREE) {
   16d13:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d16:	0f b6 00             	movzbl (%eax),%eax
   16d19:	3c e5                	cmp    $0xe5,%al
   16d1b:	74 72                	je     16d8f <fatfs_readdir+0xc8>
            file_type_t type = diritem_get_type(item);
   16d1d:	83 ec 0c             	sub    $0xc,%esp
   16d20:	ff 75 f0             	pushl  -0x10(%ebp)
   16d23:	e8 3f f2 ff ff       	call   15f67 <diritem_get_type>
   16d28:	83 c4 10             	add    $0x10,%esp
   16d2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if ((type == FILE_NORMAL) || (type == FILE_DIR)) {
   16d2e:	83 7d ec 02          	cmpl   $0x2,-0x14(%ebp)
   16d32:	74 06                	je     16d3a <fatfs_readdir+0x73>
   16d34:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   16d38:	75 55                	jne    16d8f <fatfs_readdir+0xc8>
                dirent->index = dir->index++;
   16d3a:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d3d:	8b 00                	mov    (%eax),%eax
   16d3f:	8d 48 01             	lea    0x1(%eax),%ecx
   16d42:	8b 55 0c             	mov    0xc(%ebp),%edx
   16d45:	89 0a                	mov    %ecx,(%edx)
   16d47:	8b 55 10             	mov    0x10(%ebp),%edx
   16d4a:	89 02                	mov    %eax,(%edx)
                dirent->type = diritem_get_type(item);
   16d4c:	83 ec 0c             	sub    $0xc,%esp
   16d4f:	ff 75 f0             	pushl  -0x10(%ebp)
   16d52:	e8 10 f2 ff ff       	call   15f67 <diritem_get_type>
   16d57:	83 c4 10             	add    $0x10,%esp
   16d5a:	89 c2                	mov    %eax,%edx
   16d5c:	8b 45 10             	mov    0x10(%ebp),%eax
   16d5f:	89 50 04             	mov    %edx,0x4(%eax)
                dirent->size = item->DIR_FileSize;
   16d62:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d65:	8b 40 1c             	mov    0x1c(%eax),%eax
   16d68:	89 c2                	mov    %eax,%edx
   16d6a:	8b 45 10             	mov    0x10(%ebp),%eax
   16d6d:	89 90 08 01 00 00    	mov    %edx,0x108(%eax)
                diritem_get_name(item, dirent->name);
   16d73:	8b 45 10             	mov    0x10(%ebp),%eax
   16d76:	83 c0 08             	add    $0x8,%eax
   16d79:	83 ec 08             	sub    $0x8,%esp
   16d7c:	50                   	push   %eax
   16d7d:	ff 75 f0             	pushl  -0x10(%ebp)
   16d80:	e8 4f f1 ff ff       	call   15ed4 <diritem_get_name>
   16d85:	83 c4 10             	add    $0x10,%esp
                return 0;
   16d88:	b8 00 00 00 00       	mov    $0x0,%eax
   16d8d:	eb 2a                	jmp    16db9 <fatfs_readdir+0xf2>
            }
        }

        dir->index++;
   16d8f:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d92:	8b 00                	mov    (%eax),%eax
   16d94:	8d 50 01             	lea    0x1(%eax),%edx
   16d97:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d9a:	89 10                	mov    %edx,(%eax)
    while (dir->index < fat->root_ent_cnt) {
   16d9c:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d9f:	8b 00                	mov    (%eax),%eax
   16da1:	89 c2                	mov    %eax,%edx
   16da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16da6:	8b 40 14             	mov    0x14(%eax),%eax
   16da9:	39 c2                	cmp    %eax,%edx
   16dab:	0f 82 2d ff ff ff    	jb     16cde <fatfs_readdir+0x17>
   16db1:	eb 01                	jmp    16db4 <fatfs_readdir+0xed>
            break;
   16db3:	90                   	nop
    }

    return -1;
   16db4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16db9:	c9                   	leave  
   16dba:	c3                   	ret    

00016dbb <fatfs_closedir>:

/**
 * @brief 关闭文件扫描读取
 */
int fatfs_closedir (struct _fs_t * fs,DIR *dir) {
   16dbb:	55                   	push   %ebp
   16dbc:	89 e5                	mov    %esp,%ebp
    return 0;
   16dbe:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16dc3:	5d                   	pop    %ebp
   16dc4:	c3                   	ret    

00016dc5 <fatfs_unlink>:

/**
 * @brief 删除文件
 */
int fatfs_unlink (struct _fs_t * fs, const char * path) {
   16dc5:	55                   	push   %ebp
   16dc6:	89 e5                	mov    %esp,%ebp
   16dc8:	83 ec 38             	sub    $0x38,%esp
    fat_t * fat = (fat_t *)fs->data;
   16dcb:	8b 45 08             	mov    0x8(%ebp),%eax
   16dce:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16dd4:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 遍历根目录的数据区，找到已经存在的匹配项
    for (int i = 0; i < fat->root_ent_cnt; i++) {
   16dd7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   16dde:	e9 b3 00 00 00       	jmp    16e96 <fatfs_unlink+0xd1>
        diritem_t * item = read_dir_entry(fat, i);
   16de3:	83 ec 08             	sub    $0x8,%esp
   16de6:	ff 75 f4             	pushl  -0xc(%ebp)
   16de9:	ff 75 f0             	pushl  -0x10(%ebp)
   16dec:	e8 ba f1 ff ff       	call   15fab <read_dir_entry>
   16df1:	83 c4 10             	add    $0x10,%esp
   16df4:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (item == (diritem_t *)0) {
   16df7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16dfb:	75 0a                	jne    16e07 <fatfs_unlink+0x42>
            return -1;
   16dfd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16e02:	e9 a8 00 00 00       	jmp    16eaf <fatfs_unlink+0xea>
        }

         // 结束项，不需要再扫描了，同时index也不能往前走
        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   16e07:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16e0a:	0f b6 00             	movzbl (%eax),%eax
   16e0d:	84 c0                	test   %al,%al
   16e0f:	0f 84 94 00 00 00    	je     16ea9 <fatfs_unlink+0xe4>
            break;
        }

        // 只显示普通文件和目录，其它的不显示
        if (item->DIR_Name[0] == DIRITEM_NAME_FREE) {
   16e15:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16e18:	0f b6 00             	movzbl (%eax),%eax
   16e1b:	3c e5                	cmp    $0xe5,%al
   16e1d:	74 72                	je     16e91 <fatfs_unlink+0xcc>
            continue;
        }

        // 找到要打开的目录
        if (diritem_name_match(item, path)) {
   16e1f:	83 ec 08             	sub    $0x8,%esp
   16e22:	ff 75 0c             	pushl  0xc(%ebp)
   16e25:	ff 75 ec             	pushl  -0x14(%ebp)
   16e28:	e8 e2 ef ff ff       	call   15e0f <diritem_name_match>
   16e2d:	83 c4 10             	add    $0x10,%esp
   16e30:	85 c0                	test   %eax,%eax
   16e32:	74 5e                	je     16e92 <fatfs_unlink+0xcd>
            // 释放簇
            int cluster = (item->DIR_FstClusHI << 16) | item->DIR_FstClusL0;
   16e34:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16e37:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   16e3b:	0f b7 c0             	movzwl %ax,%eax
   16e3e:	c1 e0 10             	shl    $0x10,%eax
   16e41:	89 c2                	mov    %eax,%edx
   16e43:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16e46:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   16e4a:	0f b7 c0             	movzwl %ax,%eax
   16e4d:	09 d0                	or     %edx,%eax
   16e4f:	89 45 e8             	mov    %eax,-0x18(%ebp)
            cluster_free_chain(fat, cluster);
   16e52:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16e55:	0f b7 c0             	movzwl %ax,%eax
   16e58:	83 ec 08             	sub    $0x8,%esp
   16e5b:	50                   	push   %eax
   16e5c:	ff 75 f0             	pushl  -0x10(%ebp)
   16e5f:	e8 9d ed ff ff       	call   15c01 <cluster_free_chain>
   16e64:	83 c4 10             	add    $0x10,%esp

            // 写diritem项
            diritem_t item;
            kernel_memset(&item, 0, sizeof(diritem_t));
   16e67:	83 ec 04             	sub    $0x4,%esp
   16e6a:	6a 20                	push   $0x20
   16e6c:	6a 00                	push   $0x0
   16e6e:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16e71:	50                   	push   %eax
   16e72:	e8 0f 16 00 00       	call   18486 <kernel_memset>
   16e77:	83 c4 10             	add    $0x10,%esp
            return write_dir_entry(fat, &item, i);
   16e7a:	83 ec 04             	sub    $0x4,%esp
   16e7d:	ff 75 f4             	pushl  -0xc(%ebp)
   16e80:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16e83:	50                   	push   %eax
   16e84:	ff 75 f0             	pushl  -0x10(%ebp)
   16e87:	e8 9f f1 ff ff       	call   1602b <write_dir_entry>
   16e8c:	83 c4 10             	add    $0x10,%esp
   16e8f:	eb 1e                	jmp    16eaf <fatfs_unlink+0xea>
            continue;
   16e91:	90                   	nop
    for (int i = 0; i < fat->root_ent_cnt; i++) {
   16e92:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   16e96:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16e99:	8b 50 14             	mov    0x14(%eax),%edx
   16e9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16e9f:	39 c2                	cmp    %eax,%edx
   16ea1:	0f 87 3c ff ff ff    	ja     16de3 <fatfs_unlink+0x1e>
   16ea7:	eb 01                	jmp    16eaa <fatfs_unlink+0xe5>
            break;
   16ea9:	90                   	nop
        }
    }

    return -1;
   16eaa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16eaf:	c9                   	leave  
   16eb0:	c3                   	ret    

00016eb1 <file_alloc>:
static mutex_t file_alloc_mutex;                // 访问file_table的互斥信号量

/**
 * @brief 分配一个文件描述符
 */
file_t * file_alloc (void) {
   16eb1:	55                   	push   %ebp
   16eb2:	89 e5                	mov    %esp,%ebp
   16eb4:	83 ec 18             	sub    $0x18,%esp
    file_t * file = (file_t *)0;
   16eb7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&file_alloc_mutex);
   16ebe:	83 ec 0c             	sub    $0xc,%esp
   16ec1:	68 a0 c8 05 00       	push   $0x5c8a0
   16ec6:	e8 9e 0e 00 00       	call   17d69 <mutex_lock>
   16ecb:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < FILE_TABLE_SIZE; i++) {
   16ece:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   16ed5:	eb 47                	jmp    16f1e <file_alloc+0x6d>
        file_t * p_file = file_table + i;
   16ed7:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16eda:	89 d0                	mov    %edx,%eax
   16edc:	c1 e0 03             	shl    $0x3,%eax
   16edf:	01 d0                	add    %edx,%eax
   16ee1:	c1 e0 03             	shl    $0x3,%eax
   16ee4:	05 a0 88 03 00       	add    $0x388a0,%eax
   16ee9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0) {
   16eec:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16eef:	8b 40 28             	mov    0x28(%eax),%eax
   16ef2:	85 c0                	test   %eax,%eax
   16ef4:	75 24                	jne    16f1a <file_alloc+0x69>
			kernel_memset(p_file, 0, sizeof(file_t));
   16ef6:	83 ec 04             	sub    $0x4,%esp
   16ef9:	6a 48                	push   $0x48
   16efb:	6a 00                	push   $0x0
   16efd:	ff 75 ec             	pushl  -0x14(%ebp)
   16f00:	e8 81 15 00 00       	call   18486 <kernel_memset>
   16f05:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;
   16f08:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16f0b:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
			file = p_file;
   16f12:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16f15:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   16f18:	eb 0d                	jmp    16f27 <file_alloc+0x76>
    for (int i = 0; i < FILE_TABLE_SIZE; i++) {
   16f1a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   16f1e:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   16f25:	7e b0                	jle    16ed7 <file_alloc+0x26>
        }
    }
    mutex_unlock(&file_alloc_mutex);
   16f27:	83 ec 0c             	sub    $0xc,%esp
   16f2a:	68 a0 c8 05 00       	push   $0x5c8a0
   16f2f:	e8 cc 0e 00 00       	call   17e00 <mutex_unlock>
   16f34:	83 c4 10             	add    $0x10,%esp
    return file;
   16f37:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   16f3a:	c9                   	leave  
   16f3b:	c3                   	ret    

00016f3c <file_free>:

/**
 * @brief 释放文件描述符
 */
void file_free (file_t * file) {
   16f3c:	55                   	push   %ebp
   16f3d:	89 e5                	mov    %esp,%ebp
   16f3f:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   16f42:	83 ec 0c             	sub    $0xc,%esp
   16f45:	68 a0 c8 05 00       	push   $0x5c8a0
   16f4a:	e8 1a 0e 00 00       	call   17d69 <mutex_lock>
   16f4f:	83 c4 10             	add    $0x10,%esp
    if (file->ref) {
   16f52:	8b 45 08             	mov    0x8(%ebp),%eax
   16f55:	8b 40 28             	mov    0x28(%eax),%eax
   16f58:	85 c0                	test   %eax,%eax
   16f5a:	74 0f                	je     16f6b <file_free+0x2f>
        file->ref--;
   16f5c:	8b 45 08             	mov    0x8(%ebp),%eax
   16f5f:	8b 40 28             	mov    0x28(%eax),%eax
   16f62:	8d 50 ff             	lea    -0x1(%eax),%edx
   16f65:	8b 45 08             	mov    0x8(%ebp),%eax
   16f68:	89 50 28             	mov    %edx,0x28(%eax)
    }
    mutex_unlock(&file_alloc_mutex);
   16f6b:	83 ec 0c             	sub    $0xc,%esp
   16f6e:	68 a0 c8 05 00       	push   $0x5c8a0
   16f73:	e8 88 0e 00 00       	call   17e00 <mutex_unlock>
   16f78:	83 c4 10             	add    $0x10,%esp
}
   16f7b:	90                   	nop
   16f7c:	c9                   	leave  
   16f7d:	c3                   	ret    

00016f7e <file_inc_ref>:

/**
 * @brief 增加file的引用计数
 */
void file_inc_ref (file_t * file) {
   16f7e:	55                   	push   %ebp
   16f7f:	89 e5                	mov    %esp,%ebp
   16f81:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   16f84:	83 ec 0c             	sub    $0xc,%esp
   16f87:	68 a0 c8 05 00       	push   $0x5c8a0
   16f8c:	e8 d8 0d 00 00       	call   17d69 <mutex_lock>
   16f91:	83 c4 10             	add    $0x10,%esp
	file->ref++;
   16f94:	8b 45 08             	mov    0x8(%ebp),%eax
   16f97:	8b 40 28             	mov    0x28(%eax),%eax
   16f9a:	8d 50 01             	lea    0x1(%eax),%edx
   16f9d:	8b 45 08             	mov    0x8(%ebp),%eax
   16fa0:	89 50 28             	mov    %edx,0x28(%eax)
    mutex_unlock(&file_alloc_mutex);
   16fa3:	83 ec 0c             	sub    $0xc,%esp
   16fa6:	68 a0 c8 05 00       	push   $0x5c8a0
   16fab:	e8 50 0e 00 00       	call   17e00 <mutex_unlock>
   16fb0:	83 c4 10             	add    $0x10,%esp
}
   16fb3:	90                   	nop
   16fb4:	c9                   	leave  
   16fb5:	c3                   	ret    

00016fb6 <file_table_init>:

/**
 * @brief 文件表初始化
 */
void file_table_init (void) {
   16fb6:	55                   	push   %ebp
   16fb7:	89 e5                	mov    %esp,%ebp
   16fb9:	83 ec 08             	sub    $0x8,%esp
	// 文件描述符表初始化
	kernel_memset(&file_table, 0, sizeof(file_table));
   16fbc:	83 ec 04             	sub    $0x4,%esp
   16fbf:	68 00 40 02 00       	push   $0x24000
   16fc4:	6a 00                	push   $0x0
   16fc6:	68 a0 88 03 00       	push   $0x388a0
   16fcb:	e8 b6 14 00 00       	call   18486 <kernel_memset>
   16fd0:	83 c4 10             	add    $0x10,%esp
	mutex_init(&file_alloc_mutex);
   16fd3:	83 ec 0c             	sub    $0xc,%esp
   16fd6:	68 a0 c8 05 00       	push   $0x5c8a0
   16fdb:	e8 5b 0d 00 00       	call   17d3b <mutex_init>
   16fe0:	83 c4 10             	add    $0x10,%esp
}
   16fe3:	90                   	nop
   16fe4:	c9                   	leave  
   16fe5:	c3                   	ret    

00016fe6 <list_node_next>:
static inline list_node_t * list_node_next(list_node_t *node) {
   16fe6:	55                   	push   %ebp
   16fe7:	89 e5                	mov    %esp,%ebp
    return node->next;
   16fe9:	8b 45 08             	mov    0x8(%ebp),%eax
   16fec:	8b 40 04             	mov    0x4(%eax),%eax
}
   16fef:	5d                   	pop    %ebp
   16ff0:	c3                   	ret    

00016ff1 <list_first>:
static inline list_node_t* list_first(list_t *list) {
   16ff1:	55                   	push   %ebp
   16ff2:	89 e5                	mov    %esp,%ebp
    return list->first;
   16ff4:	8b 45 08             	mov    0x8(%ebp),%eax
   16ff7:	8b 00                	mov    (%eax),%eax
}
   16ff9:	5d                   	pop    %ebp
   16ffa:	c3                   	ret    

00016ffb <is_fd_bad>:
extern fs_op_t fatfs_op;

/**
 * @brief 判断文件描述符是否正确
 */
static int is_fd_bad (int file) {
   16ffb:	55                   	push   %ebp
   16ffc:	89 e5                	mov    %esp,%ebp
	if ((file < 0) && (file >= TASK_OFILE_NR)) {
   16ffe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17002:	79 0d                	jns    17011 <is_fd_bad+0x16>
   17004:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   17008:	7e 07                	jle    17011 <is_fd_bad+0x16>
		return 1;
   1700a:	b8 01 00 00 00       	mov    $0x1,%eax
   1700f:	eb 05                	jmp    17016 <is_fd_bad+0x1b>
	}

	return 0;
   17011:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17016:	5d                   	pop    %ebp
   17017:	c3                   	ret    

00017018 <get_fs_op>:

/**
 * @brief 获取指定文件系统的操作接口
 */
static fs_op_t * get_fs_op (fs_type_t type, int major) {
   17018:	55                   	push   %ebp
   17019:	89 e5                	mov    %esp,%ebp
	switch (type) {
   1701b:	8b 45 08             	mov    0x8(%ebp),%eax
   1701e:	85 c0                	test   %eax,%eax
   17020:	74 07                	je     17029 <get_fs_op+0x11>
   17022:	83 f8 01             	cmp    $0x1,%eax
   17025:	74 09                	je     17030 <get_fs_op+0x18>
   17027:	eb 0e                	jmp    17037 <get_fs_op+0x1f>
	case FS_FAT16:
		return &fatfs_op;
   17029:	b8 40 a1 01 00       	mov    $0x1a140,%eax
   1702e:	eb 0c                	jmp    1703c <get_fs_op+0x24>
	case FS_DEVFS:
		return &devfs_op;
   17030:	b8 00 a1 01 00       	mov    $0x1a100,%eax
   17035:	eb 05                	jmp    1703c <get_fs_op+0x24>
	default:
		return (fs_op_t *)0;
   17037:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
   1703c:	5d                   	pop    %ebp
   1703d:	c3                   	ret    

0001703e <mount>:

/**
 * @brief 挂载文件系统
 */
static fs_t * mount (fs_type_t type, char * mount_point, int dev_major, int dev_minor) {
   1703e:	55                   	push   %ebp
   1703f:	89 e5                	mov    %esp,%ebp
   17041:	83 ec 28             	sub    $0x28,%esp
	fs_t * fs = (fs_t *)0;
   17044:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	log_printf("mount file system, name: %s, dev: %x", mount_point, dev_major);
   1704b:	83 ec 04             	sub    $0x4,%esp
   1704e:	ff 75 10             	pushl  0x10(%ebp)
   17051:	ff 75 0c             	pushl  0xc(%ebp)
   17054:	68 e4 9b 01 00       	push   $0x19be4
   17059:	e8 d2 19 00 00       	call   18a30 <log_printf>
   1705e:	83 c4 10             	add    $0x10,%esp

	// 遍历，查找是否已经有挂载
 	list_node_t * curr = list_first(&mounted_list);
   17061:	83 ec 0c             	sub    $0xc,%esp
   17064:	68 c0 c8 05 00       	push   $0x5c8c0
   17069:	e8 83 ff ff ff       	call   16ff1 <list_first>
   1706e:	83 c4 10             	add    $0x10,%esp
   17071:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (curr) {
   17074:	eb 59                	jmp    170cf <mount+0x91>
		fs_t * fs = list_node_parent(curr, fs_t, node);
   17076:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1707a:	74 0a                	je     17086 <mount+0x48>
   1707c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1707f:	2d 10 02 00 00       	sub    $0x210,%eax
   17084:	eb 05                	jmp    1708b <mount+0x4d>
   17086:	b8 00 00 00 00       	mov    $0x0,%eax
   1708b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (kernel_strncmp(fs->mount_point, mount_point, FS_MOUNTP_SIZE) == 0) {
   1708e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   17091:	83 ec 04             	sub    $0x4,%esp
   17094:	68 00 02 00 00       	push   $0x200
   17099:	ff 75 0c             	pushl  0xc(%ebp)
   1709c:	50                   	push   %eax
   1709d:	e8 1b 13 00 00       	call   183bd <kernel_strncmp>
   170a2:	83 c4 10             	add    $0x10,%esp
   170a5:	85 c0                	test   %eax,%eax
   170a7:	75 15                	jne    170be <mount+0x80>
			log_printf("fs alreay mounted.");
   170a9:	83 ec 0c             	sub    $0xc,%esp
   170ac:	68 09 9c 01 00       	push   $0x19c09
   170b1:	e8 7a 19 00 00       	call   18a30 <log_printf>
   170b6:	83 c4 10             	add    $0x10,%esp
			goto mount_failed;
   170b9:	e9 21 01 00 00       	jmp    171df <mount+0x1a1>
		}
		curr = list_node_next(curr);
   170be:	83 ec 0c             	sub    $0xc,%esp
   170c1:	ff 75 f0             	pushl  -0x10(%ebp)
   170c4:	e8 1d ff ff ff       	call   16fe6 <list_node_next>
   170c9:	83 c4 10             	add    $0x10,%esp
   170cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (curr) {
   170cf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   170d3:	75 a1                	jne    17076 <mount+0x38>
	}

	// 分配新的fs结构
	list_node_t * free_node = list_remove_first(&free_list);
   170d5:	83 ec 0c             	sub    $0xc,%esp
   170d8:	68 cc c8 05 00       	push   $0x5c8cc
   170dd:	e8 22 18 00 00       	call   18904 <list_remove_first>
   170e2:	83 c4 10             	add    $0x10,%esp
   170e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (!free_node) {
   170e8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   170ec:	75 15                	jne    17103 <mount+0xc5>
		log_printf("no free fs, mount failed.");
   170ee:	83 ec 0c             	sub    $0xc,%esp
   170f1:	68 1c 9c 01 00       	push   $0x19c1c
   170f6:	e8 35 19 00 00       	call   18a30 <log_printf>
   170fb:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   170fe:	e9 dc 00 00 00       	jmp    171df <mount+0x1a1>
	}
	fs = list_node_parent(free_node, fs_t, node);
   17103:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17107:	74 0a                	je     17113 <mount+0xd5>
   17109:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1710c:	2d 10 02 00 00       	sub    $0x210,%eax
   17111:	eb 05                	jmp    17118 <mount+0xda>
   17113:	b8 00 00 00 00       	mov    $0x0,%eax
   17118:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// 检查挂载的文件系统类型：不检查实际
	fs_op_t * op = get_fs_op(type, dev_major);
   1711b:	83 ec 08             	sub    $0x8,%esp
   1711e:	ff 75 10             	pushl  0x10(%ebp)
   17121:	ff 75 08             	pushl  0x8(%ebp)
   17124:	e8 ef fe ff ff       	call   17018 <get_fs_op>
   17129:	83 c4 10             	add    $0x10,%esp
   1712c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (!op) {
   1712f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   17133:	75 18                	jne    1714d <mount+0x10f>
		log_printf("unsupported fs type: %d", type);
   17135:	83 ec 08             	sub    $0x8,%esp
   17138:	ff 75 08             	pushl  0x8(%ebp)
   1713b:	68 36 9c 01 00       	push   $0x19c36
   17140:	e8 eb 18 00 00       	call   18a30 <log_printf>
   17145:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   17148:	e9 92 00 00 00       	jmp    171df <mount+0x1a1>
	}

	// 给定数据一些缺省的值
	kernel_memset(fs, 0, sizeof(fs_t));
   1714d:	83 ec 04             	sub    $0x4,%esp
   17150:	68 60 02 00 00       	push   $0x260
   17155:	6a 00                	push   $0x0
   17157:	ff 75 f4             	pushl  -0xc(%ebp)
   1715a:	e8 27 13 00 00       	call   18486 <kernel_memset>
   1715f:	83 c4 10             	add    $0x10,%esp
	kernel_strncpy(fs->mount_point, mount_point, FS_MOUNTP_SIZE);
   17162:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17165:	83 ec 04             	sub    $0x4,%esp
   17168:	68 00 02 00 00       	push   $0x200
   1716d:	ff 75 0c             	pushl  0xc(%ebp)
   17170:	50                   	push   %eax
   17171:	e8 9c 11 00 00       	call   18312 <kernel_strncpy>
   17176:	83 c4 10             	add    $0x10,%esp
	fs->op = op;
   17179:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1717c:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1717f:	89 90 04 02 00 00    	mov    %edx,0x204(%eax)
	fs->mutex = (mutex_t *)0;
   17185:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17188:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%eax)
   1718f:	00 00 00 

	// 挂载文件系统
	if (op->mount(fs, dev_major, dev_minor) < 0) {
   17192:	8b 45 e8             	mov    -0x18(%ebp),%eax
   17195:	8b 00                	mov    (%eax),%eax
   17197:	83 ec 04             	sub    $0x4,%esp
   1719a:	ff 75 14             	pushl  0x14(%ebp)
   1719d:	ff 75 10             	pushl  0x10(%ebp)
   171a0:	ff 75 f4             	pushl  -0xc(%ebp)
   171a3:	ff d0                	call   *%eax
   171a5:	83 c4 10             	add    $0x10,%esp
   171a8:	85 c0                	test   %eax,%eax
   171aa:	79 15                	jns    171c1 <mount+0x183>
		log_printf("mount fs %s failed", mount_point);
   171ac:	83 ec 08             	sub    $0x8,%esp
   171af:	ff 75 0c             	pushl  0xc(%ebp)
   171b2:	68 4e 9c 01 00       	push   $0x19c4e
   171b7:	e8 74 18 00 00       	call   18a30 <log_printf>
   171bc:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   171bf:	eb 1e                	jmp    171df <mount+0x1a1>
	}
	list_insert_last(&mounted_list, &fs->node);
   171c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   171c4:	05 10 02 00 00       	add    $0x210,%eax
   171c9:	83 ec 08             	sub    $0x8,%esp
   171cc:	50                   	push   %eax
   171cd:	68 c0 c8 05 00       	push   $0x5c8c0
   171d2:	e8 c9 16 00 00       	call   188a0 <list_insert_last>
   171d7:	83 c4 10             	add    $0x10,%esp
	return fs;
   171da:	8b 45 f4             	mov    -0xc(%ebp),%eax
   171dd:	eb 24                	jmp    17203 <mount+0x1c5>
mount_failed:
	if (fs) {
   171df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   171e3:	74 19                	je     171fe <mount+0x1c0>
		// 回收fs
		list_insert_first(&free_list, &fs->node);
   171e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   171e8:	05 10 02 00 00       	add    $0x210,%eax
   171ed:	83 ec 08             	sub    $0x8,%esp
   171f0:	50                   	push   %eax
   171f1:	68 cc c8 05 00       	push   $0x5c8cc
   171f6:	e8 46 16 00 00       	call   18841 <list_insert_first>
   171fb:	83 c4 10             	add    $0x10,%esp
	}
	return (fs_t *)0;
   171fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17203:	c9                   	leave  
   17204:	c3                   	ret    

00017205 <mount_list_init>:

/**
 * @brief 初始化挂载列表
 */
static void mount_list_init (void) {
   17205:	55                   	push   %ebp
   17206:	89 e5                	mov    %esp,%ebp
   17208:	83 ec 18             	sub    $0x18,%esp
	list_init(&free_list);
   1720b:	83 ec 0c             	sub    $0xc,%esp
   1720e:	68 cc c8 05 00       	push   $0x5c8cc
   17213:	e8 04 16 00 00       	call   1881c <list_init>
   17218:	83 c4 10             	add    $0x10,%esp
	for (int i = 0; i < FS_TABLE_SIZE; i++) {
   1721b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   17222:	eb 28                	jmp    1724c <mount_list_init+0x47>
		list_insert_first(&free_list, &fs_tbl[i].node);
   17224:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17227:	69 c0 60 02 00 00    	imul   $0x260,%eax,%eax
   1722d:	05 10 02 00 00       	add    $0x210,%eax
   17232:	05 e0 c8 05 00       	add    $0x5c8e0,%eax
   17237:	83 ec 08             	sub    $0x8,%esp
   1723a:	50                   	push   %eax
   1723b:	68 cc c8 05 00       	push   $0x5c8cc
   17240:	e8 fc 15 00 00       	call   18841 <list_insert_first>
   17245:	83 c4 10             	add    $0x10,%esp
	for (int i = 0; i < FS_TABLE_SIZE; i++) {
   17248:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1724c:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
   17250:	7e d2                	jle    17224 <mount_list_init+0x1f>
	}
	list_init(&mounted_list);
   17252:	83 ec 0c             	sub    $0xc,%esp
   17255:	68 c0 c8 05 00       	push   $0x5c8c0
   1725a:	e8 bd 15 00 00       	call   1881c <list_init>
   1725f:	83 c4 10             	add    $0x10,%esp
}
   17262:	90                   	nop
   17263:	c9                   	leave  
   17264:	c3                   	ret    

00017265 <fs_init>:

/**
 * @brief 文件系统初始化
 */
void fs_init (void) {
   17265:	55                   	push   %ebp
   17266:	89 e5                	mov    %esp,%ebp
   17268:	83 ec 18             	sub    $0x18,%esp
	mount_list_init();
   1726b:	e8 95 ff ff ff       	call   17205 <mount_list_init>
    file_table_init();
   17270:	e8 41 fd ff ff       	call   16fb6 <file_table_init>

	// 磁盘检查
	disk_init();
   17275:	e8 96 d4 ff ff       	call   14710 <disk_init>

	// 挂载设备文件系统，待后续完成。挂载点名称可随意
	fs_t * fs = mount(FS_DEVFS, "/dev", 0, 0);
   1727a:	6a 00                	push   $0x0
   1727c:	6a 00                	push   $0x0
   1727e:	68 61 9c 01 00       	push   $0x19c61
   17283:	6a 01                	push   $0x1
   17285:	e8 b4 fd ff ff       	call   1703e <mount>
   1728a:	83 c4 10             	add    $0x10,%esp
   1728d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ASSERT(fs != (fs_t *)0);
   17290:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17294:	75 1c                	jne    172b2 <fs_init+0x4d>
   17296:	68 66 9c 01 00       	push   $0x19c66
   1729b:	68 50 9d 01 00       	push   $0x19d50
   172a0:	68 83 00 00 00       	push   $0x83
   172a5:	68 78 9c 01 00       	push   $0x19c78
   172aa:	e8 24 15 00 00       	call   187d3 <panic>
   172af:	83 c4 10             	add    $0x10,%esp

	// 挂载根文件系统
	root_fs = mount(FS_FAT16, "/home", ROOT_DEV);
   172b2:	68 b1 00 00 00       	push   $0xb1
   172b7:	6a 02                	push   $0x2
   172b9:	68 a5 9c 01 00       	push   $0x19ca5
   172be:	6a 00                	push   $0x0
   172c0:	e8 79 fd ff ff       	call   1703e <mount>
   172c5:	83 c4 10             	add    $0x10,%esp
   172c8:	a3 a0 e0 05 00       	mov    %eax,0x5e0a0
	ASSERT(root_fs != (fs_t *)0);
   172cd:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   172d2:	85 c0                	test   %eax,%eax
   172d4:	75 1c                	jne    172f2 <fs_init+0x8d>
   172d6:	68 ab 9c 01 00       	push   $0x19cab
   172db:	68 50 9d 01 00       	push   $0x19d50
   172e0:	68 87 00 00 00       	push   $0x87
   172e5:	68 78 9c 01 00       	push   $0x19c78
   172ea:	e8 e4 14 00 00       	call   187d3 <panic>
   172ef:	83 c4 10             	add    $0x10,%esp
}
   172f2:	90                   	nop
   172f3:	c9                   	leave  
   172f4:	c3                   	ret    

000172f5 <path_to_num>:

/**
 * @brief 转换目录为数字
 */
int path_to_num (const char * path, int * num) {
   172f5:	55                   	push   %ebp
   172f6:	89 e5                	mov    %esp,%ebp
   172f8:	83 ec 10             	sub    $0x10,%esp
	int n = 0;
   172fb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

	const char * c = path;
   17302:	8b 45 08             	mov    0x8(%ebp),%eax
   17305:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (*c && *c != '/') {
   17308:	eb 23                	jmp    1732d <path_to_num+0x38>
		n = n * 10 + *c - '0';
   1730a:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1730d:	89 d0                	mov    %edx,%eax
   1730f:	c1 e0 02             	shl    $0x2,%eax
   17312:	01 d0                	add    %edx,%eax
   17314:	01 c0                	add    %eax,%eax
   17316:	89 c2                	mov    %eax,%edx
   17318:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1731b:	0f b6 00             	movzbl (%eax),%eax
   1731e:	0f be c0             	movsbl %al,%eax
   17321:	01 d0                	add    %edx,%eax
   17323:	83 e8 30             	sub    $0x30,%eax
   17326:	89 45 fc             	mov    %eax,-0x4(%ebp)
		c++;
   17329:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*c && *c != '/') {
   1732d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17330:	0f b6 00             	movzbl (%eax),%eax
   17333:	84 c0                	test   %al,%al
   17335:	74 0a                	je     17341 <path_to_num+0x4c>
   17337:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1733a:	0f b6 00             	movzbl (%eax),%eax
   1733d:	3c 2f                	cmp    $0x2f,%al
   1733f:	75 c9                	jne    1730a <path_to_num+0x15>
	}
	*num = n;
   17341:	8b 45 0c             	mov    0xc(%ebp),%eax
   17344:	8b 55 fc             	mov    -0x4(%ebp),%edx
   17347:	89 10                	mov    %edx,(%eax)
	return 0;
   17349:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1734e:	c9                   	leave  
   1734f:	c3                   	ret    

00017350 <path_begin_with>:

/**
 * @brief 判断路径是否以xx开头
 */
int path_begin_with (const char * path, const char * str) {
   17350:	55                   	push   %ebp
   17351:	89 e5                	mov    %esp,%ebp
   17353:	83 ec 10             	sub    $0x10,%esp
	const char * s1 = path, * s2 = str;
   17356:	8b 45 08             	mov    0x8(%ebp),%eax
   17359:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1735c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1735f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (*s1 && *s2 && (*s1 == *s2)) {
   17362:	eb 08                	jmp    1736c <path_begin_with+0x1c>
		s1++;
   17364:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
		s2++;
   17368:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*s1 && *s2 && (*s1 == *s2)) {
   1736c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1736f:	0f b6 00             	movzbl (%eax),%eax
   17372:	84 c0                	test   %al,%al
   17374:	74 1a                	je     17390 <path_begin_with+0x40>
   17376:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17379:	0f b6 00             	movzbl (%eax),%eax
   1737c:	84 c0                	test   %al,%al
   1737e:	74 10                	je     17390 <path_begin_with+0x40>
   17380:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17383:	0f b6 10             	movzbl (%eax),%edx
   17386:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17389:	0f b6 00             	movzbl (%eax),%eax
   1738c:	38 c2                	cmp    %al,%dl
   1738e:	74 d4                	je     17364 <path_begin_with+0x14>
	}

	return *s2 == '\0';
   17390:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17393:	0f b6 00             	movzbl (%eax),%eax
   17396:	84 c0                	test   %al,%al
   17398:	0f 94 c0             	sete   %al
   1739b:	0f b6 c0             	movzbl %al,%eax
}
   1739e:	c9                   	leave  
   1739f:	c3                   	ret    

000173a0 <path_next_child>:

/**
 * @brief 获取下一级子目录
 */
const char * path_next_child (const char * path) {
   173a0:	55                   	push   %ebp
   173a1:	89 e5                	mov    %esp,%ebp
   173a3:	83 ec 10             	sub    $0x10,%esp
   const char * c = path;
   173a6:	8b 45 08             	mov    0x8(%ebp),%eax
   173a9:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (*c && (*c++ == '/')) {}
   173ac:	90                   	nop
   173ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173b0:	0f b6 00             	movzbl (%eax),%eax
   173b3:	84 c0                	test   %al,%al
   173b5:	74 10                	je     173c7 <path_next_child+0x27>
   173b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173ba:	8d 50 01             	lea    0x1(%eax),%edx
   173bd:	89 55 fc             	mov    %edx,-0x4(%ebp)
   173c0:	0f b6 00             	movzbl (%eax),%eax
   173c3:	3c 2f                	cmp    $0x2f,%al
   173c5:	74 e6                	je     173ad <path_next_child+0xd>
    while (*c && (*c++ != '/')) {}
   173c7:	90                   	nop
   173c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173cb:	0f b6 00             	movzbl (%eax),%eax
   173ce:	84 c0                	test   %al,%al
   173d0:	74 10                	je     173e2 <path_next_child+0x42>
   173d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173d5:	8d 50 01             	lea    0x1(%eax),%edx
   173d8:	89 55 fc             	mov    %edx,-0x4(%ebp)
   173db:	0f b6 00             	movzbl (%eax),%eax
   173de:	3c 2f                	cmp    $0x2f,%al
   173e0:	75 e6                	jne    173c8 <path_next_child+0x28>
    return *c ? c : (const char *)0;
   173e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173e5:	0f b6 00             	movzbl (%eax),%eax
   173e8:	84 c0                	test   %al,%al
   173ea:	74 05                	je     173f1 <path_next_child+0x51>
   173ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173ef:	eb 05                	jmp    173f6 <path_next_child+0x56>
   173f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   173f6:	c9                   	leave  
   173f7:	c3                   	ret    

000173f8 <fs_protect>:

static void fs_protect (fs_t * fs) {
   173f8:	55                   	push   %ebp
   173f9:	89 e5                	mov    %esp,%ebp
   173fb:	83 ec 08             	sub    $0x8,%esp
	if (fs->mutex) {
   173fe:	8b 45 08             	mov    0x8(%ebp),%eax
   17401:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   17407:	85 c0                	test   %eax,%eax
   17409:	74 15                	je     17420 <fs_protect+0x28>
		mutex_lock(fs->mutex);
   1740b:	8b 45 08             	mov    0x8(%ebp),%eax
   1740e:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   17414:	83 ec 0c             	sub    $0xc,%esp
   17417:	50                   	push   %eax
   17418:	e8 4c 09 00 00       	call   17d69 <mutex_lock>
   1741d:	83 c4 10             	add    $0x10,%esp
	}
}
   17420:	90                   	nop
   17421:	c9                   	leave  
   17422:	c3                   	ret    

00017423 <fs_unprotect>:

static void fs_unprotect (fs_t * fs) {
   17423:	55                   	push   %ebp
   17424:	89 e5                	mov    %esp,%ebp
   17426:	83 ec 08             	sub    $0x8,%esp
	if (fs->mutex) {
   17429:	8b 45 08             	mov    0x8(%ebp),%eax
   1742c:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   17432:	85 c0                	test   %eax,%eax
   17434:	74 15                	je     1744b <fs_unprotect+0x28>
		mutex_unlock(fs->mutex);
   17436:	8b 45 08             	mov    0x8(%ebp),%eax
   17439:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   1743f:	83 ec 0c             	sub    $0xc,%esp
   17442:	50                   	push   %eax
   17443:	e8 b8 09 00 00       	call   17e00 <mutex_unlock>
   17448:	83 c4 10             	add    $0x10,%esp
	}
}
   1744b:	90                   	nop
   1744c:	c9                   	leave  
   1744d:	c3                   	ret    

0001744e <sys_open>:

/**
 * 打开文件
 */
int sys_open(const char *name, int flags, ...) {
   1744e:	55                   	push   %ebp
   1744f:	89 e5                	mov    %esp,%ebp
   17451:	83 ec 28             	sub    $0x28,%esp
	// 分配文件描述符链接
	file_t * file = file_alloc();
   17454:	e8 58 fa ff ff       	call   16eb1 <file_alloc>
   17459:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (!file) {
   1745c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17460:	75 0a                	jne    1746c <sys_open+0x1e>
		return -1;
   17462:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17467:	e9 62 01 00 00       	jmp    175ce <sys_open+0x180>
	}

	int fd = task_alloc_fd(file);
   1746c:	83 ec 0c             	sub    $0xc,%esp
   1746f:	ff 75 ec             	pushl  -0x14(%ebp)
   17472:	e8 d2 a2 ff ff       	call   11749 <task_alloc_fd>
   17477:	83 c4 10             	add    $0x10,%esp
   1747a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (fd < 0) {
   1747d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   17481:	0f 88 1f 01 00 00    	js     175a6 <sys_open+0x158>
		goto sys_open_failed;
	}

	// 检查名称是否以挂载点开头，如果没有，则认为name在根目录下
	// 即只允许根目录下的遍历
	fs_t * fs = (fs_t *)0;
   17487:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	list_node_t * node = list_first(&mounted_list);
   1748e:	83 ec 0c             	sub    $0xc,%esp
   17491:	68 c0 c8 05 00       	push   $0x5c8c0
   17496:	e8 56 fb ff ff       	call   16ff1 <list_first>
   1749b:	83 c4 10             	add    $0x10,%esp
   1749e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (node) {
   174a1:	eb 47                	jmp    174ea <sys_open+0x9c>
		fs_t * curr = list_node_parent(node, fs_t, node);
   174a3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   174a7:	74 0a                	je     174b3 <sys_open+0x65>
   174a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   174ac:	2d 10 02 00 00       	sub    $0x210,%eax
   174b1:	eb 05                	jmp    174b8 <sys_open+0x6a>
   174b3:	b8 00 00 00 00       	mov    $0x0,%eax
   174b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (path_begin_with(name, curr->mount_point)) {
   174bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   174be:	83 ec 08             	sub    $0x8,%esp
   174c1:	50                   	push   %eax
   174c2:	ff 75 08             	pushl  0x8(%ebp)
   174c5:	e8 86 fe ff ff       	call   17350 <path_begin_with>
   174ca:	83 c4 10             	add    $0x10,%esp
   174cd:	85 c0                	test   %eax,%eax
   174cf:	74 08                	je     174d9 <sys_open+0x8b>
			fs = curr;
   174d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   174d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
   174d7:	eb 17                	jmp    174f0 <sys_open+0xa2>
		}
		node = list_node_next(node);
   174d9:	83 ec 0c             	sub    $0xc,%esp
   174dc:	ff 75 f0             	pushl  -0x10(%ebp)
   174df:	e8 02 fb ff ff       	call   16fe6 <list_node_next>
   174e4:	83 c4 10             	add    $0x10,%esp
   174e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (node) {
   174ea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   174ee:	75 b3                	jne    174a3 <sys_open+0x55>
	}

	if (fs) {
   174f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   174f4:	74 13                	je     17509 <sys_open+0xbb>
		name = path_next_child(name);
   174f6:	83 ec 0c             	sub    $0xc,%esp
   174f9:	ff 75 08             	pushl  0x8(%ebp)
   174fc:	e8 9f fe ff ff       	call   173a0 <path_next_child>
   17501:	83 c4 10             	add    $0x10,%esp
   17504:	89 45 08             	mov    %eax,0x8(%ebp)
   17507:	eb 08                	jmp    17511 <sys_open+0xc3>
	} else {
		fs = root_fs;
   17509:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   1750e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	file->mode = flags;
   17511:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17514:	8b 55 0c             	mov    0xc(%ebp),%edx
   17517:	89 50 40             	mov    %edx,0x40(%eax)
	file->fs = fs;
   1751a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1751d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   17520:	89 50 44             	mov    %edx,0x44(%eax)
	kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   17523:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17526:	83 ec 04             	sub    $0x4,%esp
   17529:	6a 20                	push   $0x20
   1752b:	ff 75 08             	pushl  0x8(%ebp)
   1752e:	50                   	push   %eax
   1752f:	e8 de 0d 00 00       	call   18312 <kernel_strncpy>
   17534:	83 c4 10             	add    $0x10,%esp

	fs_protect(fs);
   17537:	83 ec 0c             	sub    $0xc,%esp
   1753a:	ff 75 f4             	pushl  -0xc(%ebp)
   1753d:	e8 b6 fe ff ff       	call   173f8 <fs_protect>
   17542:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->open(fs, name, file);
   17545:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17548:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   1754e:	8b 40 08             	mov    0x8(%eax),%eax
   17551:	83 ec 04             	sub    $0x4,%esp
   17554:	ff 75 ec             	pushl  -0x14(%ebp)
   17557:	ff 75 08             	pushl  0x8(%ebp)
   1755a:	ff 75 f4             	pushl  -0xc(%ebp)
   1755d:	ff d0                	call   *%eax
   1755f:	83 c4 10             	add    $0x10,%esp
   17562:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (err < 0) {
   17565:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   17569:	79 28                	jns    17593 <sys_open+0x145>
		fs_unprotect(fs);
   1756b:	83 ec 0c             	sub    $0xc,%esp
   1756e:	ff 75 f4             	pushl  -0xc(%ebp)
   17571:	e8 ad fe ff ff       	call   17423 <fs_unprotect>
   17576:	83 c4 10             	add    $0x10,%esp

		log_printf("open %s failed.", name);
   17579:	83 ec 08             	sub    $0x8,%esp
   1757c:	ff 75 08             	pushl  0x8(%ebp)
   1757f:	68 c0 9c 01 00       	push   $0x19cc0
   17584:	e8 a7 14 00 00       	call   18a30 <log_printf>
   17589:	83 c4 10             	add    $0x10,%esp
		return -1;
   1758c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17591:	eb 3b                	jmp    175ce <sys_open+0x180>
	}
	fs_unprotect(fs);
   17593:	83 ec 0c             	sub    $0xc,%esp
   17596:	ff 75 f4             	pushl  -0xc(%ebp)
   17599:	e8 85 fe ff ff       	call   17423 <fs_unprotect>
   1759e:	83 c4 10             	add    $0x10,%esp

	return fd;
   175a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   175a4:	eb 28                	jmp    175ce <sys_open+0x180>
		goto sys_open_failed;
   175a6:	90                   	nop

sys_open_failed:
	file_free(file);
   175a7:	83 ec 0c             	sub    $0xc,%esp
   175aa:	ff 75 ec             	pushl  -0x14(%ebp)
   175ad:	e8 8a f9 ff ff       	call   16f3c <file_free>
   175b2:	83 c4 10             	add    $0x10,%esp
	if (fd >= 0) {
   175b5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   175b9:	78 0e                	js     175c9 <sys_open+0x17b>
		task_remove_fd(fd);
   175bb:	83 ec 0c             	sub    $0xc,%esp
   175be:	ff 75 e8             	pushl  -0x18(%ebp)
   175c1:	e8 d6 a1 ff ff       	call   1179c <task_remove_fd>
   175c6:	83 c4 10             	add    $0x10,%esp
	}
	return -1;
   175c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   175ce:	c9                   	leave  
   175cf:	c3                   	ret    

000175d0 <sys_dup>:

/**
 * 复制一个文件描述符
 */
int sys_dup (int file) {
   175d0:	55                   	push   %ebp
   175d1:	89 e5                	mov    %esp,%ebp
   175d3:	83 ec 18             	sub    $0x18,%esp
	// 超出进程所能打开的全部，退出
	if (is_fd_bad(file)) {
   175d6:	ff 75 08             	pushl  0x8(%ebp)
   175d9:	e8 1d fa ff ff       	call   16ffb <is_fd_bad>
   175de:	83 c4 04             	add    $0x4,%esp
   175e1:	85 c0                	test   %eax,%eax
   175e3:	74 1a                	je     175ff <sys_dup+0x2f>
        log_printf("file(%d) is not valid.", file);
   175e5:	83 ec 08             	sub    $0x8,%esp
   175e8:	ff 75 08             	pushl  0x8(%ebp)
   175eb:	68 d0 9c 01 00       	push   $0x19cd0
   175f0:	e8 3b 14 00 00       	call   18a30 <log_printf>
   175f5:	83 c4 10             	add    $0x10,%esp
		return -1;
   175f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   175fd:	eb 6d                	jmp    1766c <sys_dup+0x9c>
	}

	file_t * p_file = task_file(file);
   175ff:	83 ec 0c             	sub    $0xc,%esp
   17602:	ff 75 08             	pushl  0x8(%ebp)
   17605:	e8 0d a1 ff ff       	call   11717 <task_file>
   1760a:	83 c4 10             	add    $0x10,%esp
   1760d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   17610:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17614:	75 17                	jne    1762d <sys_dup+0x5d>
		log_printf("file not opened");
   17616:	83 ec 0c             	sub    $0xc,%esp
   17619:	68 e7 9c 01 00       	push   $0x19ce7
   1761e:	e8 0d 14 00 00       	call   18a30 <log_printf>
   17623:	83 c4 10             	add    $0x10,%esp
		return -1;
   17626:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1762b:	eb 3f                	jmp    1766c <sys_dup+0x9c>
	}

	int fd = task_alloc_fd(p_file);	// 新fd指向同一描述符
   1762d:	83 ec 0c             	sub    $0xc,%esp
   17630:	ff 75 f4             	pushl  -0xc(%ebp)
   17633:	e8 11 a1 ff ff       	call   11749 <task_alloc_fd>
   17638:	83 c4 10             	add    $0x10,%esp
   1763b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (fd >= 0) {
   1763e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17642:	78 13                	js     17657 <sys_dup+0x87>
		file_inc_ref(p_file);
   17644:	83 ec 0c             	sub    $0xc,%esp
   17647:	ff 75 f4             	pushl  -0xc(%ebp)
   1764a:	e8 2f f9 ff ff       	call   16f7e <file_inc_ref>
   1764f:	83 c4 10             	add    $0x10,%esp
		return fd;
   17652:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17655:	eb 15                	jmp    1766c <sys_dup+0x9c>
	}

	log_printf("No task file avaliable");
   17657:	83 ec 0c             	sub    $0xc,%esp
   1765a:	68 f7 9c 01 00       	push   $0x19cf7
   1765f:	e8 cc 13 00 00       	call   18a30 <log_printf>
   17664:	83 c4 10             	add    $0x10,%esp
    return -1;
   17667:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1766c:	c9                   	leave  
   1766d:	c3                   	ret    

0001766e <sys_ioctl>:

/**
 * @brief IO设备控制
 */
int sys_ioctl(int fd, int cmd, int arg0, int arg1) {
   1766e:	55                   	push   %ebp
   1766f:	89 e5                	mov    %esp,%ebp
   17671:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(fd)) {
   17674:	ff 75 08             	pushl  0x8(%ebp)
   17677:	e8 7f f9 ff ff       	call   16ffb <is_fd_bad>
   1767c:	83 c4 04             	add    $0x4,%esp
   1767f:	85 c0                	test   %eax,%eax
   17681:	74 07                	je     1768a <sys_ioctl+0x1c>
		return 0;
   17683:	b8 00 00 00 00       	mov    $0x0,%eax
   17688:	eb 66                	jmp    176f0 <sys_ioctl+0x82>
	}

	file_t * pfile = task_file(fd);
   1768a:	83 ec 0c             	sub    $0xc,%esp
   1768d:	ff 75 08             	pushl  0x8(%ebp)
   17690:	e8 82 a0 ff ff       	call   11717 <task_file>
   17695:	83 c4 10             	add    $0x10,%esp
   17698:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pfile == (file_t *)0) {
   1769b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1769f:	75 07                	jne    176a8 <sys_ioctl+0x3a>
		return 0;
   176a1:	b8 00 00 00 00       	mov    $0x0,%eax
   176a6:	eb 48                	jmp    176f0 <sys_ioctl+0x82>
	}

	fs_t * fs = pfile->fs;
   176a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   176ab:	8b 40 44             	mov    0x44(%eax),%eax
   176ae:	89 45 f0             	mov    %eax,-0x10(%ebp)

	fs_protect(fs);
   176b1:	83 ec 0c             	sub    $0xc,%esp
   176b4:	ff 75 f0             	pushl  -0x10(%ebp)
   176b7:	e8 3c fd ff ff       	call   173f8 <fs_protect>
   176bc:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->ioctl(pfile, cmd, arg0, arg1);
   176bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   176c2:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   176c8:	8b 40 20             	mov    0x20(%eax),%eax
   176cb:	ff 75 14             	pushl  0x14(%ebp)
   176ce:	ff 75 10             	pushl  0x10(%ebp)
   176d1:	ff 75 0c             	pushl  0xc(%ebp)
   176d4:	ff 75 f4             	pushl  -0xc(%ebp)
   176d7:	ff d0                	call   *%eax
   176d9:	83 c4 10             	add    $0x10,%esp
   176dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   176df:	83 ec 0c             	sub    $0xc,%esp
   176e2:	ff 75 f0             	pushl  -0x10(%ebp)
   176e5:	e8 39 fd ff ff       	call   17423 <fs_unprotect>
   176ea:	83 c4 10             	add    $0x10,%esp
	return err;
   176ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   176f0:	c9                   	leave  
   176f1:	c3                   	ret    

000176f2 <sys_read>:

/**
 * 读取文件api
 */
int sys_read(int file, char *ptr, int len) {
   176f2:	55                   	push   %ebp
   176f3:	89 e5                	mov    %esp,%ebp
   176f5:	83 ec 18             	sub    $0x18,%esp
    if (is_fd_bad(file) || !ptr || !len) {
   176f8:	ff 75 08             	pushl  0x8(%ebp)
   176fb:	e8 fb f8 ff ff       	call   16ffb <is_fd_bad>
   17700:	83 c4 04             	add    $0x4,%esp
   17703:	85 c0                	test   %eax,%eax
   17705:	75 0c                	jne    17713 <sys_read+0x21>
   17707:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1770b:	74 06                	je     17713 <sys_read+0x21>
   1770d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   17711:	75 0a                	jne    1771d <sys_read+0x2b>
		return 0;
   17713:	b8 00 00 00 00       	mov    $0x0,%eax
   17718:	e9 98 00 00 00       	jmp    177b5 <sys_read+0xc3>
	}

	file_t * p_file = task_file(file);
   1771d:	83 ec 0c             	sub    $0xc,%esp
   17720:	ff 75 08             	pushl  0x8(%ebp)
   17723:	e8 ef 9f ff ff       	call   11717 <task_file>
   17728:	83 c4 10             	add    $0x10,%esp
   1772b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   1772e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17732:	75 17                	jne    1774b <sys_read+0x59>
		log_printf("file not opened");
   17734:	83 ec 0c             	sub    $0xc,%esp
   17737:	68 e7 9c 01 00       	push   $0x19ce7
   1773c:	e8 ef 12 00 00       	call   18a30 <log_printf>
   17741:	83 c4 10             	add    $0x10,%esp
		return -1;
   17744:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17749:	eb 6a                	jmp    177b5 <sys_read+0xc3>
	}

	if (p_file->mode == O_WRONLY) {
   1774b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1774e:	8b 40 40             	mov    0x40(%eax),%eax
   17751:	83 f8 01             	cmp    $0x1,%eax
   17754:	75 17                	jne    1776d <sys_read+0x7b>
		log_printf("file is write only");
   17756:	83 ec 0c             	sub    $0xc,%esp
   17759:	68 0e 9d 01 00       	push   $0x19d0e
   1775e:	e8 cd 12 00 00       	call   18a30 <log_printf>
   17763:	83 c4 10             	add    $0x10,%esp
		return -1;
   17766:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1776b:	eb 48                	jmp    177b5 <sys_read+0xc3>
	}

	// 读取文件
	fs_t * fs = p_file->fs;
   1776d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17770:	8b 40 44             	mov    0x44(%eax),%eax
   17773:	89 45 f0             	mov    %eax,-0x10(%ebp)
	fs_protect(fs);
   17776:	83 ec 0c             	sub    $0xc,%esp
   17779:	ff 75 f0             	pushl  -0x10(%ebp)
   1777c:	e8 77 fc ff ff       	call   173f8 <fs_protect>
   17781:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->read(ptr, len, p_file);
   17784:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17787:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   1778d:	8b 40 0c             	mov    0xc(%eax),%eax
   17790:	83 ec 04             	sub    $0x4,%esp
   17793:	ff 75 f4             	pushl  -0xc(%ebp)
   17796:	ff 75 10             	pushl  0x10(%ebp)
   17799:	ff 75 0c             	pushl  0xc(%ebp)
   1779c:	ff d0                	call   *%eax
   1779e:	83 c4 10             	add    $0x10,%esp
   177a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   177a4:	83 ec 0c             	sub    $0xc,%esp
   177a7:	ff 75 f0             	pushl  -0x10(%ebp)
   177aa:	e8 74 fc ff ff       	call   17423 <fs_unprotect>
   177af:	83 c4 10             	add    $0x10,%esp
	return err;
   177b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   177b5:	c9                   	leave  
   177b6:	c3                   	ret    

000177b7 <sys_write>:

/**
 * 写文件
 */
int sys_write(int file, char *ptr, int len) {
   177b7:	55                   	push   %ebp
   177b8:	89 e5                	mov    %esp,%ebp
   177ba:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file) || !ptr || !len) {
   177bd:	ff 75 08             	pushl  0x8(%ebp)
   177c0:	e8 36 f8 ff ff       	call   16ffb <is_fd_bad>
   177c5:	83 c4 04             	add    $0x4,%esp
   177c8:	85 c0                	test   %eax,%eax
   177ca:	75 0c                	jne    177d8 <sys_write+0x21>
   177cc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   177d0:	74 06                	je     177d8 <sys_write+0x21>
   177d2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   177d6:	75 0a                	jne    177e2 <sys_write+0x2b>
		return 0;
   177d8:	b8 00 00 00 00       	mov    $0x0,%eax
   177dd:	e9 97 00 00 00       	jmp    17879 <sys_write+0xc2>
	}

	file_t * p_file = task_file(file);
   177e2:	83 ec 0c             	sub    $0xc,%esp
   177e5:	ff 75 08             	pushl  0x8(%ebp)
   177e8:	e8 2a 9f ff ff       	call   11717 <task_file>
   177ed:	83 c4 10             	add    $0x10,%esp
   177f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   177f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   177f7:	75 17                	jne    17810 <sys_write+0x59>
		log_printf("file not opened");
   177f9:	83 ec 0c             	sub    $0xc,%esp
   177fc:	68 e7 9c 01 00       	push   $0x19ce7
   17801:	e8 2a 12 00 00       	call   18a30 <log_printf>
   17806:	83 c4 10             	add    $0x10,%esp
		return -1;
   17809:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1780e:	eb 69                	jmp    17879 <sys_write+0xc2>
	}

	if (p_file->mode == O_RDONLY) {
   17810:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17813:	8b 40 40             	mov    0x40(%eax),%eax
   17816:	85 c0                	test   %eax,%eax
   17818:	75 17                	jne    17831 <sys_write+0x7a>
		log_printf("file is write only");
   1781a:	83 ec 0c             	sub    $0xc,%esp
   1781d:	68 0e 9d 01 00       	push   $0x19d0e
   17822:	e8 09 12 00 00       	call   18a30 <log_printf>
   17827:	83 c4 10             	add    $0x10,%esp
		return -1;
   1782a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1782f:	eb 48                	jmp    17879 <sys_write+0xc2>
	}

	// 写入文件
	fs_t * fs = p_file->fs;
   17831:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17834:	8b 40 44             	mov    0x44(%eax),%eax
   17837:	89 45 f0             	mov    %eax,-0x10(%ebp)
	fs_protect(fs);
   1783a:	83 ec 0c             	sub    $0xc,%esp
   1783d:	ff 75 f0             	pushl  -0x10(%ebp)
   17840:	e8 b3 fb ff ff       	call   173f8 <fs_protect>
   17845:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->write(ptr, len, p_file);
   17848:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1784b:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17851:	8b 40 10             	mov    0x10(%eax),%eax
   17854:	83 ec 04             	sub    $0x4,%esp
   17857:	ff 75 f4             	pushl  -0xc(%ebp)
   1785a:	ff 75 10             	pushl  0x10(%ebp)
   1785d:	ff 75 0c             	pushl  0xc(%ebp)
   17860:	ff d0                	call   *%eax
   17862:	83 c4 10             	add    $0x10,%esp
   17865:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   17868:	83 ec 0c             	sub    $0xc,%esp
   1786b:	ff 75 f0             	pushl  -0x10(%ebp)
   1786e:	e8 b0 fb ff ff       	call   17423 <fs_unprotect>
   17873:	83 c4 10             	add    $0x10,%esp
	return err;
   17876:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17879:	c9                   	leave  
   1787a:	c3                   	ret    

0001787b <sys_lseek>:

/**
 * 文件访问位置定位
 */
int sys_lseek(int file, int ptr, int dir) {
   1787b:	55                   	push   %ebp
   1787c:	89 e5                	mov    %esp,%ebp
   1787e:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   17881:	ff 75 08             	pushl  0x8(%ebp)
   17884:	e8 72 f7 ff ff       	call   16ffb <is_fd_bad>
   17889:	83 c4 04             	add    $0x4,%esp
   1788c:	85 c0                	test   %eax,%eax
   1788e:	74 07                	je     17897 <sys_lseek+0x1c>
		return -1;
   17890:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17895:	eb 77                	jmp    1790e <sys_lseek+0x93>
	}

	file_t * p_file = task_file(file);
   17897:	83 ec 0c             	sub    $0xc,%esp
   1789a:	ff 75 08             	pushl  0x8(%ebp)
   1789d:	e8 75 9e ff ff       	call   11717 <task_file>
   178a2:	83 c4 10             	add    $0x10,%esp
   178a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   178a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   178ac:	75 17                	jne    178c5 <sys_lseek+0x4a>
		log_printf("file not opened");
   178ae:	83 ec 0c             	sub    $0xc,%esp
   178b1:	68 e7 9c 01 00       	push   $0x19ce7
   178b6:	e8 75 11 00 00       	call   18a30 <log_printf>
   178bb:	83 c4 10             	add    $0x10,%esp
		return -1;
   178be:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   178c3:	eb 49                	jmp    1790e <sys_lseek+0x93>
	}

	// 写入文件
	fs_t * fs = p_file->fs;
   178c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   178c8:	8b 40 44             	mov    0x44(%eax),%eax
   178cb:	89 45 f0             	mov    %eax,-0x10(%ebp)

	fs_protect(fs);
   178ce:	83 ec 0c             	sub    $0xc,%esp
   178d1:	ff 75 f0             	pushl  -0x10(%ebp)
   178d4:	e8 1f fb ff ff       	call   173f8 <fs_protect>
   178d9:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->seek(p_file, ptr, dir);
   178dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   178df:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   178e5:	8b 40 18             	mov    0x18(%eax),%eax
   178e8:	8b 55 0c             	mov    0xc(%ebp),%edx
   178eb:	83 ec 04             	sub    $0x4,%esp
   178ee:	ff 75 10             	pushl  0x10(%ebp)
   178f1:	52                   	push   %edx
   178f2:	ff 75 f4             	pushl  -0xc(%ebp)
   178f5:	ff d0                	call   *%eax
   178f7:	83 c4 10             	add    $0x10,%esp
   178fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   178fd:	83 ec 0c             	sub    $0xc,%esp
   17900:	ff 75 f0             	pushl  -0x10(%ebp)
   17903:	e8 1b fb ff ff       	call   17423 <fs_unprotect>
   17908:	83 c4 10             	add    $0x10,%esp
	return err;
   1790b:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   1790e:	c9                   	leave  
   1790f:	c3                   	ret    

00017910 <sys_close>:

/**
 * 关闭文件
 */
int sys_close(int file) {
   17910:	55                   	push   %ebp
   17911:	89 e5                	mov    %esp,%ebp
   17913:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   17916:	ff 75 08             	pushl  0x8(%ebp)
   17919:	e8 dd f6 ff ff       	call   16ffb <is_fd_bad>
   1791e:	83 c4 04             	add    $0x4,%esp
   17921:	85 c0                	test   %eax,%eax
   17923:	74 1a                	je     1793f <sys_close+0x2f>
		log_printf("file error");
   17925:	83 ec 0c             	sub    $0xc,%esp
   17928:	68 21 9d 01 00       	push   $0x19d21
   1792d:	e8 fe 10 00 00       	call   18a30 <log_printf>
   17932:	83 c4 10             	add    $0x10,%esp
		return -1;
   17935:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1793a:	e9 cb 00 00 00       	jmp    17a0a <sys_close+0xfa>
	}

	file_t * p_file = task_file(file);
   1793f:	83 ec 0c             	sub    $0xc,%esp
   17942:	ff 75 08             	pushl  0x8(%ebp)
   17945:	e8 cd 9d ff ff       	call   11717 <task_file>
   1794a:	83 c4 10             	add    $0x10,%esp
   1794d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (p_file == (file_t *)0) {
   17950:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17954:	75 1d                	jne    17973 <sys_close+0x63>
		log_printf("file not opened. %d", file);
   17956:	83 ec 08             	sub    $0x8,%esp
   17959:	ff 75 08             	pushl  0x8(%ebp)
   1795c:	68 2c 9d 01 00       	push   $0x19d2c
   17961:	e8 ca 10 00 00       	call   18a30 <log_printf>
   17966:	83 c4 10             	add    $0x10,%esp
		return -1;
   17969:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1796e:	e9 97 00 00 00       	jmp    17a0a <sys_close+0xfa>
	}

	ASSERT(p_file->ref > 0);
   17973:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17976:	8b 40 28             	mov    0x28(%eax),%eax
   17979:	85 c0                	test   %eax,%eax
   1797b:	7f 1c                	jg     17999 <sys_close+0x89>
   1797d:	68 40 9d 01 00       	push   $0x19d40
   17982:	68 58 9d 01 00       	push   $0x19d58
   17987:	68 82 01 00 00       	push   $0x182
   1798c:	68 78 9c 01 00       	push   $0x19c78
   17991:	e8 3d 0e 00 00       	call   187d3 <panic>
   17996:	83 c4 10             	add    $0x10,%esp

	if (p_file->ref-- == 1) {
   17999:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1799c:	8b 40 28             	mov    0x28(%eax),%eax
   1799f:	8d 48 ff             	lea    -0x1(%eax),%ecx
   179a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
   179a5:	89 4a 28             	mov    %ecx,0x28(%edx)
   179a8:	83 f8 01             	cmp    $0x1,%eax
   179ab:	75 4a                	jne    179f7 <sys_close+0xe7>
		fs_t * fs = p_file->fs;
   179ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
   179b0:	8b 40 44             	mov    0x44(%eax),%eax
   179b3:	89 45 f0             	mov    %eax,-0x10(%ebp)

		fs_protect(fs);
   179b6:	83 ec 0c             	sub    $0xc,%esp
   179b9:	ff 75 f0             	pushl  -0x10(%ebp)
   179bc:	e8 37 fa ff ff       	call   173f8 <fs_protect>
   179c1:	83 c4 10             	add    $0x10,%esp
		fs->op->close(p_file);
   179c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   179c7:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   179cd:	8b 40 14             	mov    0x14(%eax),%eax
   179d0:	83 ec 0c             	sub    $0xc,%esp
   179d3:	ff 75 f4             	pushl  -0xc(%ebp)
   179d6:	ff d0                	call   *%eax
   179d8:	83 c4 10             	add    $0x10,%esp
		fs_unprotect(fs);
   179db:	83 ec 0c             	sub    $0xc,%esp
   179de:	ff 75 f0             	pushl  -0x10(%ebp)
   179e1:	e8 3d fa ff ff       	call   17423 <fs_unprotect>
   179e6:	83 c4 10             	add    $0x10,%esp
	    file_free(p_file);
   179e9:	83 ec 0c             	sub    $0xc,%esp
   179ec:	ff 75 f4             	pushl  -0xc(%ebp)
   179ef:	e8 48 f5 ff ff       	call   16f3c <file_free>
   179f4:	83 c4 10             	add    $0x10,%esp
	}

	task_remove_fd(file);
   179f7:	83 ec 0c             	sub    $0xc,%esp
   179fa:	ff 75 08             	pushl  0x8(%ebp)
   179fd:	e8 9a 9d ff ff       	call   1179c <task_remove_fd>
   17a02:	83 c4 10             	add    $0x10,%esp
	return 0;
   17a05:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17a0a:	c9                   	leave  
   17a0b:	c3                   	ret    

00017a0c <sys_isatty>:


/**
 * 判断文件描述符与tty关联
 */
int sys_isatty(int file) {
   17a0c:	55                   	push   %ebp
   17a0d:	89 e5                	mov    %esp,%ebp
   17a0f:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   17a12:	ff 75 08             	pushl  0x8(%ebp)
   17a15:	e8 e1 f5 ff ff       	call   16ffb <is_fd_bad>
   17a1a:	83 c4 04             	add    $0x4,%esp
   17a1d:	85 c0                	test   %eax,%eax
   17a1f:	74 07                	je     17a28 <sys_isatty+0x1c>
		return 0;
   17a21:	b8 00 00 00 00       	mov    $0x0,%eax
   17a26:	eb 2d                	jmp    17a55 <sys_isatty+0x49>
	}

	file_t * pfile = task_file(file);
   17a28:	83 ec 0c             	sub    $0xc,%esp
   17a2b:	ff 75 08             	pushl  0x8(%ebp)
   17a2e:	e8 e4 9c ff ff       	call   11717 <task_file>
   17a33:	83 c4 10             	add    $0x10,%esp
   17a36:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pfile == (file_t *)0) {
   17a39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17a3d:	75 07                	jne    17a46 <sys_isatty+0x3a>
		return 0;
   17a3f:	b8 00 00 00 00       	mov    $0x0,%eax
   17a44:	eb 0f                	jmp    17a55 <sys_isatty+0x49>
	}

	return pfile->type == FILE_TTY;
   17a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17a49:	8b 40 20             	mov    0x20(%eax),%eax
   17a4c:	83 f8 01             	cmp    $0x1,%eax
   17a4f:	0f 94 c0             	sete   %al
   17a52:	0f b6 c0             	movzbl %al,%eax
}
   17a55:	c9                   	leave  
   17a56:	c3                   	ret    

00017a57 <sys_fstat>:

/**
 * @brief 获取文件状态
 */
int sys_fstat(int file, struct stat *st) {
   17a57:	55                   	push   %ebp
   17a58:	89 e5                	mov    %esp,%ebp
   17a5a:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   17a5d:	ff 75 08             	pushl  0x8(%ebp)
   17a60:	e8 96 f5 ff ff       	call   16ffb <is_fd_bad>
   17a65:	83 c4 04             	add    $0x4,%esp
   17a68:	85 c0                	test   %eax,%eax
   17a6a:	74 07                	je     17a73 <sys_fstat+0x1c>
		return -1;
   17a6c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17a71:	eb 75                	jmp    17ae8 <sys_fstat+0x91>
	}

	file_t * p_file = task_file(file);
   17a73:	83 ec 0c             	sub    $0xc,%esp
   17a76:	ff 75 08             	pushl  0x8(%ebp)
   17a79:	e8 99 9c ff ff       	call   11717 <task_file>
   17a7e:	83 c4 10             	add    $0x10,%esp
   17a81:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (p_file == (file_t *)0) {
   17a84:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17a88:	75 07                	jne    17a91 <sys_fstat+0x3a>
		return -1;
   17a8a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17a8f:	eb 57                	jmp    17ae8 <sys_fstat+0x91>
	}

	fs_t * fs = p_file->fs;
   17a91:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17a94:	8b 40 44             	mov    0x44(%eax),%eax
   17a97:	89 45 f0             	mov    %eax,-0x10(%ebp)

    kernel_memset(st, 0, sizeof(struct stat));
   17a9a:	83 ec 04             	sub    $0x4,%esp
   17a9d:	6a 48                	push   $0x48
   17a9f:	6a 00                	push   $0x0
   17aa1:	ff 75 0c             	pushl  0xc(%ebp)
   17aa4:	e8 dd 09 00 00       	call   18486 <kernel_memset>
   17aa9:	83 c4 10             	add    $0x10,%esp

	fs_protect(fs);
   17aac:	83 ec 0c             	sub    $0xc,%esp
   17aaf:	ff 75 f0             	pushl  -0x10(%ebp)
   17ab2:	e8 41 f9 ff ff       	call   173f8 <fs_protect>
   17ab7:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->stat(p_file, st);
   17aba:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17abd:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17ac3:	8b 40 1c             	mov    0x1c(%eax),%eax
   17ac6:	83 ec 08             	sub    $0x8,%esp
   17ac9:	ff 75 0c             	pushl  0xc(%ebp)
   17acc:	ff 75 f4             	pushl  -0xc(%ebp)
   17acf:	ff d0                	call   *%eax
   17ad1:	83 c4 10             	add    $0x10,%esp
   17ad4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   17ad7:	83 ec 0c             	sub    $0xc,%esp
   17ada:	ff 75 f0             	pushl  -0x10(%ebp)
   17add:	e8 41 f9 ff ff       	call   17423 <fs_unprotect>
   17ae2:	83 c4 10             	add    $0x10,%esp
	return err;
   17ae5:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17ae8:	c9                   	leave  
   17ae9:	c3                   	ret    

00017aea <sys_opendir>:

int sys_opendir(const char * name, DIR * dir) {
   17aea:	55                   	push   %ebp
   17aeb:	89 e5                	mov    %esp,%ebp
   17aed:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17af0:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17af5:	83 ec 0c             	sub    $0xc,%esp
   17af8:	50                   	push   %eax
   17af9:	e8 fa f8 ff ff       	call   173f8 <fs_protect>
   17afe:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->opendir(root_fs, name, dir);
   17b01:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b06:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17b0c:	8b 40 24             	mov    0x24(%eax),%eax
   17b0f:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17b15:	83 ec 04             	sub    $0x4,%esp
   17b18:	ff 75 0c             	pushl  0xc(%ebp)
   17b1b:	ff 75 08             	pushl  0x8(%ebp)
   17b1e:	52                   	push   %edx
   17b1f:	ff d0                	call   *%eax
   17b21:	83 c4 10             	add    $0x10,%esp
   17b24:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17b27:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b2c:	83 ec 0c             	sub    $0xc,%esp
   17b2f:	50                   	push   %eax
   17b30:	e8 ee f8 ff ff       	call   17423 <fs_unprotect>
   17b35:	83 c4 10             	add    $0x10,%esp
	return err;
   17b38:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17b3b:	c9                   	leave  
   17b3c:	c3                   	ret    

00017b3d <sys_readdir>:

int sys_readdir(DIR* dir, struct dirent * dirent) {
   17b3d:	55                   	push   %ebp
   17b3e:	89 e5                	mov    %esp,%ebp
   17b40:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17b43:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b48:	83 ec 0c             	sub    $0xc,%esp
   17b4b:	50                   	push   %eax
   17b4c:	e8 a7 f8 ff ff       	call   173f8 <fs_protect>
   17b51:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->readdir(root_fs, dir, dirent);
   17b54:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b59:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17b5f:	8b 40 28             	mov    0x28(%eax),%eax
   17b62:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17b68:	83 ec 04             	sub    $0x4,%esp
   17b6b:	ff 75 0c             	pushl  0xc(%ebp)
   17b6e:	ff 75 08             	pushl  0x8(%ebp)
   17b71:	52                   	push   %edx
   17b72:	ff d0                	call   *%eax
   17b74:	83 c4 10             	add    $0x10,%esp
   17b77:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17b7a:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b7f:	83 ec 0c             	sub    $0xc,%esp
   17b82:	50                   	push   %eax
   17b83:	e8 9b f8 ff ff       	call   17423 <fs_unprotect>
   17b88:	83 c4 10             	add    $0x10,%esp
	return err;
   17b8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17b8e:	c9                   	leave  
   17b8f:	c3                   	ret    

00017b90 <sys_closedir>:

int sys_closedir(DIR *dir) {
   17b90:	55                   	push   %ebp
   17b91:	89 e5                	mov    %esp,%ebp
   17b93:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17b96:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b9b:	83 ec 0c             	sub    $0xc,%esp
   17b9e:	50                   	push   %eax
   17b9f:	e8 54 f8 ff ff       	call   173f8 <fs_protect>
   17ba4:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->closedir(root_fs, dir);
   17ba7:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17bac:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17bb2:	8b 40 2c             	mov    0x2c(%eax),%eax
   17bb5:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17bbb:	83 ec 08             	sub    $0x8,%esp
   17bbe:	ff 75 08             	pushl  0x8(%ebp)
   17bc1:	52                   	push   %edx
   17bc2:	ff d0                	call   *%eax
   17bc4:	83 c4 10             	add    $0x10,%esp
   17bc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17bca:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17bcf:	83 ec 0c             	sub    $0xc,%esp
   17bd2:	50                   	push   %eax
   17bd3:	e8 4b f8 ff ff       	call   17423 <fs_unprotect>
   17bd8:	83 c4 10             	add    $0x10,%esp
	return err;
   17bdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17bde:	c9                   	leave  
   17bdf:	c3                   	ret    

00017be0 <sys_unlink>:

int sys_unlink (const char * path) {
   17be0:	55                   	push   %ebp
   17be1:	89 e5                	mov    %esp,%ebp
   17be3:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17be6:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17beb:	83 ec 0c             	sub    $0xc,%esp
   17bee:	50                   	push   %eax
   17bef:	e8 04 f8 ff ff       	call   173f8 <fs_protect>
   17bf4:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->unlink(root_fs, path);
   17bf7:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17bfc:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17c02:	8b 40 30             	mov    0x30(%eax),%eax
   17c05:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17c0b:	83 ec 08             	sub    $0x8,%esp
   17c0e:	ff 75 08             	pushl  0x8(%ebp)
   17c11:	52                   	push   %edx
   17c12:	ff d0                	call   *%eax
   17c14:	83 c4 10             	add    $0x10,%esp
   17c17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17c1a:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17c1f:	83 ec 0c             	sub    $0xc,%esp
   17c22:	50                   	push   %eax
   17c23:	e8 fb f7 ff ff       	call   17423 <fs_unprotect>
   17c28:	83 c4 10             	add    $0x10,%esp
	return err;
   17c2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17c2e:	c9                   	leave  
   17c2f:	c3                   	ret    

00017c30 <kernel_init>:
static boot_info_t * init_boot_info;        // 启动信息

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info) {
   17c30:	55                   	push   %ebp
   17c31:	89 e5                	mov    %esp,%ebp
   17c33:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info;
   17c36:	8b 45 08             	mov    0x8(%ebp),%eax
   17c39:	a3 a4 e0 05 00       	mov    %eax,0x5e0a4

    // 初始化CPU，再重新加载
    cpu_init();
   17c3e:	e8 07 ab ff ff       	call   1274a <cpu_init>
    irq_init();
   17c43:	e8 ba b1 ff ff       	call   12e02 <irq_init>
    log_init();
   17c48:	e8 b4 0d 00 00       	call   18a01 <log_init>

    // 内存初始化要放前面一点，因为后面的代码可能需要内存分配
    memory_init(boot_info);
   17c4d:	83 ec 0c             	sub    $0xc,%esp
   17c50:	ff 75 08             	pushl  0x8(%ebp)
   17c53:	e8 cd 90 ff ff       	call   10d25 <memory_init>
   17c58:	83 c4 10             	add    $0x10,%esp
    fs_init();
   17c5b:	e8 05 f6 ff ff       	call   17265 <fs_init>

    time_init();
   17c60:	e8 f9 d4 ff ff       	call   1515e <time_init>

    task_manager_init();
   17c65:	e8 c0 98 ff ff       	call   1152a <task_manager_init>
}
   17c6a:	90                   	nop
   17c6b:	c9                   	leave  
   17c6c:	c3                   	ret    

00017c6d <move_to_first_task>:


/**
 * @brief 移至第一个进程运行
 */
void move_to_first_task(void) {
   17c6d:	55                   	push   %ebp
   17c6e:	89 e5                	mov    %esp,%ebp
   17c70:	56                   	push   %esi
   17c71:	53                   	push   %ebx
   17c72:	83 ec 10             	sub    $0x10,%esp
    // 不能直接用Jmp far进入，因为当前特权级0，不能跳到低特权级的代码
    // 下面的iret后，还需要手动加载ds, fs, es等寄存器值，iret不会自动加载
    // 注意，运行下面的代码可能会产生异常：段保护异常或页保护异常。
    // 可根据产生的异常类型和错误码，并结合手册来找到问题所在
    task_t * curr = task_current();
   17c75:	e8 93 9a ff ff       	call   1170d <task_current>
   17c7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   17c7d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17c81:	75 19                	jne    17c9c <move_to_first_task+0x2f>
   17c83:	68 64 9d 01 00       	push   $0x19d64
   17c88:	68 04 9e 01 00       	push   $0x19e04
   17c8d:	6a 34                	push   $0x34
   17c8f:	68 70 9d 01 00       	push   $0x19d70
   17c94:	e8 3a 0b 00 00       	call   187d3 <panic>
   17c99:	83 c4 10             	add    $0x10,%esp

    tss_t * tss = &(curr->tss);
   17c9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17c9f:	05 44 02 00 00       	add    $0x244,%eax
   17ca4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"			// SS
        "push %[esp]\n\t"			// ESP
        "push %[eflags]\n\t"           // EFLAGS
        "push %[cs]\n\t"			// CS
        "push %[eip]\n\t"		    // ip
        "iret\n\t"::[ss]"r"(tss->ss),  [esp]"r"(tss->esp), [eflags]"r"(tss->eflags),
   17ca7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17caa:	8b 40 50             	mov    0x50(%eax),%eax
   17cad:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17cb0:	8b 52 38             	mov    0x38(%edx),%edx
   17cb3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   17cb6:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs), [eip]"r"(tss->eip));
   17cb9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   17cbc:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   17cbf:	8b 75 f0             	mov    -0x10(%ebp),%esi
   17cc2:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   17cc5:	50                   	push   %eax
   17cc6:	52                   	push   %edx
   17cc7:	51                   	push   %ecx
   17cc8:	53                   	push   %ebx
   17cc9:	56                   	push   %esi
   17cca:	cf                   	iret   
}
   17ccb:	90                   	nop
   17ccc:	8d 65 f8             	lea    -0x8(%ebp),%esp
   17ccf:	5b                   	pop    %ebx
   17cd0:	5e                   	pop    %esi
   17cd1:	5d                   	pop    %ebp
   17cd2:	c3                   	ret    

00017cd3 <init_main>:

void init_main(void) {
   17cd3:	55                   	push   %ebp
   17cd4:	89 e5                	mov    %esp,%ebp
   17cd6:	83 ec 08             	sub    $0x8,%esp
    log_printf("==============================");
   17cd9:	83 ec 0c             	sub    $0xc,%esp
   17cdc:	68 a4 9d 01 00       	push   $0x19da4
   17ce1:	e8 4a 0d 00 00       	call   18a30 <log_printf>
   17ce6:	83 c4 10             	add    $0x10,%esp
    log_printf("Kernel is running....");
   17ce9:	83 ec 0c             	sub    $0xc,%esp
   17cec:	68 c3 9d 01 00       	push   $0x19dc3
   17cf1:	e8 3a 0d 00 00       	call   18a30 <log_printf>
   17cf6:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s, name: %s", OS_VERSION, "tiny x86 os");
   17cf9:	83 ec 04             	sub    $0x4,%esp
   17cfc:	68 d9 9d 01 00       	push   $0x19dd9
   17d01:	68 e5 9d 01 00       	push   $0x19de5
   17d06:	68 eb 9d 01 00       	push   $0x19deb
   17d0b:	e8 20 0d 00 00       	call   18a30 <log_printf>
   17d10:	83 c4 10             	add    $0x10,%esp
    log_printf("==============================");
   17d13:	83 ec 0c             	sub    $0xc,%esp
   17d16:	68 a4 9d 01 00       	push   $0x19da4
   17d1b:	e8 10 0d 00 00       	call   18a30 <log_printf>
   17d20:	83 c4 10             	add    $0x10,%esp

    // 初始化任务
    task_first_init();
   17d23:	e8 ff 96 ff ff       	call   11427 <task_first_init>
    move_to_first_task();
   17d28:	e8 40 ff ff ff       	call   17c6d <move_to_first_task>
}
   17d2d:	90                   	nop
   17d2e:	c9                   	leave  
   17d2f:	c3                   	ret    

00017d30 <list_count>:
static inline int list_count(list_t *list) {
   17d30:	55                   	push   %ebp
   17d31:	89 e5                	mov    %esp,%ebp
    return list->count;
   17d33:	8b 45 08             	mov    0x8(%ebp),%eax
   17d36:	8b 40 08             	mov    0x8(%eax),%eax
}
   17d39:	5d                   	pop    %ebp
   17d3a:	c3                   	ret    

00017d3b <mutex_init>:
#include "ipc/mutex.h"

/**
 * 锁初始化
 */
void mutex_init (mutex_t * mutex) {
   17d3b:	55                   	push   %ebp
   17d3c:	89 e5                	mov    %esp,%ebp
   17d3e:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   17d41:	8b 45 08             	mov    0x8(%ebp),%eax
   17d44:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   17d4b:	8b 45 08             	mov    0x8(%ebp),%eax
   17d4e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   17d54:	8b 45 08             	mov    0x8(%ebp),%eax
   17d57:	83 c0 08             	add    $0x8,%eax
   17d5a:	83 ec 0c             	sub    $0xc,%esp
   17d5d:	50                   	push   %eax
   17d5e:	e8 b9 0a 00 00       	call   1881c <list_init>
   17d63:	83 c4 10             	add    $0x10,%esp
}
   17d66:	90                   	nop
   17d67:	c9                   	leave  
   17d68:	c3                   	ret    

00017d69 <mutex_lock>:

/**
 * 申请锁
 */
void mutex_lock (mutex_t * mutex) {
   17d69:	55                   	push   %ebp
   17d6a:	89 e5                	mov    %esp,%ebp
   17d6c:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17d6f:	e8 9e b3 ff ff       	call   13112 <irq_enter_protection>
   17d74:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   17d77:	e8 91 99 ff ff       	call   1170d <task_current>
   17d7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   17d7f:	8b 45 08             	mov    0x8(%ebp),%eax
   17d82:	8b 40 04             	mov    0x4(%eax),%eax
   17d85:	85 c0                	test   %eax,%eax
   17d87:	75 14                	jne    17d9d <mutex_lock+0x34>
        // 没有任务占用，占用之
        mutex->locked_count = 1;
   17d89:	8b 45 08             	mov    0x8(%ebp),%eax
   17d8c:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   17d93:	8b 45 08             	mov    0x8(%ebp),%eax
   17d96:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17d99:	89 10                	mov    %edx,(%eax)
   17d9b:	eb 52                	jmp    17def <mutex_lock+0x86>
    } else if (mutex->owner == curr) {
   17d9d:	8b 45 08             	mov    0x8(%ebp),%eax
   17da0:	8b 00                	mov    (%eax),%eax
   17da2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   17da5:	75 11                	jne    17db8 <mutex_lock+0x4f>
        // 已经为当前任务所有，只增加计数
        mutex->locked_count++;
   17da7:	8b 45 08             	mov    0x8(%ebp),%eax
   17daa:	8b 40 04             	mov    0x4(%eax),%eax
   17dad:	8d 50 01             	lea    0x1(%eax),%edx
   17db0:	8b 45 08             	mov    0x8(%ebp),%eax
   17db3:	89 50 04             	mov    %edx,0x4(%eax)
   17db6:	eb 37                	jmp    17def <mutex_lock+0x86>
    } else {
        // 有其它任务占用，则进入队列等待
        task_t * curr = task_current();
   17db8:	e8 50 99 ff ff       	call   1170d <task_current>
   17dbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   17dc0:	83 ec 0c             	sub    $0xc,%esp
   17dc3:	ff 75 ec             	pushl  -0x14(%ebp)
   17dc6:	e8 74 98 ff ff       	call   1163f <task_set_block>
   17dcb:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   17dce:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17dd1:	8d 90 b8 02 00 00    	lea    0x2b8(%eax),%edx
   17dd7:	8b 45 08             	mov    0x8(%ebp),%eax
   17dda:	83 c0 08             	add    $0x8,%eax
   17ddd:	83 ec 08             	sub    $0x8,%esp
   17de0:	52                   	push   %edx
   17de1:	50                   	push   %eax
   17de2:	e8 b9 0a 00 00       	call   188a0 <list_insert_last>
   17de7:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   17dea:	e8 35 9a ff ff       	call   11824 <task_dispatch>
    }

    irq_leave_protection(irq_state);
   17def:	83 ec 0c             	sub    $0xc,%esp
   17df2:	ff 75 f4             	pushl  -0xc(%ebp)
   17df5:	e8 30 b3 ff ff       	call   1312a <irq_leave_protection>
   17dfa:	83 c4 10             	add    $0x10,%esp
}
   17dfd:	90                   	nop
   17dfe:	c9                   	leave  
   17dff:	c3                   	ret    

00017e00 <mutex_unlock>:

/**
 * 释放锁
 */
void mutex_unlock (mutex_t * mutex) {
   17e00:	55                   	push   %ebp
   17e01:	89 e5                	mov    %esp,%ebp
   17e03:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17e06:	e8 07 b3 ff ff       	call   13112 <irq_enter_protection>
   17e0b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 只有锁的拥有者才能释放锁
    task_t * curr = task_current();
   17e0e:	e8 fa 98 ff ff       	call   1170d <task_current>
   17e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   17e16:	8b 45 08             	mov    0x8(%ebp),%eax
   17e19:	8b 00                	mov    (%eax),%eax
   17e1b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   17e1e:	0f 85 8a 00 00 00    	jne    17eae <mutex_unlock+0xae>
        if (--mutex->locked_count == 0) {
   17e24:	8b 45 08             	mov    0x8(%ebp),%eax
   17e27:	8b 40 04             	mov    0x4(%eax),%eax
   17e2a:	8d 50 ff             	lea    -0x1(%eax),%edx
   17e2d:	8b 45 08             	mov    0x8(%ebp),%eax
   17e30:	89 50 04             	mov    %edx,0x4(%eax)
   17e33:	8b 45 08             	mov    0x8(%ebp),%eax
   17e36:	8b 40 04             	mov    0x4(%eax),%eax
   17e39:	85 c0                	test   %eax,%eax
   17e3b:	75 71                	jne    17eae <mutex_unlock+0xae>
            // 减到0，释放锁
            mutex->owner = (task_t *)0;
   17e3d:	8b 45 08             	mov    0x8(%ebp),%eax
   17e40:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            // 如果队列中有任务等待，则立即唤醒并占用锁
            if (list_count(&mutex->wait_list)) {
   17e46:	8b 45 08             	mov    0x8(%ebp),%eax
   17e49:	83 c0 08             	add    $0x8,%eax
   17e4c:	83 ec 0c             	sub    $0xc,%esp
   17e4f:	50                   	push   %eax
   17e50:	e8 db fe ff ff       	call   17d30 <list_count>
   17e55:	83 c4 10             	add    $0x10,%esp
   17e58:	85 c0                	test   %eax,%eax
   17e5a:	74 52                	je     17eae <mutex_unlock+0xae>
                list_node_t * task_node = list_remove_first(&mutex->wait_list);
   17e5c:	8b 45 08             	mov    0x8(%ebp),%eax
   17e5f:	83 c0 08             	add    $0x8,%eax
   17e62:	83 ec 0c             	sub    $0xc,%esp
   17e65:	50                   	push   %eax
   17e66:	e8 99 0a 00 00       	call   18904 <list_remove_first>
   17e6b:	83 c4 10             	add    $0x10,%esp
   17e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(task_node, task_t, wait_node);
   17e71:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17e75:	74 0a                	je     17e81 <mutex_unlock+0x81>
   17e77:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17e7a:	2d b8 02 00 00       	sub    $0x2b8,%eax
   17e7f:	eb 05                	jmp    17e86 <mutex_unlock+0x86>
   17e81:	b8 00 00 00 00       	mov    $0x0,%eax
   17e86:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   17e89:	83 ec 0c             	sub    $0xc,%esp
   17e8c:	ff 75 e8             	pushl  -0x18(%ebp)
   17e8f:	e8 77 97 ff ff       	call   1160b <task_set_ready>
   17e94:	83 c4 10             	add    $0x10,%esp

                // 在这里占用，而不是在任务醒后占用，因为可能抢不到
                mutex->locked_count = 1;
   17e97:	8b 45 08             	mov    0x8(%ebp),%eax
   17e9a:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   17ea1:	8b 45 08             	mov    0x8(%ebp),%eax
   17ea4:	8b 55 e8             	mov    -0x18(%ebp),%edx
   17ea7:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   17ea9:	e8 76 99 ff ff       	call   11824 <task_dispatch>
            }
        }
    }

    irq_leave_protection(irq_state);
   17eae:	83 ec 0c             	sub    $0xc,%esp
   17eb1:	ff 75 f4             	pushl  -0xc(%ebp)
   17eb4:	e8 71 b2 ff ff       	call   1312a <irq_leave_protection>
   17eb9:	83 c4 10             	add    $0x10,%esp
}
   17ebc:	90                   	nop
   17ebd:	c9                   	leave  
   17ebe:	c3                   	ret    

00017ebf <list_count>:
static inline int list_count(list_t *list) {
   17ebf:	55                   	push   %ebp
   17ec0:	89 e5                	mov    %esp,%ebp
    return list->count;
   17ec2:	8b 45 08             	mov    0x8(%ebp),%eax
   17ec5:	8b 40 08             	mov    0x8(%eax),%eax
}
   17ec8:	5d                   	pop    %ebp
   17ec9:	c3                   	ret    

00017eca <sem_init>:
#include "ipc/sem.h"

/**
 * 信号量初始化
 */
void sem_init (sem_t * sem, int init_count) {
   17eca:	55                   	push   %ebp
   17ecb:	89 e5                	mov    %esp,%ebp
   17ecd:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   17ed0:	8b 45 08             	mov    0x8(%ebp),%eax
   17ed3:	8b 55 0c             	mov    0xc(%ebp),%edx
   17ed6:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   17ed8:	8b 45 08             	mov    0x8(%ebp),%eax
   17edb:	83 c0 04             	add    $0x4,%eax
   17ede:	83 ec 0c             	sub    $0xc,%esp
   17ee1:	50                   	push   %eax
   17ee2:	e8 35 09 00 00       	call   1881c <list_init>
   17ee7:	83 c4 10             	add    $0x10,%esp
}
   17eea:	90                   	nop
   17eeb:	c9                   	leave  
   17eec:	c3                   	ret    

00017eed <sem_wait>:

/**
 * 申请信号量
 */
void sem_wait (sem_t * sem) {
   17eed:	55                   	push   %ebp
   17eee:	89 e5                	mov    %esp,%ebp
   17ef0:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17ef3:	e8 1a b2 ff ff       	call   13112 <irq_enter_protection>
   17ef8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   17efb:	8b 45 08             	mov    0x8(%ebp),%eax
   17efe:	8b 00                	mov    (%eax),%eax
   17f00:	85 c0                	test   %eax,%eax
   17f02:	7e 0f                	jle    17f13 <sem_wait+0x26>
        sem->count--;
   17f04:	8b 45 08             	mov    0x8(%ebp),%eax
   17f07:	8b 00                	mov    (%eax),%eax
   17f09:	8d 50 ff             	lea    -0x1(%eax),%edx
   17f0c:	8b 45 08             	mov    0x8(%ebp),%eax
   17f0f:	89 10                	mov    %edx,(%eax)
   17f11:	eb 37                	jmp    17f4a <sem_wait+0x5d>
    } else {
        // 从就绪队列中移除，然后加入信号量的等待队列
        task_t * curr = task_current();
   17f13:	e8 f5 97 ff ff       	call   1170d <task_current>
   17f18:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   17f1b:	83 ec 0c             	sub    $0xc,%esp
   17f1e:	ff 75 f0             	pushl  -0x10(%ebp)
   17f21:	e8 19 97 ff ff       	call   1163f <task_set_block>
   17f26:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   17f29:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17f2c:	8d 90 b8 02 00 00    	lea    0x2b8(%eax),%edx
   17f32:	8b 45 08             	mov    0x8(%ebp),%eax
   17f35:	83 c0 04             	add    $0x4,%eax
   17f38:	83 ec 08             	sub    $0x8,%esp
   17f3b:	52                   	push   %edx
   17f3c:	50                   	push   %eax
   17f3d:	e8 5e 09 00 00       	call   188a0 <list_insert_last>
   17f42:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   17f45:	e8 da 98 ff ff       	call   11824 <task_dispatch>
    }

    irq_leave_protection(irq_state);
   17f4a:	83 ec 0c             	sub    $0xc,%esp
   17f4d:	ff 75 f4             	pushl  -0xc(%ebp)
   17f50:	e8 d5 b1 ff ff       	call   1312a <irq_leave_protection>
   17f55:	83 c4 10             	add    $0x10,%esp
}
   17f58:	90                   	nop
   17f59:	c9                   	leave  
   17f5a:	c3                   	ret    

00017f5b <sem_notify>:

/**
 * 释放信号量
 */
void sem_notify (sem_t * sem) {
   17f5b:	55                   	push   %ebp
   17f5c:	89 e5                	mov    %esp,%ebp
   17f5e:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17f61:	e8 ac b1 ff ff       	call   13112 <irq_enter_protection>
   17f66:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&sem->wait_list)) {
   17f69:	8b 45 08             	mov    0x8(%ebp),%eax
   17f6c:	83 c0 04             	add    $0x4,%eax
   17f6f:	83 ec 0c             	sub    $0xc,%esp
   17f72:	50                   	push   %eax
   17f73:	e8 47 ff ff ff       	call   17ebf <list_count>
   17f78:	83 c4 10             	add    $0x10,%esp
   17f7b:	85 c0                	test   %eax,%eax
   17f7d:	74 42                	je     17fc1 <sem_notify+0x66>
        // 有进程等待，则唤醒加入就绪队列
        list_node_t * node = list_remove_first(&sem->wait_list);
   17f7f:	8b 45 08             	mov    0x8(%ebp),%eax
   17f82:	83 c0 04             	add    $0x4,%eax
   17f85:	83 ec 0c             	sub    $0xc,%esp
   17f88:	50                   	push   %eax
   17f89:	e8 76 09 00 00       	call   18904 <list_remove_first>
   17f8e:	83 c4 10             	add    $0x10,%esp
   17f91:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t * task = list_node_parent(node, task_t, wait_node);
   17f94:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17f98:	74 0a                	je     17fa4 <sem_notify+0x49>
   17f9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17f9d:	2d b8 02 00 00       	sub    $0x2b8,%eax
   17fa2:	eb 05                	jmp    17fa9 <sem_notify+0x4e>
   17fa4:	b8 00 00 00 00       	mov    $0x0,%eax
   17fa9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   17fac:	83 ec 0c             	sub    $0xc,%esp
   17faf:	ff 75 ec             	pushl  -0x14(%ebp)
   17fb2:	e8 54 96 ff ff       	call   1160b <task_set_ready>
   17fb7:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   17fba:	e8 65 98 ff ff       	call   11824 <task_dispatch>
   17fbf:	eb 0d                	jmp    17fce <sem_notify+0x73>
    } else {
        sem->count++;
   17fc1:	8b 45 08             	mov    0x8(%ebp),%eax
   17fc4:	8b 00                	mov    (%eax),%eax
   17fc6:	8d 50 01             	lea    0x1(%eax),%edx
   17fc9:	8b 45 08             	mov    0x8(%ebp),%eax
   17fcc:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(irq_state);
   17fce:	83 ec 0c             	sub    $0xc,%esp
   17fd1:	ff 75 f4             	pushl  -0xc(%ebp)
   17fd4:	e8 51 b1 ff ff       	call   1312a <irq_leave_protection>
   17fd9:	83 c4 10             	add    $0x10,%esp
}
   17fdc:	90                   	nop
   17fdd:	c9                   	leave  
   17fde:	c3                   	ret    

00017fdf <sem_count>:

/**
 * 获取信号量的当前值
 */
int sem_count (sem_t * sem) {
   17fdf:	55                   	push   %ebp
   17fe0:	89 e5                	mov    %esp,%ebp
   17fe2:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17fe5:	e8 28 b1 ff ff       	call   13112 <irq_enter_protection>
   17fea:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   17fed:	8b 45 08             	mov    0x8(%ebp),%eax
   17ff0:	8b 00                	mov    (%eax),%eax
   17ff2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(irq_state);
   17ff5:	83 ec 0c             	sub    $0xc,%esp
   17ff8:	ff 75 f4             	pushl  -0xc(%ebp)
   17ffb:	e8 2a b1 ff ff       	call   1312a <irq_leave_protection>
   18000:	83 c4 10             	add    $0x10,%esp
    return count;
   18003:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   18006:	c9                   	leave  
   18007:	c3                   	ret    

00018008 <bitmap_byte_count>:
#include "tools/klib.h"

/**
 * @brief 获取所需要的字节数量
 */
int bitmap_byte_count (int bit_count) {
   18008:	55                   	push   %ebp
   18009:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;         // 向上取整
   1800b:	8b 45 08             	mov    0x8(%ebp),%eax
   1800e:	83 c0 07             	add    $0x7,%eax
   18011:	8d 50 07             	lea    0x7(%eax),%edx
   18014:	85 c0                	test   %eax,%eax
   18016:	0f 48 c2             	cmovs  %edx,%eax
   18019:	c1 f8 03             	sar    $0x3,%eax
}
   1801c:	5d                   	pop    %ebp
   1801d:	c3                   	ret    

0001801e <bitmap_init>:

/**
 * @brief 位图初始化
 */
void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   1801e:	55                   	push   %ebp
   1801f:	89 e5                	mov    %esp,%ebp
   18021:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   18024:	8b 45 08             	mov    0x8(%ebp),%eax
   18027:	8b 55 10             	mov    0x10(%ebp),%edx
   1802a:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   1802c:	8b 45 08             	mov    0x8(%ebp),%eax
   1802f:	8b 55 0c             	mov    0xc(%ebp),%edx
   18032:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   18035:	8b 45 08             	mov    0x8(%ebp),%eax
   18038:	8b 00                	mov    (%eax),%eax
   1803a:	50                   	push   %eax
   1803b:	e8 c8 ff ff ff       	call   18008 <bitmap_byte_count>
   18040:	83 c4 04             	add    $0x4,%esp
   18043:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xFF: 0, bytes);
   18046:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1804a:	74 07                	je     18053 <bitmap_init+0x35>
   1804c:	ba ff 00 00 00       	mov    $0xff,%edx
   18051:	eb 05                	jmp    18058 <bitmap_init+0x3a>
   18053:	ba 00 00 00 00       	mov    $0x0,%edx
   18058:	8b 45 08             	mov    0x8(%ebp),%eax
   1805b:	8b 40 04             	mov    0x4(%eax),%eax
   1805e:	83 ec 04             	sub    $0x4,%esp
   18061:	ff 75 f4             	pushl  -0xc(%ebp)
   18064:	52                   	push   %edx
   18065:	50                   	push   %eax
   18066:	e8 1b 04 00 00       	call   18486 <kernel_memset>
   1806b:	83 c4 10             	add    $0x10,%esp
}
   1806e:	90                   	nop
   1806f:	c9                   	leave  
   18070:	c3                   	ret    

00018071 <bitmap_set_bit>:

/**
 * @brief 连续设置N个位
 */
void bitmap_set_bit (bitmap_t * bitmap, int index, int count, int bit) {
   18071:	55                   	push   %ebp
   18072:	89 e5                	mov    %esp,%ebp
   18074:	56                   	push   %esi
   18075:	53                   	push   %ebx
   18076:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   18079:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   18080:	e9 a2 00 00 00       	jmp    18127 <bitmap_set_bit+0xb6>
        // 可以考虑进行一定程序的优化!!
        if (bit) {
   18085:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   18089:	74 4a                	je     180d5 <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   1808b:	8b 45 08             	mov    0x8(%ebp),%eax
   1808e:	8b 50 04             	mov    0x4(%eax),%edx
   18091:	8b 45 0c             	mov    0xc(%ebp),%eax
   18094:	8d 48 07             	lea    0x7(%eax),%ecx
   18097:	85 c0                	test   %eax,%eax
   18099:	0f 48 c1             	cmovs  %ecx,%eax
   1809c:	c1 f8 03             	sar    $0x3,%eax
   1809f:	89 c3                	mov    %eax,%ebx
   180a1:	89 d8                	mov    %ebx,%eax
   180a3:	01 d0                	add    %edx,%eax
   180a5:	0f b6 00             	movzbl (%eax),%eax
   180a8:	89 c6                	mov    %eax,%esi
   180aa:	8b 45 0c             	mov    0xc(%ebp),%eax
   180ad:	99                   	cltd   
   180ae:	c1 ea 1d             	shr    $0x1d,%edx
   180b1:	01 d0                	add    %edx,%eax
   180b3:	83 e0 07             	and    $0x7,%eax
   180b6:	29 d0                	sub    %edx,%eax
   180b8:	ba 01 00 00 00       	mov    $0x1,%edx
   180bd:	89 c1                	mov    %eax,%ecx
   180bf:	d3 e2                	shl    %cl,%edx
   180c1:	89 d0                	mov    %edx,%eax
   180c3:	89 f2                	mov    %esi,%edx
   180c5:	09 c2                	or     %eax,%edx
   180c7:	8b 45 08             	mov    0x8(%ebp),%eax
   180ca:	8b 40 04             	mov    0x4(%eax),%eax
   180cd:	89 d9                	mov    %ebx,%ecx
   180cf:	01 c8                	add    %ecx,%eax
   180d1:	88 10                	mov    %dl,(%eax)
   180d3:	eb 4a                	jmp    1811f <bitmap_set_bit+0xae>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   180d5:	8b 45 08             	mov    0x8(%ebp),%eax
   180d8:	8b 50 04             	mov    0x4(%eax),%edx
   180db:	8b 45 0c             	mov    0xc(%ebp),%eax
   180de:	8d 48 07             	lea    0x7(%eax),%ecx
   180e1:	85 c0                	test   %eax,%eax
   180e3:	0f 48 c1             	cmovs  %ecx,%eax
   180e6:	c1 f8 03             	sar    $0x3,%eax
   180e9:	89 c3                	mov    %eax,%ebx
   180eb:	89 d8                	mov    %ebx,%eax
   180ed:	01 d0                	add    %edx,%eax
   180ef:	0f b6 00             	movzbl (%eax),%eax
   180f2:	89 c6                	mov    %eax,%esi
   180f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   180f7:	99                   	cltd   
   180f8:	c1 ea 1d             	shr    $0x1d,%edx
   180fb:	01 d0                	add    %edx,%eax
   180fd:	83 e0 07             	and    $0x7,%eax
   18100:	29 d0                	sub    %edx,%eax
   18102:	ba 01 00 00 00       	mov    $0x1,%edx
   18107:	89 c1                	mov    %eax,%ecx
   18109:	d3 e2                	shl    %cl,%edx
   1810b:	89 d0                	mov    %edx,%eax
   1810d:	f7 d0                	not    %eax
   1810f:	89 f2                	mov    %esi,%edx
   18111:	21 c2                	and    %eax,%edx
   18113:	8b 45 08             	mov    0x8(%ebp),%eax
   18116:	8b 40 04             	mov    0x4(%eax),%eax
   18119:	89 d9                	mov    %ebx,%ecx
   1811b:	01 c8                	add    %ecx,%eax
   1811d:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   1811f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   18123:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   18127:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1812a:	3b 45 10             	cmp    0x10(%ebp),%eax
   1812d:	7d 0e                	jge    1813d <bitmap_set_bit+0xcc>
   1812f:	8b 45 08             	mov    0x8(%ebp),%eax
   18132:	8b 00                	mov    (%eax),%eax
   18134:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18137:	0f 8c 48 ff ff ff    	jl     18085 <bitmap_set_bit+0x14>
        }
    }
} 
   1813d:	90                   	nop
   1813e:	83 c4 10             	add    $0x10,%esp
   18141:	5b                   	pop    %ebx
   18142:	5e                   	pop    %esi
   18143:	5d                   	pop    %ebp
   18144:	c3                   	ret    

00018145 <bitmap_get_bit>:

/**
 * @brief 获取指定位的状态
 */
int bitmap_get_bit (bitmap_t * bitmap, int index) {
   18145:	55                   	push   %ebp
   18146:	89 e5                	mov    %esp,%ebp
   18148:	53                   	push   %ebx
    return bitmap->bits[index / 8] & (1 << (index % 8));
   18149:	8b 45 08             	mov    0x8(%ebp),%eax
   1814c:	8b 50 04             	mov    0x4(%eax),%edx
   1814f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18152:	8d 48 07             	lea    0x7(%eax),%ecx
   18155:	85 c0                	test   %eax,%eax
   18157:	0f 48 c1             	cmovs  %ecx,%eax
   1815a:	c1 f8 03             	sar    $0x3,%eax
   1815d:	01 d0                	add    %edx,%eax
   1815f:	0f b6 00             	movzbl (%eax),%eax
   18162:	0f b6 d8             	movzbl %al,%ebx
   18165:	8b 45 0c             	mov    0xc(%ebp),%eax
   18168:	99                   	cltd   
   18169:	c1 ea 1d             	shr    $0x1d,%edx
   1816c:	01 d0                	add    %edx,%eax
   1816e:	83 e0 07             	and    $0x7,%eax
   18171:	29 d0                	sub    %edx,%eax
   18173:	ba 01 00 00 00       	mov    $0x1,%edx
   18178:	89 c1                	mov    %eax,%ecx
   1817a:	d3 e2                	shl    %cl,%edx
   1817c:	89 d0                	mov    %edx,%eax
   1817e:	21 d8                	and    %ebx,%eax
}
   18180:	5b                   	pop    %ebx
   18181:	5d                   	pop    %ebp
   18182:	c3                   	ret    

00018183 <bitmap_is_set>:

/**
 * @brief 检查指定位是否置1
 */
int bitmap_is_set (bitmap_t * bitmap, int index) {
   18183:	55                   	push   %ebp
   18184:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   18186:	ff 75 0c             	pushl  0xc(%ebp)
   18189:	ff 75 08             	pushl  0x8(%ebp)
   1818c:	e8 b4 ff ff ff       	call   18145 <bitmap_get_bit>
   18191:	83 c4 08             	add    $0x8,%esp
   18194:	85 c0                	test   %eax,%eax
   18196:	0f 95 c0             	setne  %al
   18199:	0f b6 c0             	movzbl %al,%eax
}
   1819c:	c9                   	leave  
   1819d:	c3                   	ret    

0001819e <bitmap_alloc_nbits>:

/**
 * @brief 连续分配若干指定比特位，返回起始索引
 */
int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   1819e:	55                   	push   %ebp
   1819f:	89 e5                	mov    %esp,%ebp
   181a1:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   181a4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   181ab:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   181b2:	e9 85 00 00 00       	jmp    1823c <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   181b7:	ff 75 fc             	pushl  -0x4(%ebp)
   181ba:	ff 75 08             	pushl  0x8(%ebp)
   181bd:	e8 83 ff ff ff       	call   18145 <bitmap_get_bit>
   181c2:	83 c4 08             	add    $0x8,%esp
   181c5:	39 45 0c             	cmp    %eax,0xc(%ebp)
   181c8:	74 06                	je     181d0 <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   181ca:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   181ce:	eb 6c                	jmp    1823c <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   181d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   181d3:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   181d6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   181dd:	eb 27                	jmp    18206 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   181df:	8b 45 fc             	mov    -0x4(%ebp),%eax
   181e2:	8d 50 01             	lea    0x1(%eax),%edx
   181e5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   181e8:	50                   	push   %eax
   181e9:	ff 75 08             	pushl  0x8(%ebp)
   181ec:	e8 54 ff ff ff       	call   18145 <bitmap_get_bit>
   181f1:	83 c4 08             	add    $0x8,%esp
   181f4:	39 45 0c             	cmp    %eax,0xc(%ebp)
   181f7:	74 09                	je     18202 <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   181f9:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   18200:	eb 16                	jmp    18218 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   18202:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   18206:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18209:	3b 45 10             	cmp    0x10(%ebp),%eax
   1820c:	7d 0a                	jge    18218 <bitmap_alloc_nbits+0x7a>
   1820e:	8b 45 08             	mov    0x8(%ebp),%eax
   18211:	8b 00                	mov    (%eax),%eax
   18213:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   18216:	7c c7                	jl     181df <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   18218:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1821b:	3b 45 10             	cmp    0x10(%ebp),%eax
   1821e:	7c 1c                	jl     1823c <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   18220:	8b 45 0c             	mov    0xc(%ebp),%eax
   18223:	f7 d0                	not    %eax
   18225:	50                   	push   %eax
   18226:	ff 75 10             	pushl  0x10(%ebp)
   18229:	ff 75 f8             	pushl  -0x8(%ebp)
   1822c:	ff 75 08             	pushl  0x8(%ebp)
   1822f:	e8 3d fe ff ff       	call   18071 <bitmap_set_bit>
   18234:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   18237:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1823a:	eb 13                	jmp    1824f <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   1823c:	8b 45 08             	mov    0x8(%ebp),%eax
   1823f:	8b 00                	mov    (%eax),%eax
   18241:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   18244:	0f 8c 6d ff ff ff    	jl     181b7 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   1824a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1824f:	c9                   	leave  
   18250:	c3                   	ret    

00018251 <hlt>:
static inline void hlt(void) {
   18251:	55                   	push   %ebp
   18252:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   18254:	f4                   	hlt    
}
   18255:	90                   	nop
   18256:	5d                   	pop    %ebp
   18257:	c3                   	ret    

00018258 <strings_count>:
#include "comm/cpu_instr.h"

/**
 * @brief 计算字符串的数量
 */
int strings_count (char ** start) {
   18258:	55                   	push   %ebp
   18259:	89 e5                	mov    %esp,%ebp
   1825b:	83 ec 10             	sub    $0x10,%esp
    int count = 0;
   1825e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (start) {
   18265:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18269:	74 15                	je     18280 <strings_count+0x28>
        while (*start++) {
   1826b:	eb 04                	jmp    18271 <strings_count+0x19>
            count++;
   1826d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        while (*start++) {
   18271:	8b 45 08             	mov    0x8(%ebp),%eax
   18274:	8d 50 04             	lea    0x4(%eax),%edx
   18277:	89 55 08             	mov    %edx,0x8(%ebp)
   1827a:	8b 00                	mov    (%eax),%eax
   1827c:	85 c0                	test   %eax,%eax
   1827e:	75 ed                	jne    1826d <strings_count+0x15>
        }
    }
    return count;
   18280:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   18283:	c9                   	leave  
   18284:	c3                   	ret    

00018285 <get_file_name>:


/**
 * @brief 从路径中解释文件名
 */
char * get_file_name (char * name) {
   18285:	55                   	push   %ebp
   18286:	89 e5                	mov    %esp,%ebp
   18288:	83 ec 10             	sub    $0x10,%esp
    char * s = name;
   1828b:	8b 45 08             	mov    0x8(%ebp),%eax
   1828e:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 定位到结束符
    while (*s != '\0') {
   18291:	eb 04                	jmp    18297 <get_file_name+0x12>
        s++;
   18293:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*s != '\0') {
   18297:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1829a:	0f b6 00             	movzbl (%eax),%eax
   1829d:	84 c0                	test   %al,%al
   1829f:	75 f2                	jne    18293 <get_file_name+0xe>
    }

    // 反向搜索，直到找到反斜杆或者到文件开头
    while ((*s != '\\') && (*s != '/') && (s >= name)) {
   182a1:	eb 04                	jmp    182a7 <get_file_name+0x22>
        s--;
   182a3:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
    while ((*s != '\\') && (*s != '/') && (s >= name)) {
   182a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   182aa:	0f b6 00             	movzbl (%eax),%eax
   182ad:	3c 5c                	cmp    $0x5c,%al
   182af:	74 12                	je     182c3 <get_file_name+0x3e>
   182b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   182b4:	0f b6 00             	movzbl (%eax),%eax
   182b7:	3c 2f                	cmp    $0x2f,%al
   182b9:	74 08                	je     182c3 <get_file_name+0x3e>
   182bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   182be:	3b 45 08             	cmp    0x8(%ebp),%eax
   182c1:	73 e0                	jae    182a3 <get_file_name+0x1e>
    }
    return s + 1;
   182c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   182c6:	83 c0 01             	add    $0x1,%eax
}
   182c9:	c9                   	leave  
   182ca:	c3                   	ret    

000182cb <kernel_strcpy>:

void kernel_strcpy (char * dest, const char * src) {
   182cb:	55                   	push   %ebp
   182cc:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   182ce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   182d2:	74 3b                	je     1830f <kernel_strcpy+0x44>
   182d4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   182d8:	74 35                	je     1830f <kernel_strcpy+0x44>
        return;
    }

    while (*dest && *src) {
   182da:	eb 17                	jmp    182f3 <kernel_strcpy+0x28>
        *dest++ = *src++;
   182dc:	8b 55 0c             	mov    0xc(%ebp),%edx
   182df:	8d 42 01             	lea    0x1(%edx),%eax
   182e2:	89 45 0c             	mov    %eax,0xc(%ebp)
   182e5:	8b 45 08             	mov    0x8(%ebp),%eax
   182e8:	8d 48 01             	lea    0x1(%eax),%ecx
   182eb:	89 4d 08             	mov    %ecx,0x8(%ebp)
   182ee:	0f b6 12             	movzbl (%edx),%edx
   182f1:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   182f3:	8b 45 08             	mov    0x8(%ebp),%eax
   182f6:	0f b6 00             	movzbl (%eax),%eax
   182f9:	84 c0                	test   %al,%al
   182fb:	74 0a                	je     18307 <kernel_strcpy+0x3c>
   182fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   18300:	0f b6 00             	movzbl (%eax),%eax
   18303:	84 c0                	test   %al,%al
   18305:	75 d5                	jne    182dc <kernel_strcpy+0x11>
    }
    *dest = '\0';
   18307:	8b 45 08             	mov    0x8(%ebp),%eax
   1830a:	c6 00 00             	movb   $0x0,(%eax)
   1830d:	eb 01                	jmp    18310 <kernel_strcpy+0x45>
        return;
   1830f:	90                   	nop
}
   18310:	5d                   	pop    %ebp
   18311:	c3                   	ret    

00018312 <kernel_strncpy>:

void kernel_strncpy(char * dest, const char * src, int size) {
   18312:	55                   	push   %ebp
   18313:	89 e5                	mov    %esp,%ebp
   18315:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   18318:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1831c:	74 61                	je     1837f <kernel_strncpy+0x6d>
   1831e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18322:	74 5b                	je     1837f <kernel_strncpy+0x6d>
   18324:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18328:	74 55                	je     1837f <kernel_strncpy+0x6d>
        return;
    }

    char * d = dest;
   1832a:	8b 45 08             	mov    0x8(%ebp),%eax
   1832d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   18330:	8b 45 0c             	mov    0xc(%ebp),%eax
   18333:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   18336:	eb 17                	jmp    1834f <kernel_strncpy+0x3d>
        *d++ = *s++;
   18338:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1833b:	8d 42 01             	lea    0x1(%edx),%eax
   1833e:	89 45 f8             	mov    %eax,-0x8(%ebp)
   18341:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18344:	8d 48 01             	lea    0x1(%eax),%ecx
   18347:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   1834a:	0f b6 12             	movzbl (%edx),%edx
   1834d:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   1834f:	8b 45 10             	mov    0x10(%ebp),%eax
   18352:	8d 50 ff             	lea    -0x1(%eax),%edx
   18355:	89 55 10             	mov    %edx,0x10(%ebp)
   18358:	85 c0                	test   %eax,%eax
   1835a:	7e 0a                	jle    18366 <kernel_strncpy+0x54>
   1835c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1835f:	0f b6 00             	movzbl (%eax),%eax
   18362:	84 c0                	test   %al,%al
   18364:	75 d2                	jne    18338 <kernel_strncpy+0x26>
    }
    if (size == 0) {
   18366:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1836a:	75 0b                	jne    18377 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   1836c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1836f:	83 e8 01             	sub    $0x1,%eax
   18372:	c6 00 00             	movb   $0x0,(%eax)
   18375:	eb 09                	jmp    18380 <kernel_strncpy+0x6e>
    } else {
        *d = '\0';
   18377:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1837a:	c6 00 00             	movb   $0x0,(%eax)
   1837d:	eb 01                	jmp    18380 <kernel_strncpy+0x6e>
        return;
   1837f:	90                   	nop
    }
}
   18380:	c9                   	leave  
   18381:	c3                   	ret    

00018382 <kernel_strlen>:

int kernel_strlen(const char * str) {
   18382:	55                   	push   %ebp
   18383:	89 e5                	mov    %esp,%ebp
   18385:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   18388:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1838c:	75 07                	jne    18395 <kernel_strlen+0x13>
        return 0;
   1838e:	b8 00 00 00 00       	mov    $0x0,%eax
   18393:	eb 26                	jmp    183bb <kernel_strlen+0x39>
    }

	const char * c = str;
   18395:	8b 45 08             	mov    0x8(%ebp),%eax
   18398:	89 45 fc             	mov    %eax,-0x4(%ebp)

	int len = 0;
   1839b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while (*c++) {
   183a2:	eb 04                	jmp    183a8 <kernel_strlen+0x26>
		len++;
   183a4:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*c++) {
   183a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   183ab:	8d 50 01             	lea    0x1(%eax),%edx
   183ae:	89 55 fc             	mov    %edx,-0x4(%ebp)
   183b1:	0f b6 00             	movzbl (%eax),%eax
   183b4:	84 c0                	test   %al,%al
   183b6:	75 ec                	jne    183a4 <kernel_strlen+0x22>
	}

	return len;
   183b8:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   183bb:	c9                   	leave  
   183bc:	c3                   	ret    

000183bd <kernel_strncmp>:

/**
 * 比较两个字符串，最多比较size个字符
 * 如果某一字符串提前比较完成，也算相同
 */
int kernel_strncmp (const char * s1, const char * s2, int size) {
   183bd:	55                   	push   %ebp
   183be:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   183c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   183c4:	74 06                	je     183cc <kernel_strncmp+0xf>
   183c6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   183ca:	75 0f                	jne    183db <kernel_strncmp+0x1e>
        return -1;
   183cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   183d1:	eb 62                	jmp    18435 <kernel_strncmp+0x78>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
    	s1++;
   183d3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    	s2++;
   183d7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   183db:	8b 45 08             	mov    0x8(%ebp),%eax
   183de:	0f b6 00             	movzbl (%eax),%eax
   183e1:	84 c0                	test   %al,%al
   183e3:	74 20                	je     18405 <kernel_strncmp+0x48>
   183e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   183e8:	0f b6 00             	movzbl (%eax),%eax
   183eb:	84 c0                	test   %al,%al
   183ed:	74 16                	je     18405 <kernel_strncmp+0x48>
   183ef:	8b 45 08             	mov    0x8(%ebp),%eax
   183f2:	0f b6 10             	movzbl (%eax),%edx
   183f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   183f8:	0f b6 00             	movzbl (%eax),%eax
   183fb:	38 c2                	cmp    %al,%dl
   183fd:	75 06                	jne    18405 <kernel_strncmp+0x48>
   183ff:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18403:	75 ce                	jne    183d3 <kernel_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   18405:	8b 45 08             	mov    0x8(%ebp),%eax
   18408:	0f b6 00             	movzbl (%eax),%eax
   1840b:	84 c0                	test   %al,%al
   1840d:	74 21                	je     18430 <kernel_strncmp+0x73>
   1840f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18412:	0f b6 00             	movzbl (%eax),%eax
   18415:	84 c0                	test   %al,%al
   18417:	74 17                	je     18430 <kernel_strncmp+0x73>
   18419:	8b 45 08             	mov    0x8(%ebp),%eax
   1841c:	0f b6 10             	movzbl (%eax),%edx
   1841f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18422:	0f b6 00             	movzbl (%eax),%eax
   18425:	38 c2                	cmp    %al,%dl
   18427:	74 07                	je     18430 <kernel_strncmp+0x73>
   18429:	b8 01 00 00 00       	mov    $0x1,%eax
   1842e:	eb 05                	jmp    18435 <kernel_strncmp+0x78>
   18430:	b8 00 00 00 00       	mov    $0x0,%eax
}
   18435:	5d                   	pop    %ebp
   18436:	c3                   	ret    

00018437 <kernel_memcpy>:

void kernel_memcpy (void * dest, void * src, int size) {
   18437:	55                   	push   %ebp
   18438:	89 e5                	mov    %esp,%ebp
   1843a:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1843d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18441:	74 40                	je     18483 <kernel_memcpy+0x4c>
   18443:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18447:	74 3a                	je     18483 <kernel_memcpy+0x4c>
   18449:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1844d:	74 34                	je     18483 <kernel_memcpy+0x4c>
        return;
    }

    uint8_t * s = (uint8_t *)src;
   1844f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18452:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = (uint8_t *)dest;
   18455:	8b 45 08             	mov    0x8(%ebp),%eax
   18458:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   1845b:	eb 17                	jmp    18474 <kernel_memcpy+0x3d>
        *d++ = *s++;
   1845d:	8b 55 fc             	mov    -0x4(%ebp),%edx
   18460:	8d 42 01             	lea    0x1(%edx),%eax
   18463:	89 45 fc             	mov    %eax,-0x4(%ebp)
   18466:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18469:	8d 48 01             	lea    0x1(%eax),%ecx
   1846c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1846f:	0f b6 12             	movzbl (%edx),%edx
   18472:	88 10                	mov    %dl,(%eax)
    while (size--) {
   18474:	8b 45 10             	mov    0x10(%ebp),%eax
   18477:	8d 50 ff             	lea    -0x1(%eax),%edx
   1847a:	89 55 10             	mov    %edx,0x10(%ebp)
   1847d:	85 c0                	test   %eax,%eax
   1847f:	75 dc                	jne    1845d <kernel_memcpy+0x26>
   18481:	eb 01                	jmp    18484 <kernel_memcpy+0x4d>
        return;
   18483:	90                   	nop
    }
}
   18484:	c9                   	leave  
   18485:	c3                   	ret    

00018486 <kernel_memset>:

void kernel_memset(void * dest, uint8_t v, int size) {
   18486:	55                   	push   %ebp
   18487:	89 e5                	mov    %esp,%ebp
   18489:	83 ec 14             	sub    $0x14,%esp
   1848c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1848f:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   18492:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18496:	74 2c                	je     184c4 <kernel_memset+0x3e>
   18498:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1849c:	74 26                	je     184c4 <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   1849e:	8b 45 08             	mov    0x8(%ebp),%eax
   184a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   184a4:	eb 0f                	jmp    184b5 <kernel_memset+0x2f>
        *d++ = v;
   184a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   184a9:	8d 50 01             	lea    0x1(%eax),%edx
   184ac:	89 55 fc             	mov    %edx,-0x4(%ebp)
   184af:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   184b3:	88 10                	mov    %dl,(%eax)
    while (size--) {
   184b5:	8b 45 10             	mov    0x10(%ebp),%eax
   184b8:	8d 50 ff             	lea    -0x1(%eax),%edx
   184bb:	89 55 10             	mov    %edx,0x10(%ebp)
   184be:	85 c0                	test   %eax,%eax
   184c0:	75 e4                	jne    184a6 <kernel_memset+0x20>
   184c2:	eb 01                	jmp    184c5 <kernel_memset+0x3f>
        return;
   184c4:	90                   	nop
    }
}
   184c5:	c9                   	leave  
   184c6:	c3                   	ret    

000184c7 <kernel_memcmp>:

int kernel_memcmp (void * d1, void * d2, int size) {
   184c7:	55                   	push   %ebp
   184c8:	89 e5                	mov    %esp,%ebp
   184ca:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   184cd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   184d1:	74 06                	je     184d9 <kernel_memcmp+0x12>
   184d3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   184d7:	75 07                	jne    184e0 <kernel_memcmp+0x19>
        return 1;
   184d9:	b8 01 00 00 00       	mov    $0x1,%eax
   184de:	eb 43                	jmp    18523 <kernel_memcmp+0x5c>
    }

	uint8_t * p_d1 = (uint8_t *)d1;
   184e0:	8b 45 08             	mov    0x8(%ebp),%eax
   184e3:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint8_t * p_d2 = (uint8_t *)d2;
   184e6:	8b 45 0c             	mov    0xc(%ebp),%eax
   184e9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (size--) {
   184ec:	eb 23                	jmp    18511 <kernel_memcmp+0x4a>
		if (*p_d1++ != *p_d2++) {
   184ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
   184f1:	8d 50 01             	lea    0x1(%eax),%edx
   184f4:	89 55 fc             	mov    %edx,-0x4(%ebp)
   184f7:	0f b6 08             	movzbl (%eax),%ecx
   184fa:	8b 45 f8             	mov    -0x8(%ebp),%eax
   184fd:	8d 50 01             	lea    0x1(%eax),%edx
   18500:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18503:	0f b6 00             	movzbl (%eax),%eax
   18506:	38 c1                	cmp    %al,%cl
   18508:	74 07                	je     18511 <kernel_memcmp+0x4a>
			return 1;
   1850a:	b8 01 00 00 00       	mov    $0x1,%eax
   1850f:	eb 12                	jmp    18523 <kernel_memcmp+0x5c>
	while (size--) {
   18511:	8b 45 10             	mov    0x10(%ebp),%eax
   18514:	8d 50 ff             	lea    -0x1(%eax),%edx
   18517:	89 55 10             	mov    %edx,0x10(%ebp)
   1851a:	85 c0                	test   %eax,%eax
   1851c:	75 d0                	jne    184ee <kernel_memcmp+0x27>
		}
	}

	return 0;
   1851e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   18523:	c9                   	leave  
   18524:	c3                   	ret    

00018525 <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   18525:	55                   	push   %ebp
   18526:	89 e5                	mov    %esp,%ebp
   18528:	53                   	push   %ebx
   18529:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   1852c:	8b 45 08             	mov    0x8(%ebp),%eax
   1852f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   18532:	8b 45 0c             	mov    0xc(%ebp),%eax
   18535:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   18538:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1853c:	74 1d                	je     1855b <kernel_itoa+0x36>
   1853e:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   18542:	74 17                	je     1855b <kernel_itoa+0x36>
   18544:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   18548:	74 11                	je     1855b <kernel_itoa+0x36>
   1854a:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1854e:	74 0b                	je     1855b <kernel_itoa+0x36>
        *p = '\0';
   18550:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18553:	c6 00 00             	movb   $0x0,(%eax)
        return;
   18556:	e9 03 01 00 00       	jmp    1865e <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   1855b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   18562:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18566:	79 19                	jns    18581 <kernel_itoa+0x5c>
   18568:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1856c:	75 13                	jne    18581 <kernel_itoa+0x5c>
        *p++ = '-';
   1856e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18571:	8d 50 01             	lea    0x1(%eax),%edx
   18574:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18577:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   1857a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   18581:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   18585:	74 3b                	je     185c2 <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   18587:	8b 0d 74 a1 01 00    	mov    0x1a174,%ecx
   1858d:	8b 45 0c             	mov    0xc(%ebp),%eax
   18590:	99                   	cltd   
   18591:	f7 7d 10             	idivl  0x10(%ebp)
   18594:	89 d0                	mov    %edx,%eax
   18596:	83 c0 0f             	add    $0xf,%eax
   18599:	01 c8                	add    %ecx,%eax
   1859b:	0f b6 00             	movzbl (%eax),%eax
   1859e:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   185a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   185a4:	8d 50 01             	lea    0x1(%eax),%edx
   185a7:	89 55 f8             	mov    %edx,-0x8(%ebp)
   185aa:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   185ae:	88 10                	mov    %dl,(%eax)
            num /= base;
   185b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   185b3:	99                   	cltd   
   185b4:	f7 7d 10             	idivl  0x10(%ebp)
   185b7:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   185ba:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   185be:	75 c7                	jne    18587 <kernel_itoa+0x62>
   185c0:	eb 4b                	jmp    1860d <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   185c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   185c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   185c8:	8b 0d 74 a1 01 00    	mov    0x1a174,%ecx
   185ce:	8b 5d 10             	mov    0x10(%ebp),%ebx
   185d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   185d4:	ba 00 00 00 00       	mov    $0x0,%edx
   185d9:	f7 f3                	div    %ebx
   185db:	89 d0                	mov    %edx,%eax
   185dd:	83 c0 0f             	add    $0xf,%eax
   185e0:	01 c8                	add    %ecx,%eax
   185e2:	0f b6 00             	movzbl (%eax),%eax
   185e5:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   185e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   185eb:	8d 50 01             	lea    0x1(%eax),%edx
   185ee:	89 55 f8             	mov    %edx,-0x8(%ebp)
   185f1:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   185f5:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   185f7:	8b 5d 10             	mov    0x10(%ebp),%ebx
   185fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   185fd:	ba 00 00 00 00       	mov    $0x0,%edx
   18602:	f7 f3                	div    %ebx
   18604:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   18607:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1860b:	75 bb                	jne    185c8 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   1860d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18610:	8d 50 ff             	lea    -0x1(%eax),%edx
   18613:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18616:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   18619:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1861d:	74 08                	je     18627 <kernel_itoa+0x102>
   1861f:	8b 45 08             	mov    0x8(%ebp),%eax
   18622:	83 c0 01             	add    $0x1,%eax
   18625:	eb 03                	jmp    1862a <kernel_itoa+0x105>
   18627:	8b 45 08             	mov    0x8(%ebp),%eax
   1862a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   1862d:	eb 27                	jmp    18656 <kernel_itoa+0x131>
        char ch = *start;
   1862f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18632:	0f b6 00             	movzbl (%eax),%eax
   18635:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   18638:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1863b:	0f b6 10             	movzbl (%eax),%edx
   1863e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18641:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   18643:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18646:	8d 50 ff             	lea    -0x1(%eax),%edx
   18649:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1864c:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   18650:	88 10                	mov    %dl,(%eax)
        start++;
   18652:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   18656:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18659:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   1865c:	72 d1                	jb     1862f <kernel_itoa+0x10a>
    }
}
   1865e:	83 c4 20             	add    $0x20,%esp
   18661:	5b                   	pop    %ebx
   18662:	5d                   	pop    %ebp
   18663:	c3                   	ret    

00018664 <kernel_sprintf>:

/**
 * @brief 格式化字符串到缓存中
 */
void kernel_sprintf(char * buffer, const char * fmt, ...) {
   18664:	55                   	push   %ebp
   18665:	89 e5                	mov    %esp,%ebp
   18667:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args, fmt);
   1866a:	8d 45 10             	lea    0x10(%ebp),%eax
   1866d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buffer, fmt, args);
   18670:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18673:	83 ec 04             	sub    $0x4,%esp
   18676:	50                   	push   %eax
   18677:	ff 75 0c             	pushl  0xc(%ebp)
   1867a:	ff 75 08             	pushl  0x8(%ebp)
   1867d:	e8 06 00 00 00       	call   18688 <kernel_vsprintf>
   18682:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   18685:	90                   	nop
   18686:	c9                   	leave  
   18687:	c3                   	ret    

00018688 <kernel_vsprintf>:

/**
 * 格式化字符串
 */
void kernel_vsprintf(char * buffer, const char * fmt, va_list args) {
   18688:	55                   	push   %ebp
   18689:	89 e5                	mov    %esp,%ebp
   1868b:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   1868e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char * curr = buffer;
   18695:	8b 45 08             	mov    0x8(%ebp),%eax
   18698:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   1869b:	e9 17 01 00 00       	jmp    187b7 <kernel_vsprintf+0x12f>
        switch (state) {
   186a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   186a3:	85 c0                	test   %eax,%eax
   186a5:	74 0a                	je     186b1 <kernel_vsprintf+0x29>
   186a7:	83 f8 01             	cmp    $0x1,%eax
   186aa:	74 2b                	je     186d7 <kernel_vsprintf+0x4f>
   186ac:	e9 06 01 00 00       	jmp    187b7 <kernel_vsprintf+0x12f>
            // 普通字符
            case NORMAL:
                if (ch == '%') {
   186b1:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   186b5:	75 0c                	jne    186c3 <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   186b7:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   186be:	e9 f4 00 00 00       	jmp    187b7 <kernel_vsprintf+0x12f>
                } else {
                    *curr++ = ch;
   186c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   186c6:	8d 50 01             	lea    0x1(%eax),%edx
   186c9:	89 55 f8             	mov    %edx,-0x8(%ebp)
   186cc:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   186d0:	88 10                	mov    %dl,(%eax)
                }
                break;
   186d2:	e9 e0 00 00 00       	jmp    187b7 <kernel_vsprintf+0x12f>
            // 格式化控制字符，只支持部分
            case READ_FMT:
                if (ch == 'd') {
   186d7:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   186db:	75 31                	jne    1870e <kernel_vsprintf+0x86>
                    int num = va_arg(args, int);
   186dd:	8b 45 10             	mov    0x10(%ebp),%eax
   186e0:	8d 50 04             	lea    0x4(%eax),%edx
   186e3:	89 55 10             	mov    %edx,0x10(%ebp)
   186e6:	8b 00                	mov    (%eax),%eax
   186e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr, num, 10);
   186eb:	6a 0a                	push   $0xa
   186ed:	ff 75 e4             	pushl  -0x1c(%ebp)
   186f0:	ff 75 f8             	pushl  -0x8(%ebp)
   186f3:	e8 2d fe ff ff       	call   18525 <kernel_itoa>
   186f8:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   186fb:	ff 75 f8             	pushl  -0x8(%ebp)
   186fe:	e8 7f fc ff ff       	call   18382 <kernel_strlen>
   18703:	83 c4 04             	add    $0x4,%esp
   18706:	01 45 f8             	add    %eax,-0x8(%ebp)
   18709:	e9 a1 00 00 00       	jmp    187af <kernel_vsprintf+0x127>
                } else if (ch == 'x') {
   1870e:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   18712:	75 2e                	jne    18742 <kernel_vsprintf+0xba>
                    int num = va_arg(args, int);
   18714:	8b 45 10             	mov    0x10(%ebp),%eax
   18717:	8d 50 04             	lea    0x4(%eax),%edx
   1871a:	89 55 10             	mov    %edx,0x10(%ebp)
   1871d:	8b 00                	mov    (%eax),%eax
   1871f:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr, num, 16);
   18722:	6a 10                	push   $0x10
   18724:	ff 75 e8             	pushl  -0x18(%ebp)
   18727:	ff 75 f8             	pushl  -0x8(%ebp)
   1872a:	e8 f6 fd ff ff       	call   18525 <kernel_itoa>
   1872f:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   18732:	ff 75 f8             	pushl  -0x8(%ebp)
   18735:	e8 48 fc ff ff       	call   18382 <kernel_strlen>
   1873a:	83 c4 04             	add    $0x4,%esp
   1873d:	01 45 f8             	add    %eax,-0x8(%ebp)
   18740:	eb 6d                	jmp    187af <kernel_vsprintf+0x127>
                } else if (ch == 'c') {
   18742:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   18746:	75 1f                	jne    18767 <kernel_vsprintf+0xdf>
                    char c = va_arg(args, int);
   18748:	8b 45 10             	mov    0x10(%ebp),%eax
   1874b:	8d 50 04             	lea    0x4(%eax),%edx
   1874e:	89 55 10             	mov    %edx,0x10(%ebp)
   18751:	8b 00                	mov    (%eax),%eax
   18753:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   18756:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18759:	8d 50 01             	lea    0x1(%eax),%edx
   1875c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1875f:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   18763:	88 10                	mov    %dl,(%eax)
   18765:	eb 48                	jmp    187af <kernel_vsprintf+0x127>
                } else if (ch == 's') {
   18767:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   1876b:	75 42                	jne    187af <kernel_vsprintf+0x127>
                    const char * str = va_arg(args, char *);
   1876d:	8b 45 10             	mov    0x10(%ebp),%eax
   18770:	8d 50 04             	lea    0x4(%eax),%edx
   18773:	89 55 10             	mov    %edx,0x10(%ebp)
   18776:	8b 00                	mov    (%eax),%eax
   18778:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   1877b:	ff 75 f4             	pushl  -0xc(%ebp)
   1877e:	e8 ff fb ff ff       	call   18382 <kernel_strlen>
   18783:	83 c4 04             	add    $0x4,%esp
   18786:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while (len--) {
   18789:	eb 17                	jmp    187a2 <kernel_vsprintf+0x11a>
                        *curr++ = *str++;
   1878b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1878e:	8d 42 01             	lea    0x1(%edx),%eax
   18791:	89 45 f4             	mov    %eax,-0xc(%ebp)
   18794:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18797:	8d 48 01             	lea    0x1(%eax),%ecx
   1879a:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1879d:	0f b6 12             	movzbl (%edx),%edx
   187a0:	88 10                	mov    %dl,(%eax)
                    while (len--) {
   187a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   187a5:	8d 50 ff             	lea    -0x1(%eax),%edx
   187a8:	89 55 f0             	mov    %edx,-0x10(%ebp)
   187ab:	85 c0                	test   %eax,%eax
   187ad:	75 dc                	jne    1878b <kernel_vsprintf+0x103>
                    }
                }
                state = NORMAL;
   187af:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   187b6:	90                   	nop
    while ((ch = *fmt++)) {
   187b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   187ba:	8d 50 01             	lea    0x1(%eax),%edx
   187bd:	89 55 0c             	mov    %edx,0xc(%ebp)
   187c0:	0f b6 00             	movzbl (%eax),%eax
   187c3:	88 45 ef             	mov    %al,-0x11(%ebp)
   187c6:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   187ca:	0f 85 d0 fe ff ff    	jne    186a0 <kernel_vsprintf+0x18>
        }
    }
}
   187d0:	90                   	nop
   187d1:	c9                   	leave  
   187d2:	c3                   	ret    

000187d3 <panic>:

void panic (const char * file, int line, const char * func, const char * cond) {
   187d3:	55                   	push   %ebp
   187d4:	89 e5                	mov    %esp,%ebp
   187d6:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   187d9:	83 ec 08             	sub    $0x8,%esp
   187dc:	ff 75 14             	pushl  0x14(%ebp)
   187df:	68 18 9e 01 00       	push   $0x19e18
   187e4:	e8 47 02 00 00       	call   18a30 <log_printf>
   187e9:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   187ec:	ff 75 10             	pushl  0x10(%ebp)
   187ef:	ff 75 0c             	pushl  0xc(%ebp)
   187f2:	ff 75 08             	pushl  0x8(%ebp)
   187f5:	68 2a 9e 01 00       	push   $0x19e2a
   187fa:	e8 31 02 00 00       	call   18a30 <log_printf>
   187ff:	83 c4 10             	add    $0x10,%esp

    for (;;) {
        hlt();
   18802:	e8 4a fa ff ff       	call   18251 <hlt>
   18807:	eb f9                	jmp    18802 <panic+0x2f>

00018809 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   18809:	55                   	push   %ebp
   1880a:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   1880c:	8b 45 08             	mov    0x8(%ebp),%eax
   1880f:	8b 40 08             	mov    0x8(%eax),%eax
   18812:	85 c0                	test   %eax,%eax
   18814:	0f 94 c0             	sete   %al
   18817:	0f b6 c0             	movzbl %al,%eax
}
   1881a:	5d                   	pop    %ebp
   1881b:	c3                   	ret    

0001881c <list_init>:

/**
 * 初始化链表
 * @param list 待初始化的链表
 */
void list_init(list_t *list) {
   1881c:	55                   	push   %ebp
   1881d:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   1881f:	8b 45 08             	mov    0x8(%ebp),%eax
   18822:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   18829:	8b 45 08             	mov    0x8(%ebp),%eax
   1882c:	8b 50 04             	mov    0x4(%eax),%edx
   1882f:	8b 45 08             	mov    0x8(%ebp),%eax
   18832:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   18834:	8b 45 08             	mov    0x8(%ebp),%eax
   18837:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1883e:	90                   	nop
   1883f:	5d                   	pop    %ebp
   18840:	c3                   	ret    

00018841 <list_insert_first>:
/**
 * 将指定表项插入到指定链表的头部
 * @param list 待插入的链表
 * @param node 待插入的结点
 */
void list_insert_first(list_t *list, list_node_t *node) {
   18841:	55                   	push   %ebp
   18842:	89 e5                	mov    %esp,%ebp
    // 设置好待插入结点的前后，前面为空
    node->next = list->first;
   18844:	8b 45 08             	mov    0x8(%ebp),%eax
   18847:	8b 10                	mov    (%eax),%edx
   18849:	8b 45 0c             	mov    0xc(%ebp),%eax
   1884c:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   1884f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18852:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    // 如果为空，需要同时设置first和last指向自己
    if (list_is_empty(list)) {
   18858:	ff 75 08             	pushl  0x8(%ebp)
   1885b:	e8 a9 ff ff ff       	call   18809 <list_is_empty>
   18860:	83 c4 04             	add    $0x4,%esp
   18863:	85 c0                	test   %eax,%eax
   18865:	74 15                	je     1887c <list_insert_first+0x3b>
        list->last = list->first = node;
   18867:	8b 45 08             	mov    0x8(%ebp),%eax
   1886a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1886d:	89 10                	mov    %edx,(%eax)
   1886f:	8b 45 08             	mov    0x8(%ebp),%eax
   18872:	8b 10                	mov    (%eax),%edx
   18874:	8b 45 08             	mov    0x8(%ebp),%eax
   18877:	89 50 04             	mov    %edx,0x4(%eax)
   1887a:	eb 12                	jmp    1888e <list_insert_first+0x4d>
    } else {
        // 否则，设置好原本第一个结点的pre
        list->first->pre = node;
   1887c:	8b 45 08             	mov    0x8(%ebp),%eax
   1887f:	8b 00                	mov    (%eax),%eax
   18881:	8b 55 0c             	mov    0xc(%ebp),%edx
   18884:	89 10                	mov    %edx,(%eax)

        // 调整first指向
        list->first = node;
   18886:	8b 45 08             	mov    0x8(%ebp),%eax
   18889:	8b 55 0c             	mov    0xc(%ebp),%edx
   1888c:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   1888e:	8b 45 08             	mov    0x8(%ebp),%eax
   18891:	8b 40 08             	mov    0x8(%eax),%eax
   18894:	8d 50 01             	lea    0x1(%eax),%edx
   18897:	8b 45 08             	mov    0x8(%ebp),%eax
   1889a:	89 50 08             	mov    %edx,0x8(%eax)
}
   1889d:	90                   	nop
   1889e:	c9                   	leave  
   1889f:	c3                   	ret    

000188a0 <list_insert_last>:
/**
 * 将指定表项插入到指定链表的尾部
 * @param list 操作的链表
 * @param node 待插入的结点
 */
void list_insert_last(list_t *list, list_node_t *node) {
   188a0:	55                   	push   %ebp
   188a1:	89 e5                	mov    %esp,%ebp
    // 设置好结点本身
    node->pre = list->last;
   188a3:	8b 45 08             	mov    0x8(%ebp),%eax
   188a6:	8b 50 04             	mov    0x4(%eax),%edx
   188a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   188ac:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   188ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   188b1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    // 表空，则first/last都指向唯一的node
    if (list_is_empty(list)) {
   188b8:	ff 75 08             	pushl  0x8(%ebp)
   188bb:	e8 49 ff ff ff       	call   18809 <list_is_empty>
   188c0:	83 c4 04             	add    $0x4,%esp
   188c3:	85 c0                	test   %eax,%eax
   188c5:	74 16                	je     188dd <list_insert_last+0x3d>
        list->first = list->last = node;
   188c7:	8b 45 08             	mov    0x8(%ebp),%eax
   188ca:	8b 55 0c             	mov    0xc(%ebp),%edx
   188cd:	89 50 04             	mov    %edx,0x4(%eax)
   188d0:	8b 45 08             	mov    0x8(%ebp),%eax
   188d3:	8b 50 04             	mov    0x4(%eax),%edx
   188d6:	8b 45 08             	mov    0x8(%ebp),%eax
   188d9:	89 10                	mov    %edx,(%eax)
   188db:	eb 15                	jmp    188f2 <list_insert_last+0x52>
    } else {
        // 否则，调整last结点的向一指向为node
        list->last->next = node;
   188dd:	8b 45 08             	mov    0x8(%ebp),%eax
   188e0:	8b 40 04             	mov    0x4(%eax),%eax
   188e3:	8b 55 0c             	mov    0xc(%ebp),%edx
   188e6:	89 50 04             	mov    %edx,0x4(%eax)

        // node变成了新的后继结点
        list->last = node;
   188e9:	8b 45 08             	mov    0x8(%ebp),%eax
   188ec:	8b 55 0c             	mov    0xc(%ebp),%edx
   188ef:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   188f2:	8b 45 08             	mov    0x8(%ebp),%eax
   188f5:	8b 40 08             	mov    0x8(%eax),%eax
   188f8:	8d 50 01             	lea    0x1(%eax),%edx
   188fb:	8b 45 08             	mov    0x8(%ebp),%eax
   188fe:	89 50 08             	mov    %edx,0x8(%eax)
}
   18901:	90                   	nop
   18902:	c9                   	leave  
   18903:	c3                   	ret    

00018904 <list_remove_first>:
/**
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t* list_remove_first(list_t *list) {
   18904:	55                   	push   %ebp
   18905:	89 e5                	mov    %esp,%ebp
   18907:	83 ec 10             	sub    $0x10,%esp
    // 表项为空，返回空
    if (list_is_empty(list)) {
   1890a:	ff 75 08             	pushl  0x8(%ebp)
   1890d:	e8 f7 fe ff ff       	call   18809 <list_is_empty>
   18912:	83 c4 04             	add    $0x4,%esp
   18915:	85 c0                	test   %eax,%eax
   18917:	74 07                	je     18920 <list_remove_first+0x1c>
        return (list_node_t*)0;
   18919:	b8 00 00 00 00       	mov    $0x0,%eax
   1891e:	eb 5a                	jmp    1897a <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t * remove_node = list->first;
   18920:	8b 45 08             	mov    0x8(%ebp),%eax
   18923:	8b 00                	mov    (%eax),%eax
   18925:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   18928:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1892b:	8b 50 04             	mov    0x4(%eax),%edx
   1892e:	8b 45 08             	mov    0x8(%ebp),%eax
   18931:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {
   18933:	8b 45 08             	mov    0x8(%ebp),%eax
   18936:	8b 00                	mov    (%eax),%eax
   18938:	85 c0                	test   %eax,%eax
   1893a:	75 0c                	jne    18948 <list_remove_first+0x44>
        // node为最后一个结点
        list->last = (list_node_t*)0;
   1893c:	8b 45 08             	mov    0x8(%ebp),%eax
   1893f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   18946:	eb 0c                	jmp    18954 <list_remove_first+0x50>
    } else {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   18948:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1894b:	8b 40 04             	mov    0x4(%eax),%eax
   1894e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t*)0;
   18954:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18957:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1895d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18960:	8b 10                	mov    (%eax),%edx
   18962:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18965:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   18968:	8b 45 08             	mov    0x8(%ebp),%eax
   1896b:	8b 40 08             	mov    0x8(%eax),%eax
   1896e:	8d 50 ff             	lea    -0x1(%eax),%edx
   18971:	8b 45 08             	mov    0x8(%ebp),%eax
   18974:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   18977:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1897a:	c9                   	leave  
   1897b:	c3                   	ret    

0001897c <list_remove>:

/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t * list_remove(list_t *list, list_node_t *remove_node) {
   1897c:	55                   	push   %ebp
   1897d:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first) {
   1897f:	8b 45 08             	mov    0x8(%ebp),%eax
   18982:	8b 00                	mov    (%eax),%eax
   18984:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18987:	75 0b                	jne    18994 <list_remove+0x18>
        list->first = remove_node->next;
   18989:	8b 45 0c             	mov    0xc(%ebp),%eax
   1898c:	8b 50 04             	mov    0x4(%eax),%edx
   1898f:	8b 45 08             	mov    0x8(%ebp),%eax
   18992:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last) {
   18994:	8b 45 08             	mov    0x8(%ebp),%eax
   18997:	8b 40 04             	mov    0x4(%eax),%eax
   1899a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1899d:	75 0b                	jne    189aa <list_remove+0x2e>
        list->last = remove_node->pre;
   1899f:	8b 45 0c             	mov    0xc(%ebp),%eax
   189a2:	8b 10                	mov    (%eax),%edx
   189a4:	8b 45 08             	mov    0x8(%ebp),%eax
   189a7:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre) {
   189aa:	8b 45 0c             	mov    0xc(%ebp),%eax
   189ad:	8b 00                	mov    (%eax),%eax
   189af:	85 c0                	test   %eax,%eax
   189b1:	74 0e                	je     189c1 <list_remove+0x45>
        remove_node->pre->next = remove_node->next;
   189b3:	8b 45 0c             	mov    0xc(%ebp),%eax
   189b6:	8b 00                	mov    (%eax),%eax
   189b8:	8b 55 0c             	mov    0xc(%ebp),%edx
   189bb:	8b 52 04             	mov    0x4(%edx),%edx
   189be:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next) {
   189c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   189c4:	8b 40 04             	mov    0x4(%eax),%eax
   189c7:	85 c0                	test   %eax,%eax
   189c9:	74 0d                	je     189d8 <list_remove+0x5c>
        remove_node->next->pre = remove_node->pre;
   189cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   189ce:	8b 40 04             	mov    0x4(%eax),%eax
   189d1:	8b 55 0c             	mov    0xc(%ebp),%edx
   189d4:	8b 12                	mov    (%edx),%edx
   189d6:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t*)0;
   189d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   189db:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   189e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   189e5:	8b 50 04             	mov    0x4(%eax),%edx
   189e8:	8b 45 0c             	mov    0xc(%ebp),%eax
   189eb:	89 10                	mov    %edx,(%eax)
    --list->count;
   189ed:	8b 45 08             	mov    0x8(%ebp),%eax
   189f0:	8b 40 08             	mov    0x8(%eax),%eax
   189f3:	8d 50 ff             	lea    -0x1(%eax),%edx
   189f6:	8b 45 08             	mov    0x8(%ebp),%eax
   189f9:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   189fc:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   189ff:	5d                   	pop    %ebp
   18a00:	c3                   	ret    

00018a01 <log_init>:
static int log_dev_id;

/**
 * @brief 初始化日志输出
 */
void log_init (void) {
   18a01:	55                   	push   %ebp
   18a02:	89 e5                	mov    %esp,%ebp
   18a04:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   18a07:	83 ec 0c             	sub    $0xc,%esp
   18a0a:	68 a8 e0 05 00       	push   $0x5e0a8
   18a0f:	e8 27 f3 ff ff       	call   17d3b <mutex_init>
   18a14:	83 c4 10             	add    $0x10,%esp

    log_dev_id = dev_open(DEV_TTY, 0, 0);
   18a17:	83 ec 04             	sub    $0x4,%esp
   18a1a:	6a 00                	push   $0x0
   18a1c:	6a 00                	push   $0x0
   18a1e:	6a 01                	push   $0x1
   18a20:	e8 63 b4 ff ff       	call   13e88 <dev_open>
   18a25:	83 c4 10             	add    $0x10,%esp
   18a28:	a3 bc e0 05 00       	mov    %eax,0x5e0bc
  
    // If serial is not faulty set it in normal operation mode
    // (not-loopback with IRQs enabled and OUT#1 and OUT#2 bits enabled)
    outb(COM1_PORT + 4, 0x0F);
#endif
}
   18a2d:	90                   	nop
   18a2e:	c9                   	leave  
   18a2f:	c3                   	ret    

00018a30 <log_printf>:

/**
 * @brief 日志打印
 */
void log_printf(const char * fmt, ...) {
   18a30:	55                   	push   %ebp
   18a31:	89 e5                	mov    %esp,%ebp
   18a33:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;

    kernel_memset(str_buf, '\0', sizeof(str_buf));
   18a39:	83 ec 04             	sub    $0x4,%esp
   18a3c:	68 80 00 00 00       	push   $0x80
   18a41:	6a 00                	push   $0x0
   18a43:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   18a49:	50                   	push   %eax
   18a4a:	e8 37 fa ff ff       	call   18486 <kernel_memset>
   18a4f:	83 c4 10             	add    $0x10,%esp

    va_start(args, fmt);
   18a52:	8d 45 0c             	lea    0xc(%ebp),%eax
   18a55:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   18a5b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
   18a61:	83 ec 04             	sub    $0x4,%esp
   18a64:	50                   	push   %eax
   18a65:	ff 75 08             	pushl  0x8(%ebp)
   18a68:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   18a6e:	50                   	push   %eax
   18a6f:	e8 14 fc ff ff       	call   18688 <kernel_vsprintf>
   18a74:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    // 显示，如果发送速度太慢，会造成这里关中断太长时间
    // 所以，这里这样做不是好办法
    mutex_lock(&mutex);
   18a77:	83 ec 0c             	sub    $0xc,%esp
   18a7a:	68 a8 e0 05 00       	push   $0x5e0a8
   18a7f:	e8 e5 f2 ff ff       	call   17d69 <mutex_lock>
   18a84:	83 c4 10             	add    $0x10,%esp

    outb(COM1_PORT, '\r');
    outb(COM1_PORT, '\n');
#else
    //console_write(0, str_buf, kernel_strlen(str_buf));
    dev_write(log_dev_id, 0, "log:", 4);
   18a87:	a1 bc e0 05 00       	mov    0x5e0bc,%eax
   18a8c:	6a 04                	push   $0x4
   18a8e:	68 68 9e 01 00       	push   $0x19e68
   18a93:	6a 00                	push   $0x0
   18a95:	50                   	push   %eax
   18a96:	e8 85 b5 ff ff       	call   14020 <dev_write>
   18a9b:	83 c4 10             	add    $0x10,%esp
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   18a9e:	83 ec 0c             	sub    $0xc,%esp
   18aa1:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   18aa7:	50                   	push   %eax
   18aa8:	e8 d5 f8 ff ff       	call   18382 <kernel_strlen>
   18aad:	83 c4 10             	add    $0x10,%esp
   18ab0:	89 c2                	mov    %eax,%edx
   18ab2:	a1 bc e0 05 00       	mov    0x5e0bc,%eax
   18ab7:	52                   	push   %edx
   18ab8:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
   18abe:	52                   	push   %edx
   18abf:	6a 00                	push   $0x0
   18ac1:	50                   	push   %eax
   18ac2:	e8 59 b5 ff ff       	call   14020 <dev_write>
   18ac7:	83 c4 10             	add    $0x10,%esp

    char c = '\n';
   18aca:	c6 85 73 ff ff ff 0a 	movb   $0xa,-0x8d(%ebp)
    //console_write(0, &c, 1);
    dev_write(log_dev_id, 0, &c, 1);
   18ad1:	a1 bc e0 05 00       	mov    0x5e0bc,%eax
   18ad6:	6a 01                	push   $0x1
   18ad8:	8d 95 73 ff ff ff    	lea    -0x8d(%ebp),%edx
   18ade:	52                   	push   %edx
   18adf:	6a 00                	push   $0x0
   18ae1:	50                   	push   %eax
   18ae2:	e8 39 b5 ff ff       	call   14020 <dev_write>
   18ae7:	83 c4 10             	add    $0x10,%esp

#endif
    mutex_unlock(&mutex);
   18aea:	83 ec 0c             	sub    $0xc,%esp
   18aed:	68 a8 e0 05 00       	push   $0x5e0a8
   18af2:	e8 09 f3 ff ff       	call   17e00 <mutex_unlock>
   18af7:	83 c4 10             	add    $0x10,%esp
}
   18afa:	90                   	nop
   18afb:	c9                   	leave  
   18afc:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
 	.text
 	.global first_task_entry
	.extern first_task_main
first_task_entry:
    // 需要重新加载各数据段
    mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
    jmp first_task_main
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:
 * 内核初始化以及测试代码
 */
#include "applib/lib_syscall.h"
#include "dev/tty.h"

int first_task_main (void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
        print_msg("task id = %d", pid);
        msleep(1000);
    }
#endif

    for (int i = 0; i < TTY_NR; i++) {
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	e9 90 00 00 00       	jmp    800000b2 <first_task_main+0xa2>
        int pid = fork();
80000022:	e8 62 01 00 00       	call   80000189 <fork>
80000027:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0) {
8000002a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002e:	79 14                	jns    80000044 <first_task_main+0x34>
            print_msg("create shell proc failed", 0);
80000030:	83 ec 08             	sub    $0x8,%esp
80000033:	6a 00                	push   $0x0
80000035:	68 6d 9e 01 00       	push   $0x19e6d
8000003a:	e8 23 01 00 00       	call   80000162 <print_msg>
8000003f:	83 c4 10             	add    $0x10,%esp
            break;
80000042:	eb 78                	jmp    800000bc <first_task_main+0xac>
        } else if (pid == 0) {
80000044:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000048:	75 64                	jne    800000ae <first_task_main+0x9e>
            // 子进程
            char tty_num[] = "/dev/tty?";
8000004a:	c7 45 e6 2f 64 65 76 	movl   $0x7665642f,-0x1a(%ebp)
80000051:	c7 45 ea 2f 74 74 79 	movl   $0x7974742f,-0x16(%ebp)
80000058:	66 c7 45 ee 3f 00    	movw   $0x3f,-0x12(%ebp)
            tty_num[sizeof(tty_num) - 2] = i + '0';
8000005e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80000061:	83 c0 30             	add    $0x30,%eax
80000064:	88 45 ee             	mov    %al,-0x12(%ebp)
            char * argv[] = {tty_num, (char *)0};
80000067:	8d 45 e6             	lea    -0x1a(%ebp),%eax
8000006a:	89 45 dc             	mov    %eax,-0x24(%ebp)
8000006d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            execve("shell.elf", argv, (char **)0);
80000074:	83 ec 04             	sub    $0x4,%esp
80000077:	6a 00                	push   $0x0
80000079:	8d 45 dc             	lea    -0x24(%ebp),%eax
8000007c:	50                   	push   %eax
8000007d:	68 86 9e 01 00       	push   $0x19e86
80000082:	e8 1d 01 00 00       	call   800001a4 <execve>
80000087:	83 c4 10             	add    $0x10,%esp
            print_msg("create shell proc failed", 0);
8000008a:	83 ec 08             	sub    $0x8,%esp
8000008d:	6a 00                	push   $0x0
8000008f:	68 6d 9e 01 00       	push   $0x19e6d
80000094:	e8 c9 00 00 00       	call   80000162 <print_msg>
80000099:	83 c4 10             	add    $0x10,%esp
            while (1) {
                msleep(10000);
8000009c:	83 ec 0c             	sub    $0xc,%esp
8000009f:	68 10 27 00 00       	push   $0x2710
800000a4:	e8 70 00 00 00       	call   80000119 <msleep>
800000a9:	83 c4 10             	add    $0x10,%esp
800000ac:	eb ee                	jmp    8000009c <first_task_main+0x8c>
    for (int i = 0; i < TTY_NR; i++) {
800000ae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
800000b2:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
800000b6:	0f 8e 66 ff ff ff    	jle    80000022 <first_task_main+0x12>
    }

    while (1) {
        // 不断收集孤儿进程
        int status;
        wait(&status);
800000bc:	83 ec 0c             	sub    $0xc,%esp
800000bf:	8d 45 d8             	lea    -0x28(%ebp),%eax
800000c2:	50                   	push   %eax
800000c3:	e8 24 01 00 00       	call   800001ec <wait>
800000c8:	83 c4 10             	add    $0x10,%esp
    while (1) {
800000cb:	eb ef                	jmp    800000bc <first_task_main+0xac>

800000cd <sys_call>:
#include "malloc.h"

/**
 * 执行系统调用
 */
static inline int sys_call (syscall_args_t * args) {
800000cd:	55                   	push   %ebp
800000ce:	89 e5                	mov    %esp,%ebp
800000d0:	57                   	push   %edi
800000d1:	56                   	push   %esi
800000d2:	53                   	push   %ebx
800000d3:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0};  // 使用特权级0
800000d6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000dd:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
            :"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
800000e4:	8b 45 08             	mov    0x8(%ebp),%eax
800000e7:	8b 40 10             	mov    0x10(%eax),%eax
800000ea:	8b 55 08             	mov    0x8(%ebp),%edx
800000ed:	8b 52 0c             	mov    0xc(%edx),%edx
800000f0:	8b 4d 08             	mov    0x8(%ebp),%ecx
800000f3:	8b 49 08             	mov    0x8(%ecx),%ecx
    [arg0]"r"(args->arg0), [id]"r"(args->id),
800000f6:	8b 5d 08             	mov    0x8(%ebp),%ebx
800000f9:	8b 5b 04             	mov    0x4(%ebx),%ebx
800000fc:	8b 75 08             	mov    0x8(%ebp),%esi
800000ff:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000101:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000104:	50                   	push   %eax
80000105:	52                   	push   %edx
80000106:	51                   	push   %ecx
80000107:	53                   	push   %ebx
80000108:	56                   	push   %esi
80000109:	ff 1f                	lcall  *(%edi)
8000010b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    [gate]"r"(sys_gate_addr));
    return ret;
8000010e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000111:	83 c4 10             	add    $0x10,%esp
80000114:	5b                   	pop    %ebx
80000115:	5e                   	pop    %esi
80000116:	5f                   	pop    %edi
80000117:	5d                   	pop    %ebp
80000118:	c3                   	ret    

80000119 <msleep>:

int msleep (int ms) {
80000119:	55                   	push   %ebp
8000011a:	89 e5                	mov    %esp,%ebp
8000011c:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
8000011f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000123:	7f 07                	jg     8000012c <msleep+0x13>
        return 0;
80000125:	b8 00 00 00 00       	mov    $0x0,%eax
8000012a:	eb 19                	jmp    80000145 <msleep+0x2c>
    }

    syscall_args_t args;
    args.id = SYS_msleep;
8000012c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
80000133:	8b 45 08             	mov    0x8(%ebp),%eax
80000136:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000139:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000013c:	50                   	push   %eax
8000013d:	e8 8b ff ff ff       	call   800000cd <sys_call>
80000142:	83 c4 04             	add    $0x4,%esp
}
80000145:	c9                   	leave  
80000146:	c3                   	ret    

80000147 <getpid>:

int getpid() {
80000147:	55                   	push   %ebp
80000148:	89 e5                	mov    %esp,%ebp
8000014a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000014d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
80000154:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000157:	50                   	push   %eax
80000158:	e8 70 ff ff ff       	call   800000cd <sys_call>
8000015d:	83 c4 04             	add    $0x4,%esp
}
80000160:	c9                   	leave  
80000161:	c3                   	ret    

80000162 <print_msg>:

int print_msg(char * fmt, int arg) {
80000162:	55                   	push   %ebp
80000163:	89 e5                	mov    %esp,%ebp
80000165:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000168:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000016f:	8b 45 08             	mov    0x8(%ebp),%eax
80000172:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000175:	8b 45 0c             	mov    0xc(%ebp),%eax
80000178:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
8000017b:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000017e:	50                   	push   %eax
8000017f:	e8 49 ff ff ff       	call   800000cd <sys_call>
80000184:	83 c4 04             	add    $0x4,%esp
}
80000187:	c9                   	leave  
80000188:	c3                   	ret    

80000189 <fork>:

int fork() {
80000189:	55                   	push   %ebp
8000018a:	89 e5                	mov    %esp,%ebp
8000018c:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8000018f:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    return sys_call(&args);
80000196:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000199:	50                   	push   %eax
8000019a:	e8 2e ff ff ff       	call   800000cd <sys_call>
8000019f:	83 c4 04             	add    $0x4,%esp
}
800001a2:	c9                   	leave  
800001a3:	c3                   	ret    

800001a4 <execve>:

int execve(const char *name, char * const *argv, char * const *env) {
800001a4:	55                   	push   %ebp
800001a5:	89 e5                	mov    %esp,%ebp
800001a7:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001aa:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001b1:	8b 45 08             	mov    0x8(%ebp),%eax
800001b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001b7:	8b 45 0c             	mov    0xc(%ebp),%eax
800001ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001bd:	8b 45 10             	mov    0x10(%ebp),%eax
800001c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800001c3:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001c6:	50                   	push   %eax
800001c7:	e8 01 ff ff ff       	call   800000cd <sys_call>
800001cc:	83 c4 04             	add    $0x4,%esp
}
800001cf:	c9                   	leave  
800001d0:	c3                   	ret    

800001d1 <yield>:

int yield (void) {
800001d1:	55                   	push   %ebp
800001d2:	89 e5                	mov    %esp,%ebp
800001d4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001d7:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
800001de:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001e1:	50                   	push   %eax
800001e2:	e8 e6 fe ff ff       	call   800000cd <sys_call>
800001e7:	83 c4 04             	add    $0x4,%esp
}
800001ea:	c9                   	leave  
800001eb:	c3                   	ret    

800001ec <wait>:

int wait(int* status) {
800001ec:	55                   	push   %ebp
800001ed:	89 e5                	mov    %esp,%ebp
800001ef:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
800001f2:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
800001f9:	8b 45 08             	mov    0x8(%ebp),%eax
800001fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
800001ff:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000202:	50                   	push   %eax
80000203:	e8 c5 fe ff ff       	call   800000cd <sys_call>
80000208:	83 c4 04             	add    $0x4,%esp
}
8000020b:	c9                   	leave  
8000020c:	c3                   	ret    

8000020d <_exit>:

void _exit(int status) {
8000020d:	55                   	push   %ebp
8000020e:	89 e5                	mov    %esp,%ebp
80000210:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
80000213:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = (int)status;
8000021a:	8b 45 08             	mov    0x8(%ebp),%eax
8000021d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
80000220:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000223:	50                   	push   %eax
80000224:	e8 a4 fe ff ff       	call   800000cd <sys_call>
80000229:	83 c4 04             	add    $0x4,%esp
    for (;;) {}
8000022c:	eb fe                	jmp    8000022c <_exit+0x1f>

8000022e <open>:
}

int open(const char *name, int flags, ...) {
8000022e:	55                   	push   %ebp
8000022f:	89 e5                	mov    %esp,%ebp
80000231:	83 ec 20             	sub    $0x20,%esp
    // 不考虑支持太多参数
    syscall_args_t args;
    args.id = SYS_open;
80000234:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
8000023b:	8b 45 08             	mov    0x8(%ebp),%eax
8000023e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
80000241:	8b 45 0c             	mov    0xc(%ebp),%eax
80000244:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000247:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000024a:	50                   	push   %eax
8000024b:	e8 7d fe ff ff       	call   800000cd <sys_call>
80000250:	83 c4 04             	add    $0x4,%esp
}
80000253:	c9                   	leave  
80000254:	c3                   	ret    

80000255 <read>:

int read(int file, char *ptr, int len) {
80000255:	55                   	push   %ebp
80000256:	89 e5                	mov    %esp,%ebp
80000258:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
8000025b:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
80000262:	8b 45 08             	mov    0x8(%ebp),%eax
80000265:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000268:	8b 45 0c             	mov    0xc(%ebp),%eax
8000026b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000026e:	8b 45 10             	mov    0x10(%ebp),%eax
80000271:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
80000274:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000277:	50                   	push   %eax
80000278:	e8 50 fe ff ff       	call   800000cd <sys_call>
8000027d:	83 c4 04             	add    $0x4,%esp
}
80000280:	c9                   	leave  
80000281:	c3                   	ret    

80000282 <write>:

int write(int file, char *ptr, int len) {
80000282:	55                   	push   %ebp
80000283:	89 e5                	mov    %esp,%ebp
80000285:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000288:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
8000028f:	8b 45 08             	mov    0x8(%ebp),%eax
80000292:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000295:	8b 45 0c             	mov    0xc(%ebp),%eax
80000298:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000029b:	8b 45 10             	mov    0x10(%ebp),%eax
8000029e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002a1:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002a4:	50                   	push   %eax
800002a5:	e8 23 fe ff ff       	call   800000cd <sys_call>
800002aa:	83 c4 04             	add    $0x4,%esp
}
800002ad:	c9                   	leave  
800002ae:	c3                   	ret    

800002af <close>:

int close(int file) {
800002af:	55                   	push   %ebp
800002b0:	89 e5                	mov    %esp,%ebp
800002b2:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
800002b5:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
800002bc:	8b 45 08             	mov    0x8(%ebp),%eax
800002bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
800002c2:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002c5:	50                   	push   %eax
800002c6:	e8 02 fe ff ff       	call   800000cd <sys_call>
800002cb:	83 c4 04             	add    $0x4,%esp
}
800002ce:	c9                   	leave  
800002cf:	c3                   	ret    

800002d0 <lseek>:

int lseek(int file, int ptr, int dir) {
800002d0:	55                   	push   %ebp
800002d1:	89 e5                	mov    %esp,%ebp
800002d3:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
800002d6:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
800002dd:	8b 45 08             	mov    0x8(%ebp),%eax
800002e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
800002e3:	8b 45 0c             	mov    0xc(%ebp),%eax
800002e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002e9:	8b 45 10             	mov    0x10(%ebp),%eax
800002ec:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002ef:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002f2:	50                   	push   %eax
800002f3:	e8 d5 fd ff ff       	call   800000cd <sys_call>
800002f8:	83 c4 04             	add    $0x4,%esp
}
800002fb:	c9                   	leave  
800002fc:	c3                   	ret    

800002fd <fstat>:

/**
 * 获取文件的状态
 */
int fstat(int file, struct stat *st) {
800002fd:	55                   	push   %ebp
800002fe:	89 e5                	mov    %esp,%ebp
80000300:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
80000303:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
8000030a:	8b 45 08             	mov    0x8(%ebp),%eax
8000030d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
80000310:	8b 45 0c             	mov    0xc(%ebp),%eax
80000313:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000316:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000319:	50                   	push   %eax
8000031a:	e8 ae fd ff ff       	call   800000cd <sys_call>
8000031f:	83 c4 04             	add    $0x4,%esp
}
80000322:	c9                   	leave  
80000323:	c3                   	ret    

80000324 <isatty>:

/**
 * 判断文件描述符与tty关联
 */
int isatty(int file) {
80000324:	55                   	push   %ebp
80000325:	89 e5                	mov    %esp,%ebp
80000327:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
8000032a:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
80000331:	8b 45 08             	mov    0x8(%ebp),%eax
80000334:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000337:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000033a:	50                   	push   %eax
8000033b:	e8 8d fd ff ff       	call   800000cd <sys_call>
80000340:	83 c4 04             	add    $0x4,%esp
}
80000343:	c9                   	leave  
80000344:	c3                   	ret    

80000345 <sbrk>:

void * sbrk(ptrdiff_t incr) {
80000345:	55                   	push   %ebp
80000346:	89 e5                	mov    %esp,%ebp
80000348:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
8000034b:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
80000352:	8b 45 08             	mov    0x8(%ebp),%eax
80000355:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
80000358:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000035b:	50                   	push   %eax
8000035c:	e8 6c fd ff ff       	call   800000cd <sys_call>
80000361:	83 c4 04             	add    $0x4,%esp
}
80000364:	c9                   	leave  
80000365:	c3                   	ret    

80000366 <dup>:

int dup (int file) {
80000366:	55                   	push   %ebp
80000367:	89 e5                	mov    %esp,%ebp
80000369:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
8000036c:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
80000373:	8b 45 08             	mov    0x8(%ebp),%eax
80000376:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000379:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000037c:	50                   	push   %eax
8000037d:	e8 4b fd ff ff       	call   800000cd <sys_call>
80000382:	83 c4 04             	add    $0x4,%esp
}
80000385:	c9                   	leave  
80000386:	c3                   	ret    
